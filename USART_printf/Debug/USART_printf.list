
USART_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ccc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08006de0  08006de0  00007de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800723c  0800723c  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800723c  0800723c  0000823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007244  08007244  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007244  08007244  00008244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007248  08007248  00008248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800724c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001d4  08007420  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08007420  0000938c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007478  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001595  00000000  00000000  00010675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00011c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000525  00000000  00000000  000122e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001788b  00000000  00000000  00012805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f67  00000000  00000000  0002a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008400f  00000000  00000000  00031ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6006  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fec  00000000  00000000  000b604c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b9038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006dc4 	.word	0x08006dc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006dc4 	.word	0x08006dc4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <__io_putchar>:
//#else
//#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
//#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
//#endif

PUTCHAR_PROTOTYPE {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b0a      	cmp	r3, #10
 8000be0:	d106      	bne.n	8000bf0 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 1, 0xFFFF);
 8000be2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000be6:	2201      	movs	r2, #1
 8000be8:	4907      	ldr	r1, [pc, #28]	@ (8000c08 <__io_putchar+0x34>)
 8000bea:	4808      	ldr	r0, [pc, #32]	@ (8000c0c <__io_putchar+0x38>)
 8000bec:	f001 fa78 	bl	80020e0 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000bf0:	1d39      	adds	r1, r7, #4
 8000bf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <__io_putchar+0x38>)
 8000bfa:	f001 fa71 	bl	80020e0 <HAL_UART_Transmit>

	return ch;
 8000bfe:	687b      	ldr	r3, [r7, #4]

}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08006de0 	.word	0x08006de0
 8000c0c:	200001f0 	.word	0x200001f0

08000c10 <__io_getchar>:
#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

GETCHAR_PROTOTYPE {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	71fb      	strb	r3, [r7, #7]
	// UART로 데이터가 수신될 때까지 대기
	HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 8000c1a:	1df9      	adds	r1, r7, #7
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	2201      	movs	r2, #1
 8000c22:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <__io_getchar+0x24>)
 8000c24:	f001 fae7 	bl	80021f6 <HAL_UART_Receive>
	return ch;
 8000c28:	79fb      	ldrb	r3, [r7, #7]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200001f0 	.word	0x200001f0

08000c38 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c3e:	f000 fa9d 	bl	800117c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c42:	f000 f829 	bl	8000c98 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c46:	f000 f893 	bl	8000d70 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000c4a:	f000 f867 	bl	8000d1c <MX_USART2_UART_Init>
//		if(counter == 10){
//			printf("end \n");
//			break;
//		}

		HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 8000c4e:	1df9      	adds	r1, r7, #7
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	2201      	movs	r2, #1
 8000c56:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <main+0x54>)
 8000c58:	f001 facd 	bl	80021f6 <HAL_UART_Receive>
//		printf("%c\n",ch);
		if(ch == '\n' || ch == '\r'){
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b0a      	cmp	r3, #10
 8000c60:	d002      	beq.n	8000c68 <main+0x30>
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b0d      	cmp	r3, #13
 8000c66:	d102      	bne.n	8000c6e <main+0x36>
			printf("\r\n");
 8000c68:	4809      	ldr	r0, [pc, #36]	@ (8000c90 <main+0x58>)
 8000c6a:	f002 fce5 	bl	8003638 <puts>

		}
		printf("%c",ch);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f002 fc83 	bl	800357c <putchar>
		fflush(stdout);
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <main+0x5c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fba7 	bl	80033d0 <fflush>

		HAL_Delay(100);
 8000c82:	2064      	movs	r0, #100	@ 0x64
 8000c84:	f000 fadc 	bl	8001240 <HAL_Delay>
		HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 8000c88:	e7e1      	b.n	8000c4e <main+0x16>
 8000c8a:	bf00      	nop
 8000c8c:	200001f0 	.word	0x200001f0
 8000c90:	08006de4 	.word	0x08006de4
 8000c94:	20000018 	.word	0x20000018

08000c98 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b090      	sub	sp, #64	@ 0x40
 8000c9c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c9e:	f107 0318 	add.w	r3, r7, #24
 8000ca2:	2228      	movs	r2, #40	@ 0x28
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 fdc8 	bl	800383c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cce:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fda1 	bl	8001820 <HAL_RCC_OscConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0x50>
		Error_Handler();
 8000ce4:	f000 f8b2 	bl	8000e4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ce8:	230f      	movs	r3, #15
 8000cea:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cec:	2302      	movs	r3, #2
 8000cee:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2102      	movs	r1, #2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 f80e 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x7a>
		Error_Handler();
 8000d0e:	f000 f89d 	bl	8000e4c <Error_Handler>
	}
}
 8000d12:	bf00      	nop
 8000d14:	3740      	adds	r7, #64	@ 0x40
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000d20:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <MX_USART2_UART_Init+0x50>)
 8000d24:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000d52:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d54:	f001 f974 	bl	8002040 <HAL_UART_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000d5e:	f000 f875 	bl	8000e4c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200001f0 	.word	0x200001f0
 8000d6c:	40004400 	.word	0x40004400

08000d70 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d84:	4b2d      	ldr	r3, [pc, #180]	@ (8000e3c <MX_GPIO_Init+0xcc>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a2c      	ldr	r2, [pc, #176]	@ (8000e3c <MX_GPIO_Init+0xcc>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b2a      	ldr	r3, [pc, #168]	@ (8000e3c <MX_GPIO_Init+0xcc>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0310 	and.w	r3, r3, #16
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9c:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <MX_GPIO_Init+0xcc>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a26      	ldr	r2, [pc, #152]	@ (8000e3c <MX_GPIO_Init+0xcc>)
 8000da2:	f043 0320 	orr.w	r3, r3, #32
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <MX_GPIO_Init+0xcc>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0320 	and.w	r3, r3, #32
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <MX_GPIO_Init+0xcc>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a20      	ldr	r2, [pc, #128]	@ (8000e3c <MX_GPIO_Init+0xcc>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e3c <MX_GPIO_Init+0xcc>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e3c <MX_GPIO_Init+0xcc>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e3c <MX_GPIO_Init+0xcc>)
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <MX_GPIO_Init+0xcc>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2120      	movs	r1, #32
 8000de8:	4815      	ldr	r0, [pc, #84]	@ (8000e40 <MX_GPIO_Init+0xd0>)
 8000dea:	f000 fcdf 	bl	80017ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000dee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000df2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <MX_GPIO_Init+0xd4>)
 8000df6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	4619      	mov	r1, r3
 8000e02:	4811      	ldr	r0, [pc, #68]	@ (8000e48 <MX_GPIO_Init+0xd8>)
 8000e04:	f000 fb4e 	bl	80014a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000e08:	2320      	movs	r3, #32
 8000e0a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4808      	ldr	r0, [pc, #32]	@ (8000e40 <MX_GPIO_Init+0xd0>)
 8000e20:	f000 fb40 	bl	80014a4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	2028      	movs	r0, #40	@ 0x28
 8000e2a:	f000 fb04 	bl	8001436 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e2e:	2028      	movs	r0, #40	@ 0x28
 8000e30:	f000 fb1d 	bl	800146e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010800 	.word	0x40010800
 8000e44:	10110000 	.word	0x10110000
 8000e48:	40011000 	.word	0x40011000

08000e4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <Error_Handler+0x8>

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6193      	str	r3, [r2, #24]
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_MspInit+0x60>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <HAL_MspInit+0x60>)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000

08000ebc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a15      	ldr	r2, [pc, #84]	@ (8000f2c <HAL_UART_MspInit+0x70>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d123      	bne.n	8000f24 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000edc:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <HAL_UART_MspInit+0x74>)
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <HAL_UART_MspInit+0x74>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee6:	61d3      	str	r3, [r2, #28]
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_UART_MspInit+0x74>)
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <HAL_UART_MspInit+0x74>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <HAL_UART_MspInit+0x74>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <HAL_UART_MspInit+0x74>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f0c:	230c      	movs	r3, #12
 8000f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <HAL_UART_MspInit+0x78>)
 8000f20:	f000 fac0 	bl	80014a4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010800 	.word	0x40010800

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <NMI_Handler+0x4>

08000f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <MemManage_Handler+0x4>

08000f50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f88:	f000 f93e 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f94:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f98:	f000 fc20 	bl	80017dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return 1;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <_kill>:

int _kill(int pid, int sig)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fb8:	f002 fc92 	bl	80038e0 <__errno>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2216      	movs	r2, #22
 8000fc0:	601a      	str	r2, [r3, #0]
  return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_exit>:

void _exit (int status)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffe7 	bl	8000fae <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <_exit+0x12>

08000fe4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	e00a      	b.n	800100c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ff6:	f7ff fe0b 	bl	8000c10 <__io_getchar>
 8000ffa:	4601      	mov	r1, r0
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60ba      	str	r2, [r7, #8]
 8001002:	b2ca      	uxtb	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	dbf0      	blt.n	8000ff6 <_read+0x12>
  }

  return len;
 8001014:	687b      	ldr	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	e009      	b.n	8001044 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fdcb 	bl	8000bd4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf1      	blt.n	8001030 <_write+0x12>
  }
  return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_close>:

int _close(int file)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800107c:	605a      	str	r2, [r3, #4]
  return 0;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <_isatty>:

int _isatty(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800109e:	b480      	push	{r7}
 80010a0:	b085      	sub	sp, #20
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
	...

080010b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c0:	4a14      	ldr	r2, [pc, #80]	@ (8001114 <_sbrk+0x5c>)
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <_sbrk+0x60>)
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010cc:	4b13      	ldr	r3, [pc, #76]	@ (800111c <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <_sbrk+0x64>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <_sbrk+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d207      	bcs.n	80010f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e8:	f002 fbfa 	bl	80038e0 <__errno>
 80010ec:	4603      	mov	r3, r0
 80010ee:	220c      	movs	r2, #12
 80010f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e009      	b.n	800110c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fe:	4b07      	ldr	r3, [pc, #28]	@ (800111c <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	4a05      	ldr	r2, [pc, #20]	@ (800111c <_sbrk+0x64>)
 8001108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20005000 	.word	0x20005000
 8001118:	00000400 	.word	0x00000400
 800111c:	20000238 	.word	0x20000238
 8001120:	20000390 	.word	0x20000390

08001124 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001130:	f7ff fff8 	bl	8001124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480b      	ldr	r0, [pc, #44]	@ (8001164 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001136:	490c      	ldr	r1, [pc, #48]	@ (8001168 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001138:	4a0c      	ldr	r2, [pc, #48]	@ (800116c <LoopFillZerobss+0x16>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a09      	ldr	r2, [pc, #36]	@ (8001170 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800114c:	4c09      	ldr	r4, [pc, #36]	@ (8001174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115a:	f002 fbc7 	bl	80038ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800115e:	f7ff fd6b 	bl	8000c38 <main>
  bx lr
 8001162:	4770      	bx	lr
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001168:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800116c:	0800724c 	.word	0x0800724c
  ldr r2, =_sbss
 8001170:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001174:	2000038c 	.word	0x2000038c

08001178 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC1_2_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_Init+0x28>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <HAL_Init+0x28>)
 8001186:	f043 0310 	orr.w	r3, r3, #16
 800118a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 f947 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f808 	bl	80011a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001198:	f7ff fe5e 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40022000 	.word	0x40022000

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x54>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_InitTick+0x58>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f95f 	bl	800148a <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00e      	b.n	80011f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d80a      	bhi.n	80011f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f000 f927 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <HAL_InitTick+0x5c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000008 	.word	0x20000008
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <HAL_IncTick+0x1c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <HAL_IncTick+0x20>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a03      	ldr	r2, [pc, #12]	@ (8001228 <HAL_IncTick+0x20>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	20000008 	.word	0x20000008
 8001228:	2000023c 	.word	0x2000023c

0800122c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b02      	ldr	r3, [pc, #8]	@ (800123c <HAL_GetTick+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	2000023c 	.word	0x2000023c

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff fff0 	bl	800122c <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffe0 	bl	800122c <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4906      	ldr	r1, [pc, #24]	@ (8001320 <__NVIC_EnableIRQ+0x34>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	@ (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	@ (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff90 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	@ (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff2d 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff42 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff90 	bl	8001378 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5f 	bl	8001324 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff35 	bl	80012ec <__NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffa2 	bl	80013dc <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b08b      	sub	sp, #44	@ 0x2c
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	e169      	b.n	800178c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b8:	2201      	movs	r2, #1
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8158 	bne.w	8001786 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a9a      	ldr	r2, [pc, #616]	@ (8001744 <HAL_GPIO_Init+0x2a0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d05e      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014e0:	4a98      	ldr	r2, [pc, #608]	@ (8001744 <HAL_GPIO_Init+0x2a0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d875      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014e6:	4a98      	ldr	r2, [pc, #608]	@ (8001748 <HAL_GPIO_Init+0x2a4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d058      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014ec:	4a96      	ldr	r2, [pc, #600]	@ (8001748 <HAL_GPIO_Init+0x2a4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d86f      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014f2:	4a96      	ldr	r2, [pc, #600]	@ (800174c <HAL_GPIO_Init+0x2a8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d052      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014f8:	4a94      	ldr	r2, [pc, #592]	@ (800174c <HAL_GPIO_Init+0x2a8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d869      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014fe:	4a94      	ldr	r2, [pc, #592]	@ (8001750 <HAL_GPIO_Init+0x2ac>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d04c      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001504:	4a92      	ldr	r2, [pc, #584]	@ (8001750 <HAL_GPIO_Init+0x2ac>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d863      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800150a:	4a92      	ldr	r2, [pc, #584]	@ (8001754 <HAL_GPIO_Init+0x2b0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d046      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001510:	4a90      	ldr	r2, [pc, #576]	@ (8001754 <HAL_GPIO_Init+0x2b0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d85d      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 8001516:	2b12      	cmp	r3, #18
 8001518:	d82a      	bhi.n	8001570 <HAL_GPIO_Init+0xcc>
 800151a:	2b12      	cmp	r3, #18
 800151c:	d859      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800151e:	a201      	add	r2, pc, #4	@ (adr r2, 8001524 <HAL_GPIO_Init+0x80>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	0800159f 	.word	0x0800159f
 8001528:	08001579 	.word	0x08001579
 800152c:	0800158b 	.word	0x0800158b
 8001530:	080015cd 	.word	0x080015cd
 8001534:	080015d3 	.word	0x080015d3
 8001538:	080015d3 	.word	0x080015d3
 800153c:	080015d3 	.word	0x080015d3
 8001540:	080015d3 	.word	0x080015d3
 8001544:	080015d3 	.word	0x080015d3
 8001548:	080015d3 	.word	0x080015d3
 800154c:	080015d3 	.word	0x080015d3
 8001550:	080015d3 	.word	0x080015d3
 8001554:	080015d3 	.word	0x080015d3
 8001558:	080015d3 	.word	0x080015d3
 800155c:	080015d3 	.word	0x080015d3
 8001560:	080015d3 	.word	0x080015d3
 8001564:	080015d3 	.word	0x080015d3
 8001568:	08001581 	.word	0x08001581
 800156c:	08001595 	.word	0x08001595
 8001570:	4a79      	ldr	r2, [pc, #484]	@ (8001758 <HAL_GPIO_Init+0x2b4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001576:	e02c      	b.n	80015d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	623b      	str	r3, [r7, #32]
          break;
 800157e:	e029      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	3304      	adds	r3, #4
 8001586:	623b      	str	r3, [r7, #32]
          break;
 8001588:	e024      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	3308      	adds	r3, #8
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e01f      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	330c      	adds	r3, #12
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e01a      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015a6:	2304      	movs	r3, #4
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e013      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d105      	bne.n	80015c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	611a      	str	r2, [r3, #16]
          break;
 80015be:	e009      	b.n	80015d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c0:	2308      	movs	r3, #8
 80015c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	615a      	str	r2, [r3, #20]
          break;
 80015ca:	e003      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          break;
 80015d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2bff      	cmp	r3, #255	@ 0xff
 80015d8:	d801      	bhi.n	80015de <HAL_GPIO_Init+0x13a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	e001      	b.n	80015e2 <HAL_GPIO_Init+0x13e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3304      	adds	r3, #4
 80015e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2bff      	cmp	r3, #255	@ 0xff
 80015e8:	d802      	bhi.n	80015f0 <HAL_GPIO_Init+0x14c>
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	e002      	b.n	80015f6 <HAL_GPIO_Init+0x152>
 80015f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f2:	3b08      	subs	r3, #8
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	210f      	movs	r1, #15
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	401a      	ands	r2, r3
 8001608:	6a39      	ldr	r1, [r7, #32]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80b1 	beq.w	8001786 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001624:	4b4d      	ldr	r3, [pc, #308]	@ (800175c <HAL_GPIO_Init+0x2b8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a4c      	ldr	r2, [pc, #304]	@ (800175c <HAL_GPIO_Init+0x2b8>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b4a      	ldr	r3, [pc, #296]	@ (800175c <HAL_GPIO_Init+0x2b8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800163c:	4a48      	ldr	r2, [pc, #288]	@ (8001760 <HAL_GPIO_Init+0x2bc>)
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a40      	ldr	r2, [pc, #256]	@ (8001764 <HAL_GPIO_Init+0x2c0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d013      	beq.n	8001690 <HAL_GPIO_Init+0x1ec>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a3f      	ldr	r2, [pc, #252]	@ (8001768 <HAL_GPIO_Init+0x2c4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d00d      	beq.n	800168c <HAL_GPIO_Init+0x1e8>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a3e      	ldr	r2, [pc, #248]	@ (800176c <HAL_GPIO_Init+0x2c8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d007      	beq.n	8001688 <HAL_GPIO_Init+0x1e4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a3d      	ldr	r2, [pc, #244]	@ (8001770 <HAL_GPIO_Init+0x2cc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_GPIO_Init+0x1e0>
 8001680:	2303      	movs	r3, #3
 8001682:	e006      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001684:	2304      	movs	r3, #4
 8001686:	e004      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001688:	2302      	movs	r3, #2
 800168a:	e002      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001690:	2300      	movs	r3, #0
 8001692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001694:	f002 0203 	and.w	r2, r2, #3
 8001698:	0092      	lsls	r2, r2, #2
 800169a:	4093      	lsls	r3, r2
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016a2:	492f      	ldr	r1, [pc, #188]	@ (8001760 <HAL_GPIO_Init+0x2bc>)
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	492c      	ldr	r1, [pc, #176]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4928      	ldr	r1, [pc, #160]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e4:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	4922      	ldr	r1, [pc, #136]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	60cb      	str	r3, [r1, #12]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016f2:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	491e      	ldr	r1, [pc, #120]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4918      	ldr	r1, [pc, #96]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	43db      	mvns	r3, r3
 8001722:	4914      	ldr	r1, [pc, #80]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 8001724:	4013      	ands	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d021      	beq.n	8001778 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001734:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	490e      	ldr	r1, [pc, #56]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	e021      	b.n	8001786 <HAL_GPIO_Init+0x2e2>
 8001742:	bf00      	nop
 8001744:	10320000 	.word	0x10320000
 8001748:	10310000 	.word	0x10310000
 800174c:	10220000 	.word	0x10220000
 8001750:	10210000 	.word	0x10210000
 8001754:	10120000 	.word	0x10120000
 8001758:	10110000 	.word	0x10110000
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000
 8001764:	40010800 	.word	0x40010800
 8001768:	40010c00 	.word	0x40010c00
 800176c:	40011000 	.word	0x40011000
 8001770:	40011400 	.word	0x40011400
 8001774:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_GPIO_Init+0x304>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	43db      	mvns	r3, r3
 8001780:	4909      	ldr	r1, [pc, #36]	@ (80017a8 <HAL_GPIO_Init+0x304>)
 8001782:	4013      	ands	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001788:	3301      	adds	r3, #1
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001792:	fa22 f303 	lsr.w	r3, r2, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	f47f ae8e 	bne.w	80014b8 <HAL_GPIO_Init+0x14>
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	372c      	adds	r7, #44	@ 0x2c
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40010400 	.word	0x40010400

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017c8:	e003      	b.n	80017d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	611a      	str	r2, [r3, #16]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017e6:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f806 	bl	800180c <HAL_GPIO_EXTI_Callback>
  }
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e272      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8087 	beq.w	800194e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001840:	4b92      	ldr	r3, [pc, #584]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b04      	cmp	r3, #4
 800184a:	d00c      	beq.n	8001866 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800184c:	4b8f      	ldr	r3, [pc, #572]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d112      	bne.n	800187e <HAL_RCC_OscConfig+0x5e>
 8001858:	4b8c      	ldr	r3, [pc, #560]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001864:	d10b      	bne.n	800187e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001866:	4b89      	ldr	r3, [pc, #548]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d06c      	beq.n	800194c <HAL_RCC_OscConfig+0x12c>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d168      	bne.n	800194c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e24c      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x76>
 8001888:	4b80      	ldr	r3, [pc, #512]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a7f      	ldr	r2, [pc, #508]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800188e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e02e      	b.n	80018f4 <HAL_RCC_OscConfig+0xd4>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x98>
 800189e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a7a      	ldr	r2, [pc, #488]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b78      	ldr	r3, [pc, #480]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a77      	ldr	r2, [pc, #476]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0xd4>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0xbc>
 80018c2:	4b72      	ldr	r3, [pc, #456]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a71      	ldr	r2, [pc, #452]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b6f      	ldr	r3, [pc, #444]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xd4>
 80018dc:	4b6b      	ldr	r3, [pc, #428]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a6a      	ldr	r2, [pc, #424]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b68      	ldr	r3, [pc, #416]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a67      	ldr	r2, [pc, #412]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc96 	bl	800122c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fc92 	bl	800122c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	@ 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e200      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b5d      	ldr	r3, [pc, #372]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xe4>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fc82 	bl	800122c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fc7e 	bl	800122c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	@ 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1ec      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x10c>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d063      	beq.n	8001a22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800195a:	4b4c      	ldr	r3, [pc, #304]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001966:	4b49      	ldr	r3, [pc, #292]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b08      	cmp	r3, #8
 8001970:	d11c      	bne.n	80019ac <HAL_RCC_OscConfig+0x18c>
 8001972:	4b46      	ldr	r3, [pc, #280]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d116      	bne.n	80019ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	4b43      	ldr	r3, [pc, #268]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_RCC_OscConfig+0x176>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e1c0      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001996:	4b3d      	ldr	r3, [pc, #244]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4939      	ldr	r1, [pc, #228]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	e03a      	b.n	8001a22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d020      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b4:	4b36      	ldr	r3, [pc, #216]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff fc37 	bl	800122c <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c2:	f7ff fc33 	bl	800122c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e1a1      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4927      	ldr	r1, [pc, #156]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
 80019f4:	e015      	b.n	8001a22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f6:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fc16 	bl	800122c <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff fc12 	bl	800122c <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e180      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d03a      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d019      	beq.n	8001a6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <HAL_RCC_OscConfig+0x274>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fbf6 	bl	800122c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a44:	f7ff fbf2 	bl	800122c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e160      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f000 face 	bl	8002004 <RCC_Delay>
 8001a68:	e01c      	b.n	8001aa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff fbdc 	bl	800122c <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a76:	e00f      	b.n	8001a98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff fbd8 	bl	800122c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d908      	bls.n	8001a98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e146      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	42420000 	.word	0x42420000
 8001a94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a98:	4b92      	ldr	r3, [pc, #584]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e9      	bne.n	8001a78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80a6 	beq.w	8001bfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10d      	bne.n	8001ade <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	4b88      	ldr	r3, [pc, #544]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a87      	ldr	r2, [pc, #540]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b85      	ldr	r3, [pc, #532]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b82      	ldr	r3, [pc, #520]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d118      	bne.n	8001b1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aea:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7e      	ldr	r2, [pc, #504]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c8>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fb99 	bl	800122c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afe:	f7ff fb95 	bl	800122c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b64      	cmp	r3, #100	@ 0x64
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e103      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b10:	4b75      	ldr	r3, [pc, #468]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x312>
 8001b24:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6213      	str	r3, [r2, #32]
 8001b30:	e02d      	b.n	8001b8e <HAL_RCC_OscConfig+0x36e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x334>
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4a69      	ldr	r2, [pc, #420]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	6213      	str	r3, [r2, #32]
 8001b46:	4b67      	ldr	r3, [pc, #412]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a66      	ldr	r2, [pc, #408]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 0304 	bic.w	r3, r3, #4
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	e01c      	b.n	8001b8e <HAL_RCC_OscConfig+0x36e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d10c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x356>
 8001b5c:	4b61      	ldr	r3, [pc, #388]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a60      	ldr	r2, [pc, #384]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	4b5e      	ldr	r3, [pc, #376]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	e00b      	b.n	8001b8e <HAL_RCC_OscConfig+0x36e>
 8001b76:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	4b58      	ldr	r3, [pc, #352]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a57      	ldr	r2, [pc, #348]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	f023 0304 	bic.w	r3, r3, #4
 8001b8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d015      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fb49 	bl	800122c <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff fb45 	bl	800122c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0b1      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ee      	beq.n	8001b9e <HAL_RCC_OscConfig+0x37e>
 8001bc0:	e014      	b.n	8001bec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fb33 	bl	800122c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff fb2f 	bl	800122c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e09b      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be0:	4b40      	ldr	r3, [pc, #256]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ee      	bne.n	8001bca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d105      	bne.n	8001bfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8087 	beq.w	8001d16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c08:	4b36      	ldr	r3, [pc, #216]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d061      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d146      	bne.n	8001caa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1c:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fb03 	bl	800122c <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff faff 	bl	800122c <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e06d      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c50:	d108      	bne.n	8001c64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c52:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4921      	ldr	r1, [pc, #132]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a19      	ldr	r1, [r3, #32]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	430b      	orrs	r3, r1
 8001c76:	491b      	ldr	r1, [pc, #108]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff fad3 	bl	800122c <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7ff facf 	bl	800122c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e03d      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x46a>
 8001ca8:	e035      	b.n	8001d16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fabc 	bl	800122c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff fab8 	bl	800122c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e026      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x498>
 8001cd6:	e01e      	b.n	8001d16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e019      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_OscConfig+0x500>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0d0      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d910      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b67      	ldr	r3, [pc, #412]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 0207 	bic.w	r2, r3, #7
 8001d4e:	4965      	ldr	r1, [pc, #404]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b63      	ldr	r3, [pc, #396]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0b8      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d80:	4b59      	ldr	r3, [pc, #356]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4a58      	ldr	r2, [pc, #352]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d98:	4b53      	ldr	r3, [pc, #332]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a52      	ldr	r2, [pc, #328]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001da2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b50      	ldr	r3, [pc, #320]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	494d      	ldr	r1, [pc, #308]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d040      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b47      	ldr	r3, [pc, #284]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d115      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e07f      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de2:	4b41      	ldr	r3, [pc, #260]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e073      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06b      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e02:	4b39      	ldr	r3, [pc, #228]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f023 0203 	bic.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4936      	ldr	r1, [pc, #216]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e14:	f7ff fa0a 	bl	800122c <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7ff fa06 	bl	800122c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e053      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 020c 	and.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1eb      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e44:	4b27      	ldr	r3, [pc, #156]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d210      	bcs.n	8001e74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	4922      	ldr	r1, [pc, #136]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e032      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e80:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4916      	ldr	r1, [pc, #88]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	490e      	ldr	r1, [pc, #56]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eb2:	f000 f821 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	490a      	ldr	r1, [pc, #40]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	5ccb      	ldrb	r3, [r1, r3]
 8001ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eca:	4a09      	ldr	r2, [pc, #36]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8001ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ece:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f968 	bl	80011a8 <HAL_InitTick>

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08006de8 	.word	0x08006de8
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f12:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d002      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x30>
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0x36>
 8001f26:	e027      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f28:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2a:	613b      	str	r3, [r7, #16]
      break;
 8001f2c:	e027      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	0c9b      	lsrs	r3, r3, #18
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	4a17      	ldr	r2, [pc, #92]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d010      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	0c5b      	lsrs	r3, r3, #17
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	4a11      	ldr	r2, [pc, #68]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f52:	5cd3      	ldrb	r3, [r2, r3]
 8001f54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5a:	fb03 f202 	mul.w	r2, r3, r2
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e004      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f6c:	fb02 f303 	mul.w	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	613b      	str	r3, [r7, #16]
      break;
 8001f76:	e002      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7a:	613b      	str	r3, [r7, #16]
      break;
 8001f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f7e:	693b      	ldr	r3, [r7, #16]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	007a1200 	.word	0x007a1200
 8001f94:	08006e00 	.word	0x08006e00
 8001f98:	08006e10 	.word	0x08006e10
 8001f9c:	003d0900 	.word	0x003d0900

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b02      	ldr	r3, [pc, #8]	@ (8001fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fb8:	f7ff fff2 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4903      	ldr	r1, [pc, #12]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08006df8 	.word	0x08006df8

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe0:	f7ff ffde 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	0adb      	lsrs	r3, r3, #11
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4903      	ldr	r1, [pc, #12]	@ (8002000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08006df8 	.word	0x08006df8

08002004 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800200c:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <RCC_Delay+0x34>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <RCC_Delay+0x38>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0a5b      	lsrs	r3, r3, #9
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002020:	bf00      	nop
  }
  while (Delay --);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1e5a      	subs	r2, r3, #1
 8002026:	60fa      	str	r2, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f9      	bne.n	8002020 <RCC_Delay+0x1c>
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	20000000 	.word	0x20000000
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e042      	b.n	80020d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe ff28 	bl	8000ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	@ 0x24
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fa09 	bl	800249c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d175      	bne.n	80021ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_UART_Transmit+0x2c>
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e06e      	b.n	80021ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2221      	movs	r2, #33	@ 0x21
 800211a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800211e:	f7ff f885 	bl	800122c <HAL_GetTick>
 8002122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	88fa      	ldrh	r2, [r7, #6]
 8002128:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	88fa      	ldrh	r2, [r7, #6]
 800212e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002138:	d108      	bne.n	800214c <HAL_UART_Transmit+0x6c>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d104      	bne.n	800214c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	e003      	b.n	8002154 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002154:	e02e      	b.n	80021b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2200      	movs	r2, #0
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f8df 	bl	8002324 <UART_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e03a      	b.n	80021ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10b      	bne.n	8002196 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800218c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	3302      	adds	r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	e007      	b.n	80021a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	781a      	ldrb	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	3301      	adds	r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1cb      	bne.n	8002156 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2200      	movs	r2, #0
 80021c6:	2140      	movs	r1, #64	@ 0x40
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f8ab 	bl	8002324 <UART_WaitOnFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e006      	b.n	80021ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
  }
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b08a      	sub	sp, #40	@ 0x28
 80021fa:	af02      	add	r7, sp, #8
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	f040 8081 	bne.w	800231a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_UART_Receive+0x2e>
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e079      	b.n	800231c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2222      	movs	r2, #34	@ 0x22
 8002232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800223c:	f7fe fff6 	bl	800122c <HAL_GetTick>
 8002240:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002256:	d108      	bne.n	800226a <HAL_UART_Receive+0x74>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d104      	bne.n	800226a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	e003      	b.n	8002272 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002272:	e047      	b.n	8002304 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2200      	movs	r2, #0
 800227c:	2120      	movs	r1, #32
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f850 	bl	8002324 <UART_WaitOnFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e042      	b.n	800231c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10c      	bne.n	80022b6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	3302      	adds	r3, #2
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	e01f      	b.n	80022f6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022be:	d007      	beq.n	80022d0 <HAL_UART_Receive+0xda>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <HAL_UART_Receive+0xe8>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d106      	bne.n	80022de <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e008      	b.n	80022f0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	3301      	adds	r3, #1
 80022f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1b2      	bne.n	8002274 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800231a:	2302      	movs	r3, #2
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002334:	e03b      	b.n	80023ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d037      	beq.n	80023ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233e:	f7fe ff75 	bl	800122c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	6a3a      	ldr	r2, [r7, #32]
 800234a:	429a      	cmp	r2, r3
 800234c:	d302      	bcc.n	8002354 <UART_WaitOnFlagUntilTimeout+0x30>
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e03a      	b.n	80023ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d023      	beq.n	80023ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b80      	cmp	r3, #128	@ 0x80
 800236a:	d020      	beq.n	80023ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b40      	cmp	r3, #64	@ 0x40
 8002370:	d01d      	beq.n	80023ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b08      	cmp	r3, #8
 800237e:	d116      	bne.n	80023ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f81d 	bl	80023d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2208      	movs	r2, #8
 80023a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4013      	ands	r3, r2
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	bf0c      	ite	eq
 80023be:	2301      	moveq	r3, #1
 80023c0:	2300      	movne	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d0b4      	beq.n	8002336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b095      	sub	sp, #84	@ 0x54
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	330c      	adds	r3, #12
 80023e4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e8:	e853 3f00 	ldrex	r3, [r3]
 80023ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	330c      	adds	r3, #12
 80023fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8002400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002402:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002404:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002406:	e841 2300 	strex	r3, r2, [r1]
 800240a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800240c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1e5      	bne.n	80023de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3314      	adds	r3, #20
 8002418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	e853 3f00 	ldrex	r3, [r3]
 8002420:	61fb      	str	r3, [r7, #28]
   return(result);
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	64bb      	str	r3, [r7, #72]	@ 0x48
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3314      	adds	r3, #20
 8002430:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002432:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002434:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800243a:	e841 2300 	strex	r3, r2, [r1]
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e5      	bne.n	8002412 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	2b01      	cmp	r3, #1
 800244c:	d119      	bne.n	8002482 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	330c      	adds	r3, #12
 8002454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	e853 3f00 	ldrex	r3, [r3]
 800245c:	60bb      	str	r3, [r7, #8]
   return(result);
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f023 0310 	bic.w	r3, r3, #16
 8002464:	647b      	str	r3, [r7, #68]	@ 0x44
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	330c      	adds	r3, #12
 800246c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800246e:	61ba      	str	r2, [r7, #24]
 8002470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002472:	6979      	ldr	r1, [r7, #20]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	e841 2300 	strex	r3, r2, [r1]
 800247a:	613b      	str	r3, [r7, #16]
   return(result);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e5      	bne.n	800244e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002490:	bf00      	nop
 8002492:	3754      	adds	r7, #84	@ 0x54
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
	...

0800249c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80024d6:	f023 030c 	bic.w	r3, r3, #12
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2c      	ldr	r2, [pc, #176]	@ (80025b0 <UART_SetConfig+0x114>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d103      	bne.n	800250c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002504:	f7ff fd6a 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	e002      	b.n	8002512 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800250c:	f7ff fd52 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8002510:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	009a      	lsls	r2, r3, #2
 800251c:	441a      	add	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	4a22      	ldr	r2, [pc, #136]	@ (80025b4 <UART_SetConfig+0x118>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	0119      	lsls	r1, r3, #4
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	009a      	lsls	r2, r3, #2
 800253c:	441a      	add	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fbb2 f2f3 	udiv	r2, r2, r3
 8002548:	4b1a      	ldr	r3, [pc, #104]	@ (80025b4 <UART_SetConfig+0x118>)
 800254a:	fba3 0302 	umull	r0, r3, r3, r2
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2064      	movs	r0, #100	@ 0x64
 8002552:	fb00 f303 	mul.w	r3, r0, r3
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	3332      	adds	r3, #50	@ 0x32
 800255c:	4a15      	ldr	r2, [pc, #84]	@ (80025b4 <UART_SetConfig+0x118>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002568:	4419      	add	r1, r3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	009a      	lsls	r2, r3, #2
 8002574:	441a      	add	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002580:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <UART_SetConfig+0x118>)
 8002582:	fba3 0302 	umull	r0, r3, r3, r2
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2064      	movs	r0, #100	@ 0x64
 800258a:	fb00 f303 	mul.w	r3, r0, r3
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	3332      	adds	r3, #50	@ 0x32
 8002594:	4a07      	ldr	r2, [pc, #28]	@ (80025b4 <UART_SetConfig+0x118>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	f003 020f 	and.w	r2, r3, #15
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	440a      	add	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40013800 	.word	0x40013800
 80025b4:	51eb851f 	.word	0x51eb851f

080025b8 <__cvt>:
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025be:	461d      	mov	r5, r3
 80025c0:	bfbb      	ittet	lt
 80025c2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80025c6:	461d      	movlt	r5, r3
 80025c8:	2300      	movge	r3, #0
 80025ca:	232d      	movlt	r3, #45	@ 0x2d
 80025cc:	b088      	sub	sp, #32
 80025ce:	4614      	mov	r4, r2
 80025d0:	bfb8      	it	lt
 80025d2:	4614      	movlt	r4, r2
 80025d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80025d6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80025d8:	7013      	strb	r3, [r2, #0]
 80025da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80025dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80025e0:	f023 0820 	bic.w	r8, r3, #32
 80025e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80025e8:	d005      	beq.n	80025f6 <__cvt+0x3e>
 80025ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80025ee:	d100      	bne.n	80025f2 <__cvt+0x3a>
 80025f0:	3601      	adds	r6, #1
 80025f2:	2302      	movs	r3, #2
 80025f4:	e000      	b.n	80025f8 <__cvt+0x40>
 80025f6:	2303      	movs	r3, #3
 80025f8:	aa07      	add	r2, sp, #28
 80025fa:	9204      	str	r2, [sp, #16]
 80025fc:	aa06      	add	r2, sp, #24
 80025fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002602:	e9cd 3600 	strd	r3, r6, [sp]
 8002606:	4622      	mov	r2, r4
 8002608:	462b      	mov	r3, r5
 800260a:	f001 fa31 	bl	8003a70 <_dtoa_r>
 800260e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002612:	4607      	mov	r7, r0
 8002614:	d119      	bne.n	800264a <__cvt+0x92>
 8002616:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002618:	07db      	lsls	r3, r3, #31
 800261a:	d50e      	bpl.n	800263a <__cvt+0x82>
 800261c:	eb00 0906 	add.w	r9, r0, r6
 8002620:	2200      	movs	r2, #0
 8002622:	2300      	movs	r3, #0
 8002624:	4620      	mov	r0, r4
 8002626:	4629      	mov	r1, r5
 8002628:	f7fe f9be 	bl	80009a8 <__aeabi_dcmpeq>
 800262c:	b108      	cbz	r0, 8002632 <__cvt+0x7a>
 800262e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002632:	2230      	movs	r2, #48	@ 0x30
 8002634:	9b07      	ldr	r3, [sp, #28]
 8002636:	454b      	cmp	r3, r9
 8002638:	d31e      	bcc.n	8002678 <__cvt+0xc0>
 800263a:	4638      	mov	r0, r7
 800263c:	9b07      	ldr	r3, [sp, #28]
 800263e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002640:	1bdb      	subs	r3, r3, r7
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	b008      	add	sp, #32
 8002646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800264a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800264e:	eb00 0906 	add.w	r9, r0, r6
 8002652:	d1e5      	bne.n	8002620 <__cvt+0x68>
 8002654:	7803      	ldrb	r3, [r0, #0]
 8002656:	2b30      	cmp	r3, #48	@ 0x30
 8002658:	d10a      	bne.n	8002670 <__cvt+0xb8>
 800265a:	2200      	movs	r2, #0
 800265c:	2300      	movs	r3, #0
 800265e:	4620      	mov	r0, r4
 8002660:	4629      	mov	r1, r5
 8002662:	f7fe f9a1 	bl	80009a8 <__aeabi_dcmpeq>
 8002666:	b918      	cbnz	r0, 8002670 <__cvt+0xb8>
 8002668:	f1c6 0601 	rsb	r6, r6, #1
 800266c:	f8ca 6000 	str.w	r6, [sl]
 8002670:	f8da 3000 	ldr.w	r3, [sl]
 8002674:	4499      	add	r9, r3
 8002676:	e7d3      	b.n	8002620 <__cvt+0x68>
 8002678:	1c59      	adds	r1, r3, #1
 800267a:	9107      	str	r1, [sp, #28]
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	e7d9      	b.n	8002634 <__cvt+0x7c>

08002680 <__exponent>:
 8002680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002682:	2900      	cmp	r1, #0
 8002684:	bfb6      	itet	lt
 8002686:	232d      	movlt	r3, #45	@ 0x2d
 8002688:	232b      	movge	r3, #43	@ 0x2b
 800268a:	4249      	neglt	r1, r1
 800268c:	2909      	cmp	r1, #9
 800268e:	7002      	strb	r2, [r0, #0]
 8002690:	7043      	strb	r3, [r0, #1]
 8002692:	dd29      	ble.n	80026e8 <__exponent+0x68>
 8002694:	f10d 0307 	add.w	r3, sp, #7
 8002698:	461d      	mov	r5, r3
 800269a:	270a      	movs	r7, #10
 800269c:	fbb1 f6f7 	udiv	r6, r1, r7
 80026a0:	461a      	mov	r2, r3
 80026a2:	fb07 1416 	mls	r4, r7, r6, r1
 80026a6:	3430      	adds	r4, #48	@ 0x30
 80026a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80026ac:	460c      	mov	r4, r1
 80026ae:	2c63      	cmp	r4, #99	@ 0x63
 80026b0:	4631      	mov	r1, r6
 80026b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80026b6:	dcf1      	bgt.n	800269c <__exponent+0x1c>
 80026b8:	3130      	adds	r1, #48	@ 0x30
 80026ba:	1e94      	subs	r4, r2, #2
 80026bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80026c0:	4623      	mov	r3, r4
 80026c2:	1c41      	adds	r1, r0, #1
 80026c4:	42ab      	cmp	r3, r5
 80026c6:	d30a      	bcc.n	80026de <__exponent+0x5e>
 80026c8:	f10d 0309 	add.w	r3, sp, #9
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	42ac      	cmp	r4, r5
 80026d0:	bf88      	it	hi
 80026d2:	2300      	movhi	r3, #0
 80026d4:	3302      	adds	r3, #2
 80026d6:	4403      	add	r3, r0
 80026d8:	1a18      	subs	r0, r3, r0
 80026da:	b003      	add	sp, #12
 80026dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026de:	f813 6b01 	ldrb.w	r6, [r3], #1
 80026e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80026e6:	e7ed      	b.n	80026c4 <__exponent+0x44>
 80026e8:	2330      	movs	r3, #48	@ 0x30
 80026ea:	3130      	adds	r1, #48	@ 0x30
 80026ec:	7083      	strb	r3, [r0, #2]
 80026ee:	70c1      	strb	r1, [r0, #3]
 80026f0:	1d03      	adds	r3, r0, #4
 80026f2:	e7f1      	b.n	80026d8 <__exponent+0x58>

080026f4 <_printf_float>:
 80026f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026f8:	b091      	sub	sp, #68	@ 0x44
 80026fa:	460c      	mov	r4, r1
 80026fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002700:	4616      	mov	r6, r2
 8002702:	461f      	mov	r7, r3
 8002704:	4605      	mov	r5, r0
 8002706:	f001 f8a1 	bl	800384c <_localeconv_r>
 800270a:	6803      	ldr	r3, [r0, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	9308      	str	r3, [sp, #32]
 8002710:	f7fd fd1e 	bl	8000150 <strlen>
 8002714:	2300      	movs	r3, #0
 8002716:	930e      	str	r3, [sp, #56]	@ 0x38
 8002718:	f8d8 3000 	ldr.w	r3, [r8]
 800271c:	9009      	str	r0, [sp, #36]	@ 0x24
 800271e:	3307      	adds	r3, #7
 8002720:	f023 0307 	bic.w	r3, r3, #7
 8002724:	f103 0208 	add.w	r2, r3, #8
 8002728:	f894 a018 	ldrb.w	sl, [r4, #24]
 800272c:	f8d4 b000 	ldr.w	fp, [r4]
 8002730:	f8c8 2000 	str.w	r2, [r8]
 8002734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002738:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800273c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800273e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002742:	f04f 32ff 	mov.w	r2, #4294967295
 8002746:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800274a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800274e:	4b9c      	ldr	r3, [pc, #624]	@ (80029c0 <_printf_float+0x2cc>)
 8002750:	f7fe f95c 	bl	8000a0c <__aeabi_dcmpun>
 8002754:	bb70      	cbnz	r0, 80027b4 <_printf_float+0xc0>
 8002756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800275a:	f04f 32ff 	mov.w	r2, #4294967295
 800275e:	4b98      	ldr	r3, [pc, #608]	@ (80029c0 <_printf_float+0x2cc>)
 8002760:	f7fe f936 	bl	80009d0 <__aeabi_dcmple>
 8002764:	bb30      	cbnz	r0, 80027b4 <_printf_float+0xc0>
 8002766:	2200      	movs	r2, #0
 8002768:	2300      	movs	r3, #0
 800276a:	4640      	mov	r0, r8
 800276c:	4649      	mov	r1, r9
 800276e:	f7fe f925 	bl	80009bc <__aeabi_dcmplt>
 8002772:	b110      	cbz	r0, 800277a <_printf_float+0x86>
 8002774:	232d      	movs	r3, #45	@ 0x2d
 8002776:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800277a:	4a92      	ldr	r2, [pc, #584]	@ (80029c4 <_printf_float+0x2d0>)
 800277c:	4b92      	ldr	r3, [pc, #584]	@ (80029c8 <_printf_float+0x2d4>)
 800277e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002782:	bf8c      	ite	hi
 8002784:	4690      	movhi	r8, r2
 8002786:	4698      	movls	r8, r3
 8002788:	2303      	movs	r3, #3
 800278a:	f04f 0900 	mov.w	r9, #0
 800278e:	6123      	str	r3, [r4, #16]
 8002790:	f02b 0304 	bic.w	r3, fp, #4
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	4633      	mov	r3, r6
 8002798:	4621      	mov	r1, r4
 800279a:	4628      	mov	r0, r5
 800279c:	9700      	str	r7, [sp, #0]
 800279e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80027a0:	f000 f9d4 	bl	8002b4c <_printf_common>
 80027a4:	3001      	adds	r0, #1
 80027a6:	f040 8090 	bne.w	80028ca <_printf_float+0x1d6>
 80027aa:	f04f 30ff 	mov.w	r0, #4294967295
 80027ae:	b011      	add	sp, #68	@ 0x44
 80027b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b4:	4642      	mov	r2, r8
 80027b6:	464b      	mov	r3, r9
 80027b8:	4640      	mov	r0, r8
 80027ba:	4649      	mov	r1, r9
 80027bc:	f7fe f926 	bl	8000a0c <__aeabi_dcmpun>
 80027c0:	b148      	cbz	r0, 80027d6 <_printf_float+0xe2>
 80027c2:	464b      	mov	r3, r9
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bfb8      	it	lt
 80027c8:	232d      	movlt	r3, #45	@ 0x2d
 80027ca:	4a80      	ldr	r2, [pc, #512]	@ (80029cc <_printf_float+0x2d8>)
 80027cc:	bfb8      	it	lt
 80027ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80027d2:	4b7f      	ldr	r3, [pc, #508]	@ (80029d0 <_printf_float+0x2dc>)
 80027d4:	e7d3      	b.n	800277e <_printf_float+0x8a>
 80027d6:	6863      	ldr	r3, [r4, #4]
 80027d8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	d13f      	bne.n	8002860 <_printf_float+0x16c>
 80027e0:	2306      	movs	r3, #6
 80027e2:	6063      	str	r3, [r4, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80027ea:	6023      	str	r3, [r4, #0]
 80027ec:	9206      	str	r2, [sp, #24]
 80027ee:	aa0e      	add	r2, sp, #56	@ 0x38
 80027f0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80027f4:	aa0d      	add	r2, sp, #52	@ 0x34
 80027f6:	9203      	str	r2, [sp, #12]
 80027f8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80027fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002800:	6863      	ldr	r3, [r4, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4628      	mov	r0, r5
 8002808:	464b      	mov	r3, r9
 800280a:	910a      	str	r1, [sp, #40]	@ 0x28
 800280c:	f7ff fed4 	bl	80025b8 <__cvt>
 8002810:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002812:	4680      	mov	r8, r0
 8002814:	2947      	cmp	r1, #71	@ 0x47
 8002816:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002818:	d128      	bne.n	800286c <_printf_float+0x178>
 800281a:	1cc8      	adds	r0, r1, #3
 800281c:	db02      	blt.n	8002824 <_printf_float+0x130>
 800281e:	6863      	ldr	r3, [r4, #4]
 8002820:	4299      	cmp	r1, r3
 8002822:	dd40      	ble.n	80028a6 <_printf_float+0x1b2>
 8002824:	f1aa 0a02 	sub.w	sl, sl, #2
 8002828:	fa5f fa8a 	uxtb.w	sl, sl
 800282c:	4652      	mov	r2, sl
 800282e:	3901      	subs	r1, #1
 8002830:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002834:	910d      	str	r1, [sp, #52]	@ 0x34
 8002836:	f7ff ff23 	bl	8002680 <__exponent>
 800283a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800283c:	4681      	mov	r9, r0
 800283e:	1813      	adds	r3, r2, r0
 8002840:	2a01      	cmp	r2, #1
 8002842:	6123      	str	r3, [r4, #16]
 8002844:	dc02      	bgt.n	800284c <_printf_float+0x158>
 8002846:	6822      	ldr	r2, [r4, #0]
 8002848:	07d2      	lsls	r2, r2, #31
 800284a:	d501      	bpl.n	8002850 <_printf_float+0x15c>
 800284c:	3301      	adds	r3, #1
 800284e:	6123      	str	r3, [r4, #16]
 8002850:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002854:	2b00      	cmp	r3, #0
 8002856:	d09e      	beq.n	8002796 <_printf_float+0xa2>
 8002858:	232d      	movs	r3, #45	@ 0x2d
 800285a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800285e:	e79a      	b.n	8002796 <_printf_float+0xa2>
 8002860:	2947      	cmp	r1, #71	@ 0x47
 8002862:	d1bf      	bne.n	80027e4 <_printf_float+0xf0>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1bd      	bne.n	80027e4 <_printf_float+0xf0>
 8002868:	2301      	movs	r3, #1
 800286a:	e7ba      	b.n	80027e2 <_printf_float+0xee>
 800286c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002870:	d9dc      	bls.n	800282c <_printf_float+0x138>
 8002872:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002876:	d118      	bne.n	80028aa <_printf_float+0x1b6>
 8002878:	2900      	cmp	r1, #0
 800287a:	6863      	ldr	r3, [r4, #4]
 800287c:	dd0b      	ble.n	8002896 <_printf_float+0x1a2>
 800287e:	6121      	str	r1, [r4, #16]
 8002880:	b913      	cbnz	r3, 8002888 <_printf_float+0x194>
 8002882:	6822      	ldr	r2, [r4, #0]
 8002884:	07d0      	lsls	r0, r2, #31
 8002886:	d502      	bpl.n	800288e <_printf_float+0x19a>
 8002888:	3301      	adds	r3, #1
 800288a:	440b      	add	r3, r1
 800288c:	6123      	str	r3, [r4, #16]
 800288e:	f04f 0900 	mov.w	r9, #0
 8002892:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002894:	e7dc      	b.n	8002850 <_printf_float+0x15c>
 8002896:	b913      	cbnz	r3, 800289e <_printf_float+0x1aa>
 8002898:	6822      	ldr	r2, [r4, #0]
 800289a:	07d2      	lsls	r2, r2, #31
 800289c:	d501      	bpl.n	80028a2 <_printf_float+0x1ae>
 800289e:	3302      	adds	r3, #2
 80028a0:	e7f4      	b.n	800288c <_printf_float+0x198>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e7f2      	b.n	800288c <_printf_float+0x198>
 80028a6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80028aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80028ac:	4299      	cmp	r1, r3
 80028ae:	db05      	blt.n	80028bc <_printf_float+0x1c8>
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	6121      	str	r1, [r4, #16]
 80028b4:	07d8      	lsls	r0, r3, #31
 80028b6:	d5ea      	bpl.n	800288e <_printf_float+0x19a>
 80028b8:	1c4b      	adds	r3, r1, #1
 80028ba:	e7e7      	b.n	800288c <_printf_float+0x198>
 80028bc:	2900      	cmp	r1, #0
 80028be:	bfcc      	ite	gt
 80028c0:	2201      	movgt	r2, #1
 80028c2:	f1c1 0202 	rsble	r2, r1, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	e7e0      	b.n	800288c <_printf_float+0x198>
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	055a      	lsls	r2, r3, #21
 80028ce:	d407      	bmi.n	80028e0 <_printf_float+0x1ec>
 80028d0:	6923      	ldr	r3, [r4, #16]
 80028d2:	4642      	mov	r2, r8
 80028d4:	4631      	mov	r1, r6
 80028d6:	4628      	mov	r0, r5
 80028d8:	47b8      	blx	r7
 80028da:	3001      	adds	r0, #1
 80028dc:	d12b      	bne.n	8002936 <_printf_float+0x242>
 80028de:	e764      	b.n	80027aa <_printf_float+0xb6>
 80028e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80028e4:	f240 80dc 	bls.w	8002aa0 <_printf_float+0x3ac>
 80028e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80028ec:	2200      	movs	r2, #0
 80028ee:	2300      	movs	r3, #0
 80028f0:	f7fe f85a 	bl	80009a8 <__aeabi_dcmpeq>
 80028f4:	2800      	cmp	r0, #0
 80028f6:	d033      	beq.n	8002960 <_printf_float+0x26c>
 80028f8:	2301      	movs	r3, #1
 80028fa:	4631      	mov	r1, r6
 80028fc:	4628      	mov	r0, r5
 80028fe:	4a35      	ldr	r2, [pc, #212]	@ (80029d4 <_printf_float+0x2e0>)
 8002900:	47b8      	blx	r7
 8002902:	3001      	adds	r0, #1
 8002904:	f43f af51 	beq.w	80027aa <_printf_float+0xb6>
 8002908:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800290c:	4543      	cmp	r3, r8
 800290e:	db02      	blt.n	8002916 <_printf_float+0x222>
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	07d8      	lsls	r0, r3, #31
 8002914:	d50f      	bpl.n	8002936 <_printf_float+0x242>
 8002916:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800291a:	4631      	mov	r1, r6
 800291c:	4628      	mov	r0, r5
 800291e:	47b8      	blx	r7
 8002920:	3001      	adds	r0, #1
 8002922:	f43f af42 	beq.w	80027aa <_printf_float+0xb6>
 8002926:	f04f 0900 	mov.w	r9, #0
 800292a:	f108 38ff 	add.w	r8, r8, #4294967295
 800292e:	f104 0a1a 	add.w	sl, r4, #26
 8002932:	45c8      	cmp	r8, r9
 8002934:	dc09      	bgt.n	800294a <_printf_float+0x256>
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	079b      	lsls	r3, r3, #30
 800293a:	f100 8102 	bmi.w	8002b42 <_printf_float+0x44e>
 800293e:	68e0      	ldr	r0, [r4, #12]
 8002940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002942:	4298      	cmp	r0, r3
 8002944:	bfb8      	it	lt
 8002946:	4618      	movlt	r0, r3
 8002948:	e731      	b.n	80027ae <_printf_float+0xba>
 800294a:	2301      	movs	r3, #1
 800294c:	4652      	mov	r2, sl
 800294e:	4631      	mov	r1, r6
 8002950:	4628      	mov	r0, r5
 8002952:	47b8      	blx	r7
 8002954:	3001      	adds	r0, #1
 8002956:	f43f af28 	beq.w	80027aa <_printf_float+0xb6>
 800295a:	f109 0901 	add.w	r9, r9, #1
 800295e:	e7e8      	b.n	8002932 <_printf_float+0x23e>
 8002960:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002962:	2b00      	cmp	r3, #0
 8002964:	dc38      	bgt.n	80029d8 <_printf_float+0x2e4>
 8002966:	2301      	movs	r3, #1
 8002968:	4631      	mov	r1, r6
 800296a:	4628      	mov	r0, r5
 800296c:	4a19      	ldr	r2, [pc, #100]	@ (80029d4 <_printf_float+0x2e0>)
 800296e:	47b8      	blx	r7
 8002970:	3001      	adds	r0, #1
 8002972:	f43f af1a 	beq.w	80027aa <_printf_float+0xb6>
 8002976:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800297a:	ea59 0303 	orrs.w	r3, r9, r3
 800297e:	d102      	bne.n	8002986 <_printf_float+0x292>
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	07d9      	lsls	r1, r3, #31
 8002984:	d5d7      	bpl.n	8002936 <_printf_float+0x242>
 8002986:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800298a:	4631      	mov	r1, r6
 800298c:	4628      	mov	r0, r5
 800298e:	47b8      	blx	r7
 8002990:	3001      	adds	r0, #1
 8002992:	f43f af0a 	beq.w	80027aa <_printf_float+0xb6>
 8002996:	f04f 0a00 	mov.w	sl, #0
 800299a:	f104 0b1a 	add.w	fp, r4, #26
 800299e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80029a0:	425b      	negs	r3, r3
 80029a2:	4553      	cmp	r3, sl
 80029a4:	dc01      	bgt.n	80029aa <_printf_float+0x2b6>
 80029a6:	464b      	mov	r3, r9
 80029a8:	e793      	b.n	80028d2 <_printf_float+0x1de>
 80029aa:	2301      	movs	r3, #1
 80029ac:	465a      	mov	r2, fp
 80029ae:	4631      	mov	r1, r6
 80029b0:	4628      	mov	r0, r5
 80029b2:	47b8      	blx	r7
 80029b4:	3001      	adds	r0, #1
 80029b6:	f43f aef8 	beq.w	80027aa <_printf_float+0xb6>
 80029ba:	f10a 0a01 	add.w	sl, sl, #1
 80029be:	e7ee      	b.n	800299e <_printf_float+0x2aa>
 80029c0:	7fefffff 	.word	0x7fefffff
 80029c4:	08006e16 	.word	0x08006e16
 80029c8:	08006e12 	.word	0x08006e12
 80029cc:	08006e1e 	.word	0x08006e1e
 80029d0:	08006e1a 	.word	0x08006e1a
 80029d4:	08006e22 	.word	0x08006e22
 80029d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80029da:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80029de:	4553      	cmp	r3, sl
 80029e0:	bfa8      	it	ge
 80029e2:	4653      	movge	r3, sl
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	4699      	mov	r9, r3
 80029e8:	dc36      	bgt.n	8002a58 <_printf_float+0x364>
 80029ea:	f04f 0b00 	mov.w	fp, #0
 80029ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80029f2:	f104 021a 	add.w	r2, r4, #26
 80029f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80029f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80029fa:	eba3 0309 	sub.w	r3, r3, r9
 80029fe:	455b      	cmp	r3, fp
 8002a00:	dc31      	bgt.n	8002a66 <_printf_float+0x372>
 8002a02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002a04:	459a      	cmp	sl, r3
 8002a06:	dc3a      	bgt.n	8002a7e <_printf_float+0x38a>
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	07da      	lsls	r2, r3, #31
 8002a0c:	d437      	bmi.n	8002a7e <_printf_float+0x38a>
 8002a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002a10:	ebaa 0903 	sub.w	r9, sl, r3
 8002a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002a16:	ebaa 0303 	sub.w	r3, sl, r3
 8002a1a:	4599      	cmp	r9, r3
 8002a1c:	bfa8      	it	ge
 8002a1e:	4699      	movge	r9, r3
 8002a20:	f1b9 0f00 	cmp.w	r9, #0
 8002a24:	dc33      	bgt.n	8002a8e <_printf_float+0x39a>
 8002a26:	f04f 0800 	mov.w	r8, #0
 8002a2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002a2e:	f104 0b1a 	add.w	fp, r4, #26
 8002a32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002a34:	ebaa 0303 	sub.w	r3, sl, r3
 8002a38:	eba3 0309 	sub.w	r3, r3, r9
 8002a3c:	4543      	cmp	r3, r8
 8002a3e:	f77f af7a 	ble.w	8002936 <_printf_float+0x242>
 8002a42:	2301      	movs	r3, #1
 8002a44:	465a      	mov	r2, fp
 8002a46:	4631      	mov	r1, r6
 8002a48:	4628      	mov	r0, r5
 8002a4a:	47b8      	blx	r7
 8002a4c:	3001      	adds	r0, #1
 8002a4e:	f43f aeac 	beq.w	80027aa <_printf_float+0xb6>
 8002a52:	f108 0801 	add.w	r8, r8, #1
 8002a56:	e7ec      	b.n	8002a32 <_printf_float+0x33e>
 8002a58:	4642      	mov	r2, r8
 8002a5a:	4631      	mov	r1, r6
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	47b8      	blx	r7
 8002a60:	3001      	adds	r0, #1
 8002a62:	d1c2      	bne.n	80029ea <_printf_float+0x2f6>
 8002a64:	e6a1      	b.n	80027aa <_printf_float+0xb6>
 8002a66:	2301      	movs	r3, #1
 8002a68:	4631      	mov	r1, r6
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	920a      	str	r2, [sp, #40]	@ 0x28
 8002a6e:	47b8      	blx	r7
 8002a70:	3001      	adds	r0, #1
 8002a72:	f43f ae9a 	beq.w	80027aa <_printf_float+0xb6>
 8002a76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002a78:	f10b 0b01 	add.w	fp, fp, #1
 8002a7c:	e7bb      	b.n	80029f6 <_printf_float+0x302>
 8002a7e:	4631      	mov	r1, r6
 8002a80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002a84:	4628      	mov	r0, r5
 8002a86:	47b8      	blx	r7
 8002a88:	3001      	adds	r0, #1
 8002a8a:	d1c0      	bne.n	8002a0e <_printf_float+0x31a>
 8002a8c:	e68d      	b.n	80027aa <_printf_float+0xb6>
 8002a8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002a90:	464b      	mov	r3, r9
 8002a92:	4631      	mov	r1, r6
 8002a94:	4628      	mov	r0, r5
 8002a96:	4442      	add	r2, r8
 8002a98:	47b8      	blx	r7
 8002a9a:	3001      	adds	r0, #1
 8002a9c:	d1c3      	bne.n	8002a26 <_printf_float+0x332>
 8002a9e:	e684      	b.n	80027aa <_printf_float+0xb6>
 8002aa0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002aa4:	f1ba 0f01 	cmp.w	sl, #1
 8002aa8:	dc01      	bgt.n	8002aae <_printf_float+0x3ba>
 8002aaa:	07db      	lsls	r3, r3, #31
 8002aac:	d536      	bpl.n	8002b1c <_printf_float+0x428>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	4642      	mov	r2, r8
 8002ab2:	4631      	mov	r1, r6
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	47b8      	blx	r7
 8002ab8:	3001      	adds	r0, #1
 8002aba:	f43f ae76 	beq.w	80027aa <_printf_float+0xb6>
 8002abe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ac2:	4631      	mov	r1, r6
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	47b8      	blx	r7
 8002ac8:	3001      	adds	r0, #1
 8002aca:	f43f ae6e 	beq.w	80027aa <_printf_float+0xb6>
 8002ace:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002ada:	f7fd ff65 	bl	80009a8 <__aeabi_dcmpeq>
 8002ade:	b9c0      	cbnz	r0, 8002b12 <_printf_float+0x41e>
 8002ae0:	4653      	mov	r3, sl
 8002ae2:	f108 0201 	add.w	r2, r8, #1
 8002ae6:	4631      	mov	r1, r6
 8002ae8:	4628      	mov	r0, r5
 8002aea:	47b8      	blx	r7
 8002aec:	3001      	adds	r0, #1
 8002aee:	d10c      	bne.n	8002b0a <_printf_float+0x416>
 8002af0:	e65b      	b.n	80027aa <_printf_float+0xb6>
 8002af2:	2301      	movs	r3, #1
 8002af4:	465a      	mov	r2, fp
 8002af6:	4631      	mov	r1, r6
 8002af8:	4628      	mov	r0, r5
 8002afa:	47b8      	blx	r7
 8002afc:	3001      	adds	r0, #1
 8002afe:	f43f ae54 	beq.w	80027aa <_printf_float+0xb6>
 8002b02:	f108 0801 	add.w	r8, r8, #1
 8002b06:	45d0      	cmp	r8, sl
 8002b08:	dbf3      	blt.n	8002af2 <_printf_float+0x3fe>
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002b10:	e6e0      	b.n	80028d4 <_printf_float+0x1e0>
 8002b12:	f04f 0800 	mov.w	r8, #0
 8002b16:	f104 0b1a 	add.w	fp, r4, #26
 8002b1a:	e7f4      	b.n	8002b06 <_printf_float+0x412>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	4642      	mov	r2, r8
 8002b20:	e7e1      	b.n	8002ae6 <_printf_float+0x3f2>
 8002b22:	2301      	movs	r3, #1
 8002b24:	464a      	mov	r2, r9
 8002b26:	4631      	mov	r1, r6
 8002b28:	4628      	mov	r0, r5
 8002b2a:	47b8      	blx	r7
 8002b2c:	3001      	adds	r0, #1
 8002b2e:	f43f ae3c 	beq.w	80027aa <_printf_float+0xb6>
 8002b32:	f108 0801 	add.w	r8, r8, #1
 8002b36:	68e3      	ldr	r3, [r4, #12]
 8002b38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8002b3a:	1a5b      	subs	r3, r3, r1
 8002b3c:	4543      	cmp	r3, r8
 8002b3e:	dcf0      	bgt.n	8002b22 <_printf_float+0x42e>
 8002b40:	e6fd      	b.n	800293e <_printf_float+0x24a>
 8002b42:	f04f 0800 	mov.w	r8, #0
 8002b46:	f104 0919 	add.w	r9, r4, #25
 8002b4a:	e7f4      	b.n	8002b36 <_printf_float+0x442>

08002b4c <_printf_common>:
 8002b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b50:	4616      	mov	r6, r2
 8002b52:	4698      	mov	r8, r3
 8002b54:	688a      	ldr	r2, [r1, #8]
 8002b56:	690b      	ldr	r3, [r1, #16]
 8002b58:	4607      	mov	r7, r0
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	bfb8      	it	lt
 8002b5e:	4613      	movlt	r3, r2
 8002b60:	6033      	str	r3, [r6, #0]
 8002b62:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b66:	460c      	mov	r4, r1
 8002b68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b6c:	b10a      	cbz	r2, 8002b72 <_printf_common+0x26>
 8002b6e:	3301      	adds	r3, #1
 8002b70:	6033      	str	r3, [r6, #0]
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	0699      	lsls	r1, r3, #26
 8002b76:	bf42      	ittt	mi
 8002b78:	6833      	ldrmi	r3, [r6, #0]
 8002b7a:	3302      	addmi	r3, #2
 8002b7c:	6033      	strmi	r3, [r6, #0]
 8002b7e:	6825      	ldr	r5, [r4, #0]
 8002b80:	f015 0506 	ands.w	r5, r5, #6
 8002b84:	d106      	bne.n	8002b94 <_printf_common+0x48>
 8002b86:	f104 0a19 	add.w	sl, r4, #25
 8002b8a:	68e3      	ldr	r3, [r4, #12]
 8002b8c:	6832      	ldr	r2, [r6, #0]
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	42ab      	cmp	r3, r5
 8002b92:	dc2b      	bgt.n	8002bec <_printf_common+0xa0>
 8002b94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002b98:	6822      	ldr	r2, [r4, #0]
 8002b9a:	3b00      	subs	r3, #0
 8002b9c:	bf18      	it	ne
 8002b9e:	2301      	movne	r3, #1
 8002ba0:	0692      	lsls	r2, r2, #26
 8002ba2:	d430      	bmi.n	8002c06 <_printf_common+0xba>
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	4638      	mov	r0, r7
 8002ba8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002bac:	47c8      	blx	r9
 8002bae:	3001      	adds	r0, #1
 8002bb0:	d023      	beq.n	8002bfa <_printf_common+0xae>
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	6922      	ldr	r2, [r4, #16]
 8002bb6:	f003 0306 	and.w	r3, r3, #6
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf14      	ite	ne
 8002bbe:	2500      	movne	r5, #0
 8002bc0:	6833      	ldreq	r3, [r6, #0]
 8002bc2:	f04f 0600 	mov.w	r6, #0
 8002bc6:	bf08      	it	eq
 8002bc8:	68e5      	ldreq	r5, [r4, #12]
 8002bca:	f104 041a 	add.w	r4, r4, #26
 8002bce:	bf08      	it	eq
 8002bd0:	1aed      	subeq	r5, r5, r3
 8002bd2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002bd6:	bf08      	it	eq
 8002bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	bfc4      	itt	gt
 8002be0:	1a9b      	subgt	r3, r3, r2
 8002be2:	18ed      	addgt	r5, r5, r3
 8002be4:	42b5      	cmp	r5, r6
 8002be6:	d11a      	bne.n	8002c1e <_printf_common+0xd2>
 8002be8:	2000      	movs	r0, #0
 8002bea:	e008      	b.n	8002bfe <_printf_common+0xb2>
 8002bec:	2301      	movs	r3, #1
 8002bee:	4652      	mov	r2, sl
 8002bf0:	4641      	mov	r1, r8
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	47c8      	blx	r9
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	d103      	bne.n	8002c02 <_printf_common+0xb6>
 8002bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c02:	3501      	adds	r5, #1
 8002c04:	e7c1      	b.n	8002b8a <_printf_common+0x3e>
 8002c06:	2030      	movs	r0, #48	@ 0x30
 8002c08:	18e1      	adds	r1, r4, r3
 8002c0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c14:	4422      	add	r2, r4
 8002c16:	3302      	adds	r3, #2
 8002c18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c1c:	e7c2      	b.n	8002ba4 <_printf_common+0x58>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	4622      	mov	r2, r4
 8002c22:	4641      	mov	r1, r8
 8002c24:	4638      	mov	r0, r7
 8002c26:	47c8      	blx	r9
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d0e6      	beq.n	8002bfa <_printf_common+0xae>
 8002c2c:	3601      	adds	r6, #1
 8002c2e:	e7d9      	b.n	8002be4 <_printf_common+0x98>

08002c30 <_printf_i>:
 8002c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c34:	7e0f      	ldrb	r7, [r1, #24]
 8002c36:	4691      	mov	r9, r2
 8002c38:	2f78      	cmp	r7, #120	@ 0x78
 8002c3a:	4680      	mov	r8, r0
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	469a      	mov	sl, r3
 8002c40:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c46:	d807      	bhi.n	8002c58 <_printf_i+0x28>
 8002c48:	2f62      	cmp	r7, #98	@ 0x62
 8002c4a:	d80a      	bhi.n	8002c62 <_printf_i+0x32>
 8002c4c:	2f00      	cmp	r7, #0
 8002c4e:	f000 80d1 	beq.w	8002df4 <_printf_i+0x1c4>
 8002c52:	2f58      	cmp	r7, #88	@ 0x58
 8002c54:	f000 80b8 	beq.w	8002dc8 <_printf_i+0x198>
 8002c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002c60:	e03a      	b.n	8002cd8 <_printf_i+0xa8>
 8002c62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c66:	2b15      	cmp	r3, #21
 8002c68:	d8f6      	bhi.n	8002c58 <_printf_i+0x28>
 8002c6a:	a101      	add	r1, pc, #4	@ (adr r1, 8002c70 <_printf_i+0x40>)
 8002c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c70:	08002cc9 	.word	0x08002cc9
 8002c74:	08002cdd 	.word	0x08002cdd
 8002c78:	08002c59 	.word	0x08002c59
 8002c7c:	08002c59 	.word	0x08002c59
 8002c80:	08002c59 	.word	0x08002c59
 8002c84:	08002c59 	.word	0x08002c59
 8002c88:	08002cdd 	.word	0x08002cdd
 8002c8c:	08002c59 	.word	0x08002c59
 8002c90:	08002c59 	.word	0x08002c59
 8002c94:	08002c59 	.word	0x08002c59
 8002c98:	08002c59 	.word	0x08002c59
 8002c9c:	08002ddb 	.word	0x08002ddb
 8002ca0:	08002d07 	.word	0x08002d07
 8002ca4:	08002d95 	.word	0x08002d95
 8002ca8:	08002c59 	.word	0x08002c59
 8002cac:	08002c59 	.word	0x08002c59
 8002cb0:	08002dfd 	.word	0x08002dfd
 8002cb4:	08002c59 	.word	0x08002c59
 8002cb8:	08002d07 	.word	0x08002d07
 8002cbc:	08002c59 	.word	0x08002c59
 8002cc0:	08002c59 	.word	0x08002c59
 8002cc4:	08002d9d 	.word	0x08002d9d
 8002cc8:	6833      	ldr	r3, [r6, #0]
 8002cca:	1d1a      	adds	r2, r3, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6032      	str	r2, [r6, #0]
 8002cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002cd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e09c      	b.n	8002e16 <_printf_i+0x1e6>
 8002cdc:	6833      	ldr	r3, [r6, #0]
 8002cde:	6820      	ldr	r0, [r4, #0]
 8002ce0:	1d19      	adds	r1, r3, #4
 8002ce2:	6031      	str	r1, [r6, #0]
 8002ce4:	0606      	lsls	r6, r0, #24
 8002ce6:	d501      	bpl.n	8002cec <_printf_i+0xbc>
 8002ce8:	681d      	ldr	r5, [r3, #0]
 8002cea:	e003      	b.n	8002cf4 <_printf_i+0xc4>
 8002cec:	0645      	lsls	r5, r0, #25
 8002cee:	d5fb      	bpl.n	8002ce8 <_printf_i+0xb8>
 8002cf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002cf4:	2d00      	cmp	r5, #0
 8002cf6:	da03      	bge.n	8002d00 <_printf_i+0xd0>
 8002cf8:	232d      	movs	r3, #45	@ 0x2d
 8002cfa:	426d      	negs	r5, r5
 8002cfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d00:	230a      	movs	r3, #10
 8002d02:	4858      	ldr	r0, [pc, #352]	@ (8002e64 <_printf_i+0x234>)
 8002d04:	e011      	b.n	8002d2a <_printf_i+0xfa>
 8002d06:	6821      	ldr	r1, [r4, #0]
 8002d08:	6833      	ldr	r3, [r6, #0]
 8002d0a:	0608      	lsls	r0, r1, #24
 8002d0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d10:	d402      	bmi.n	8002d18 <_printf_i+0xe8>
 8002d12:	0649      	lsls	r1, r1, #25
 8002d14:	bf48      	it	mi
 8002d16:	b2ad      	uxthmi	r5, r5
 8002d18:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d1a:	6033      	str	r3, [r6, #0]
 8002d1c:	bf14      	ite	ne
 8002d1e:	230a      	movne	r3, #10
 8002d20:	2308      	moveq	r3, #8
 8002d22:	4850      	ldr	r0, [pc, #320]	@ (8002e64 <_printf_i+0x234>)
 8002d24:	2100      	movs	r1, #0
 8002d26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d2a:	6866      	ldr	r6, [r4, #4]
 8002d2c:	2e00      	cmp	r6, #0
 8002d2e:	60a6      	str	r6, [r4, #8]
 8002d30:	db05      	blt.n	8002d3e <_printf_i+0x10e>
 8002d32:	6821      	ldr	r1, [r4, #0]
 8002d34:	432e      	orrs	r6, r5
 8002d36:	f021 0104 	bic.w	r1, r1, #4
 8002d3a:	6021      	str	r1, [r4, #0]
 8002d3c:	d04b      	beq.n	8002dd6 <_printf_i+0x1a6>
 8002d3e:	4616      	mov	r6, r2
 8002d40:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d44:	fb03 5711 	mls	r7, r3, r1, r5
 8002d48:	5dc7      	ldrb	r7, [r0, r7]
 8002d4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d4e:	462f      	mov	r7, r5
 8002d50:	42bb      	cmp	r3, r7
 8002d52:	460d      	mov	r5, r1
 8002d54:	d9f4      	bls.n	8002d40 <_printf_i+0x110>
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d10b      	bne.n	8002d72 <_printf_i+0x142>
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	07df      	lsls	r7, r3, #31
 8002d5e:	d508      	bpl.n	8002d72 <_printf_i+0x142>
 8002d60:	6923      	ldr	r3, [r4, #16]
 8002d62:	6861      	ldr	r1, [r4, #4]
 8002d64:	4299      	cmp	r1, r3
 8002d66:	bfde      	ittt	le
 8002d68:	2330      	movle	r3, #48	@ 0x30
 8002d6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d72:	1b92      	subs	r2, r2, r6
 8002d74:	6122      	str	r2, [r4, #16]
 8002d76:	464b      	mov	r3, r9
 8002d78:	4621      	mov	r1, r4
 8002d7a:	4640      	mov	r0, r8
 8002d7c:	f8cd a000 	str.w	sl, [sp]
 8002d80:	aa03      	add	r2, sp, #12
 8002d82:	f7ff fee3 	bl	8002b4c <_printf_common>
 8002d86:	3001      	adds	r0, #1
 8002d88:	d14a      	bne.n	8002e20 <_printf_i+0x1f0>
 8002d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8e:	b004      	add	sp, #16
 8002d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	f043 0320 	orr.w	r3, r3, #32
 8002d9a:	6023      	str	r3, [r4, #0]
 8002d9c:	2778      	movs	r7, #120	@ 0x78
 8002d9e:	4832      	ldr	r0, [pc, #200]	@ (8002e68 <_printf_i+0x238>)
 8002da0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	6831      	ldr	r1, [r6, #0]
 8002da8:	061f      	lsls	r7, r3, #24
 8002daa:	f851 5b04 	ldr.w	r5, [r1], #4
 8002dae:	d402      	bmi.n	8002db6 <_printf_i+0x186>
 8002db0:	065f      	lsls	r7, r3, #25
 8002db2:	bf48      	it	mi
 8002db4:	b2ad      	uxthmi	r5, r5
 8002db6:	6031      	str	r1, [r6, #0]
 8002db8:	07d9      	lsls	r1, r3, #31
 8002dba:	bf44      	itt	mi
 8002dbc:	f043 0320 	orrmi.w	r3, r3, #32
 8002dc0:	6023      	strmi	r3, [r4, #0]
 8002dc2:	b11d      	cbz	r5, 8002dcc <_printf_i+0x19c>
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	e7ad      	b.n	8002d24 <_printf_i+0xf4>
 8002dc8:	4826      	ldr	r0, [pc, #152]	@ (8002e64 <_printf_i+0x234>)
 8002dca:	e7e9      	b.n	8002da0 <_printf_i+0x170>
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	f023 0320 	bic.w	r3, r3, #32
 8002dd2:	6023      	str	r3, [r4, #0]
 8002dd4:	e7f6      	b.n	8002dc4 <_printf_i+0x194>
 8002dd6:	4616      	mov	r6, r2
 8002dd8:	e7bd      	b.n	8002d56 <_printf_i+0x126>
 8002dda:	6833      	ldr	r3, [r6, #0]
 8002ddc:	6825      	ldr	r5, [r4, #0]
 8002dde:	1d18      	adds	r0, r3, #4
 8002de0:	6961      	ldr	r1, [r4, #20]
 8002de2:	6030      	str	r0, [r6, #0]
 8002de4:	062e      	lsls	r6, r5, #24
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	d501      	bpl.n	8002dee <_printf_i+0x1be>
 8002dea:	6019      	str	r1, [r3, #0]
 8002dec:	e002      	b.n	8002df4 <_printf_i+0x1c4>
 8002dee:	0668      	lsls	r0, r5, #25
 8002df0:	d5fb      	bpl.n	8002dea <_printf_i+0x1ba>
 8002df2:	8019      	strh	r1, [r3, #0]
 8002df4:	2300      	movs	r3, #0
 8002df6:	4616      	mov	r6, r2
 8002df8:	6123      	str	r3, [r4, #16]
 8002dfa:	e7bc      	b.n	8002d76 <_printf_i+0x146>
 8002dfc:	6833      	ldr	r3, [r6, #0]
 8002dfe:	2100      	movs	r1, #0
 8002e00:	1d1a      	adds	r2, r3, #4
 8002e02:	6032      	str	r2, [r6, #0]
 8002e04:	681e      	ldr	r6, [r3, #0]
 8002e06:	6862      	ldr	r2, [r4, #4]
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f000 fd96 	bl	800393a <memchr>
 8002e0e:	b108      	cbz	r0, 8002e14 <_printf_i+0x1e4>
 8002e10:	1b80      	subs	r0, r0, r6
 8002e12:	6060      	str	r0, [r4, #4]
 8002e14:	6863      	ldr	r3, [r4, #4]
 8002e16:	6123      	str	r3, [r4, #16]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e1e:	e7aa      	b.n	8002d76 <_printf_i+0x146>
 8002e20:	4632      	mov	r2, r6
 8002e22:	4649      	mov	r1, r9
 8002e24:	4640      	mov	r0, r8
 8002e26:	6923      	ldr	r3, [r4, #16]
 8002e28:	47d0      	blx	sl
 8002e2a:	3001      	adds	r0, #1
 8002e2c:	d0ad      	beq.n	8002d8a <_printf_i+0x15a>
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	079b      	lsls	r3, r3, #30
 8002e32:	d413      	bmi.n	8002e5c <_printf_i+0x22c>
 8002e34:	68e0      	ldr	r0, [r4, #12]
 8002e36:	9b03      	ldr	r3, [sp, #12]
 8002e38:	4298      	cmp	r0, r3
 8002e3a:	bfb8      	it	lt
 8002e3c:	4618      	movlt	r0, r3
 8002e3e:	e7a6      	b.n	8002d8e <_printf_i+0x15e>
 8002e40:	2301      	movs	r3, #1
 8002e42:	4632      	mov	r2, r6
 8002e44:	4649      	mov	r1, r9
 8002e46:	4640      	mov	r0, r8
 8002e48:	47d0      	blx	sl
 8002e4a:	3001      	adds	r0, #1
 8002e4c:	d09d      	beq.n	8002d8a <_printf_i+0x15a>
 8002e4e:	3501      	adds	r5, #1
 8002e50:	68e3      	ldr	r3, [r4, #12]
 8002e52:	9903      	ldr	r1, [sp, #12]
 8002e54:	1a5b      	subs	r3, r3, r1
 8002e56:	42ab      	cmp	r3, r5
 8002e58:	dcf2      	bgt.n	8002e40 <_printf_i+0x210>
 8002e5a:	e7eb      	b.n	8002e34 <_printf_i+0x204>
 8002e5c:	2500      	movs	r5, #0
 8002e5e:	f104 0619 	add.w	r6, r4, #25
 8002e62:	e7f5      	b.n	8002e50 <_printf_i+0x220>
 8002e64:	08006e24 	.word	0x08006e24
 8002e68:	08006e35 	.word	0x08006e35

08002e6c <_scanf_float>:
 8002e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e70:	b087      	sub	sp, #28
 8002e72:	9303      	str	r3, [sp, #12]
 8002e74:	688b      	ldr	r3, [r1, #8]
 8002e76:	4691      	mov	r9, r2
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8002e7e:	bf82      	ittt	hi
 8002e80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8002e84:	eb03 0b05 	addhi.w	fp, r3, r5
 8002e88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8002e8c:	460a      	mov	r2, r1
 8002e8e:	f04f 0500 	mov.w	r5, #0
 8002e92:	bf88      	it	hi
 8002e94:	608b      	strhi	r3, [r1, #8]
 8002e96:	680b      	ldr	r3, [r1, #0]
 8002e98:	4680      	mov	r8, r0
 8002e9a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8002e9e:	f842 3b1c 	str.w	r3, [r2], #28
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	bf98      	it	ls
 8002ea6:	f04f 0b00 	movls.w	fp, #0
 8002eaa:	4616      	mov	r6, r2
 8002eac:	46aa      	mov	sl, r5
 8002eae:	462f      	mov	r7, r5
 8002eb0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002eb4:	9201      	str	r2, [sp, #4]
 8002eb6:	9502      	str	r5, [sp, #8]
 8002eb8:	68a2      	ldr	r2, [r4, #8]
 8002eba:	b15a      	cbz	r2, 8002ed4 <_scanf_float+0x68>
 8002ebc:	f8d9 3000 	ldr.w	r3, [r9]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b4e      	cmp	r3, #78	@ 0x4e
 8002ec4:	d862      	bhi.n	8002f8c <_scanf_float+0x120>
 8002ec6:	2b40      	cmp	r3, #64	@ 0x40
 8002ec8:	d83a      	bhi.n	8002f40 <_scanf_float+0xd4>
 8002eca:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8002ece:	b2c8      	uxtb	r0, r1
 8002ed0:	280e      	cmp	r0, #14
 8002ed2:	d938      	bls.n	8002f46 <_scanf_float+0xda>
 8002ed4:	b11f      	cbz	r7, 8002ede <_scanf_float+0x72>
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002edc:	6023      	str	r3, [r4, #0]
 8002ede:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002ee2:	f1ba 0f01 	cmp.w	sl, #1
 8002ee6:	f200 8114 	bhi.w	8003112 <_scanf_float+0x2a6>
 8002eea:	9b01      	ldr	r3, [sp, #4]
 8002eec:	429e      	cmp	r6, r3
 8002eee:	f200 8105 	bhi.w	80030fc <_scanf_float+0x290>
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	b007      	add	sp, #28
 8002ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002efa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8002efe:	2a0d      	cmp	r2, #13
 8002f00:	d8e8      	bhi.n	8002ed4 <_scanf_float+0x68>
 8002f02:	a101      	add	r1, pc, #4	@ (adr r1, 8002f08 <_scanf_float+0x9c>)
 8002f04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002f08:	08003051 	.word	0x08003051
 8002f0c:	08002ed5 	.word	0x08002ed5
 8002f10:	08002ed5 	.word	0x08002ed5
 8002f14:	08002ed5 	.word	0x08002ed5
 8002f18:	080030ad 	.word	0x080030ad
 8002f1c:	08003087 	.word	0x08003087
 8002f20:	08002ed5 	.word	0x08002ed5
 8002f24:	08002ed5 	.word	0x08002ed5
 8002f28:	0800305f 	.word	0x0800305f
 8002f2c:	08002ed5 	.word	0x08002ed5
 8002f30:	08002ed5 	.word	0x08002ed5
 8002f34:	08002ed5 	.word	0x08002ed5
 8002f38:	08002ed5 	.word	0x08002ed5
 8002f3c:	0800301b 	.word	0x0800301b
 8002f40:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8002f44:	e7db      	b.n	8002efe <_scanf_float+0x92>
 8002f46:	290e      	cmp	r1, #14
 8002f48:	d8c4      	bhi.n	8002ed4 <_scanf_float+0x68>
 8002f4a:	a001      	add	r0, pc, #4	@ (adr r0, 8002f50 <_scanf_float+0xe4>)
 8002f4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002f50:	0800300b 	.word	0x0800300b
 8002f54:	08002ed5 	.word	0x08002ed5
 8002f58:	0800300b 	.word	0x0800300b
 8002f5c:	0800309b 	.word	0x0800309b
 8002f60:	08002ed5 	.word	0x08002ed5
 8002f64:	08002fad 	.word	0x08002fad
 8002f68:	08002ff1 	.word	0x08002ff1
 8002f6c:	08002ff1 	.word	0x08002ff1
 8002f70:	08002ff1 	.word	0x08002ff1
 8002f74:	08002ff1 	.word	0x08002ff1
 8002f78:	08002ff1 	.word	0x08002ff1
 8002f7c:	08002ff1 	.word	0x08002ff1
 8002f80:	08002ff1 	.word	0x08002ff1
 8002f84:	08002ff1 	.word	0x08002ff1
 8002f88:	08002ff1 	.word	0x08002ff1
 8002f8c:	2b6e      	cmp	r3, #110	@ 0x6e
 8002f8e:	d809      	bhi.n	8002fa4 <_scanf_float+0x138>
 8002f90:	2b60      	cmp	r3, #96	@ 0x60
 8002f92:	d8b2      	bhi.n	8002efa <_scanf_float+0x8e>
 8002f94:	2b54      	cmp	r3, #84	@ 0x54
 8002f96:	d07b      	beq.n	8003090 <_scanf_float+0x224>
 8002f98:	2b59      	cmp	r3, #89	@ 0x59
 8002f9a:	d19b      	bne.n	8002ed4 <_scanf_float+0x68>
 8002f9c:	2d07      	cmp	r5, #7
 8002f9e:	d199      	bne.n	8002ed4 <_scanf_float+0x68>
 8002fa0:	2508      	movs	r5, #8
 8002fa2:	e02f      	b.n	8003004 <_scanf_float+0x198>
 8002fa4:	2b74      	cmp	r3, #116	@ 0x74
 8002fa6:	d073      	beq.n	8003090 <_scanf_float+0x224>
 8002fa8:	2b79      	cmp	r3, #121	@ 0x79
 8002faa:	e7f6      	b.n	8002f9a <_scanf_float+0x12e>
 8002fac:	6821      	ldr	r1, [r4, #0]
 8002fae:	05c8      	lsls	r0, r1, #23
 8002fb0:	d51e      	bpl.n	8002ff0 <_scanf_float+0x184>
 8002fb2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8002fb6:	6021      	str	r1, [r4, #0]
 8002fb8:	3701      	adds	r7, #1
 8002fba:	f1bb 0f00 	cmp.w	fp, #0
 8002fbe:	d003      	beq.n	8002fc8 <_scanf_float+0x15c>
 8002fc0:	3201      	adds	r2, #1
 8002fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002fc6:	60a2      	str	r2, [r4, #8]
 8002fc8:	68a3      	ldr	r3, [r4, #8]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	60a3      	str	r3, [r4, #8]
 8002fce:	6923      	ldr	r3, [r4, #16]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	6123      	str	r3, [r4, #16]
 8002fd4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f8c9 3004 	str.w	r3, [r9, #4]
 8002fe0:	f340 8083 	ble.w	80030ea <_scanf_float+0x27e>
 8002fe4:	f8d9 3000 	ldr.w	r3, [r9]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f8c9 3000 	str.w	r3, [r9]
 8002fee:	e763      	b.n	8002eb8 <_scanf_float+0x4c>
 8002ff0:	eb1a 0105 	adds.w	r1, sl, r5
 8002ff4:	f47f af6e 	bne.w	8002ed4 <_scanf_float+0x68>
 8002ff8:	460d      	mov	r5, r1
 8002ffa:	468a      	mov	sl, r1
 8002ffc:	6822      	ldr	r2, [r4, #0]
 8002ffe:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003002:	6022      	str	r2, [r4, #0]
 8003004:	f806 3b01 	strb.w	r3, [r6], #1
 8003008:	e7de      	b.n	8002fc8 <_scanf_float+0x15c>
 800300a:	6822      	ldr	r2, [r4, #0]
 800300c:	0610      	lsls	r0, r2, #24
 800300e:	f57f af61 	bpl.w	8002ed4 <_scanf_float+0x68>
 8003012:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003016:	6022      	str	r2, [r4, #0]
 8003018:	e7f4      	b.n	8003004 <_scanf_float+0x198>
 800301a:	f1ba 0f00 	cmp.w	sl, #0
 800301e:	d10c      	bne.n	800303a <_scanf_float+0x1ce>
 8003020:	b977      	cbnz	r7, 8003040 <_scanf_float+0x1d4>
 8003022:	6822      	ldr	r2, [r4, #0]
 8003024:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003028:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800302c:	d108      	bne.n	8003040 <_scanf_float+0x1d4>
 800302e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003032:	f04f 0a01 	mov.w	sl, #1
 8003036:	6022      	str	r2, [r4, #0]
 8003038:	e7e4      	b.n	8003004 <_scanf_float+0x198>
 800303a:	f1ba 0f02 	cmp.w	sl, #2
 800303e:	d051      	beq.n	80030e4 <_scanf_float+0x278>
 8003040:	2d01      	cmp	r5, #1
 8003042:	d002      	beq.n	800304a <_scanf_float+0x1de>
 8003044:	2d04      	cmp	r5, #4
 8003046:	f47f af45 	bne.w	8002ed4 <_scanf_float+0x68>
 800304a:	3501      	adds	r5, #1
 800304c:	b2ed      	uxtb	r5, r5
 800304e:	e7d9      	b.n	8003004 <_scanf_float+0x198>
 8003050:	f1ba 0f01 	cmp.w	sl, #1
 8003054:	f47f af3e 	bne.w	8002ed4 <_scanf_float+0x68>
 8003058:	f04f 0a02 	mov.w	sl, #2
 800305c:	e7d2      	b.n	8003004 <_scanf_float+0x198>
 800305e:	b975      	cbnz	r5, 800307e <_scanf_float+0x212>
 8003060:	2f00      	cmp	r7, #0
 8003062:	f47f af38 	bne.w	8002ed6 <_scanf_float+0x6a>
 8003066:	6822      	ldr	r2, [r4, #0]
 8003068:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800306c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003070:	f040 80ff 	bne.w	8003272 <_scanf_float+0x406>
 8003074:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003078:	2501      	movs	r5, #1
 800307a:	6022      	str	r2, [r4, #0]
 800307c:	e7c2      	b.n	8003004 <_scanf_float+0x198>
 800307e:	2d03      	cmp	r5, #3
 8003080:	d0e3      	beq.n	800304a <_scanf_float+0x1de>
 8003082:	2d05      	cmp	r5, #5
 8003084:	e7df      	b.n	8003046 <_scanf_float+0x1da>
 8003086:	2d02      	cmp	r5, #2
 8003088:	f47f af24 	bne.w	8002ed4 <_scanf_float+0x68>
 800308c:	2503      	movs	r5, #3
 800308e:	e7b9      	b.n	8003004 <_scanf_float+0x198>
 8003090:	2d06      	cmp	r5, #6
 8003092:	f47f af1f 	bne.w	8002ed4 <_scanf_float+0x68>
 8003096:	2507      	movs	r5, #7
 8003098:	e7b4      	b.n	8003004 <_scanf_float+0x198>
 800309a:	6822      	ldr	r2, [r4, #0]
 800309c:	0591      	lsls	r1, r2, #22
 800309e:	f57f af19 	bpl.w	8002ed4 <_scanf_float+0x68>
 80030a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80030a6:	6022      	str	r2, [r4, #0]
 80030a8:	9702      	str	r7, [sp, #8]
 80030aa:	e7ab      	b.n	8003004 <_scanf_float+0x198>
 80030ac:	6822      	ldr	r2, [r4, #0]
 80030ae:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80030b2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80030b6:	d005      	beq.n	80030c4 <_scanf_float+0x258>
 80030b8:	0550      	lsls	r0, r2, #21
 80030ba:	f57f af0b 	bpl.w	8002ed4 <_scanf_float+0x68>
 80030be:	2f00      	cmp	r7, #0
 80030c0:	f000 80d7 	beq.w	8003272 <_scanf_float+0x406>
 80030c4:	0591      	lsls	r1, r2, #22
 80030c6:	bf58      	it	pl
 80030c8:	9902      	ldrpl	r1, [sp, #8]
 80030ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80030ce:	bf58      	it	pl
 80030d0:	1a79      	subpl	r1, r7, r1
 80030d2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80030d6:	f04f 0700 	mov.w	r7, #0
 80030da:	bf58      	it	pl
 80030dc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80030e0:	6022      	str	r2, [r4, #0]
 80030e2:	e78f      	b.n	8003004 <_scanf_float+0x198>
 80030e4:	f04f 0a03 	mov.w	sl, #3
 80030e8:	e78c      	b.n	8003004 <_scanf_float+0x198>
 80030ea:	4649      	mov	r1, r9
 80030ec:	4640      	mov	r0, r8
 80030ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80030f2:	4798      	blx	r3
 80030f4:	2800      	cmp	r0, #0
 80030f6:	f43f aedf 	beq.w	8002eb8 <_scanf_float+0x4c>
 80030fa:	e6eb      	b.n	8002ed4 <_scanf_float+0x68>
 80030fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003100:	464a      	mov	r2, r9
 8003102:	4640      	mov	r0, r8
 8003104:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003108:	4798      	blx	r3
 800310a:	6923      	ldr	r3, [r4, #16]
 800310c:	3b01      	subs	r3, #1
 800310e:	6123      	str	r3, [r4, #16]
 8003110:	e6eb      	b.n	8002eea <_scanf_float+0x7e>
 8003112:	1e6b      	subs	r3, r5, #1
 8003114:	2b06      	cmp	r3, #6
 8003116:	d824      	bhi.n	8003162 <_scanf_float+0x2f6>
 8003118:	2d02      	cmp	r5, #2
 800311a:	d836      	bhi.n	800318a <_scanf_float+0x31e>
 800311c:	9b01      	ldr	r3, [sp, #4]
 800311e:	429e      	cmp	r6, r3
 8003120:	f67f aee7 	bls.w	8002ef2 <_scanf_float+0x86>
 8003124:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003128:	464a      	mov	r2, r9
 800312a:	4640      	mov	r0, r8
 800312c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003130:	4798      	blx	r3
 8003132:	6923      	ldr	r3, [r4, #16]
 8003134:	3b01      	subs	r3, #1
 8003136:	6123      	str	r3, [r4, #16]
 8003138:	e7f0      	b.n	800311c <_scanf_float+0x2b0>
 800313a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800313e:	464a      	mov	r2, r9
 8003140:	4640      	mov	r0, r8
 8003142:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003146:	4798      	blx	r3
 8003148:	6923      	ldr	r3, [r4, #16]
 800314a:	3b01      	subs	r3, #1
 800314c:	6123      	str	r3, [r4, #16]
 800314e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003152:	fa5f fa8a 	uxtb.w	sl, sl
 8003156:	f1ba 0f02 	cmp.w	sl, #2
 800315a:	d1ee      	bne.n	800313a <_scanf_float+0x2ce>
 800315c:	3d03      	subs	r5, #3
 800315e:	b2ed      	uxtb	r5, r5
 8003160:	1b76      	subs	r6, r6, r5
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	05da      	lsls	r2, r3, #23
 8003166:	d530      	bpl.n	80031ca <_scanf_float+0x35e>
 8003168:	055b      	lsls	r3, r3, #21
 800316a:	d511      	bpl.n	8003190 <_scanf_float+0x324>
 800316c:	9b01      	ldr	r3, [sp, #4]
 800316e:	429e      	cmp	r6, r3
 8003170:	f67f aebf 	bls.w	8002ef2 <_scanf_float+0x86>
 8003174:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003178:	464a      	mov	r2, r9
 800317a:	4640      	mov	r0, r8
 800317c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003180:	4798      	blx	r3
 8003182:	6923      	ldr	r3, [r4, #16]
 8003184:	3b01      	subs	r3, #1
 8003186:	6123      	str	r3, [r4, #16]
 8003188:	e7f0      	b.n	800316c <_scanf_float+0x300>
 800318a:	46aa      	mov	sl, r5
 800318c:	46b3      	mov	fp, r6
 800318e:	e7de      	b.n	800314e <_scanf_float+0x2e2>
 8003190:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003194:	6923      	ldr	r3, [r4, #16]
 8003196:	2965      	cmp	r1, #101	@ 0x65
 8003198:	f103 33ff 	add.w	r3, r3, #4294967295
 800319c:	f106 35ff 	add.w	r5, r6, #4294967295
 80031a0:	6123      	str	r3, [r4, #16]
 80031a2:	d00c      	beq.n	80031be <_scanf_float+0x352>
 80031a4:	2945      	cmp	r1, #69	@ 0x45
 80031a6:	d00a      	beq.n	80031be <_scanf_float+0x352>
 80031a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80031ac:	464a      	mov	r2, r9
 80031ae:	4640      	mov	r0, r8
 80031b0:	4798      	blx	r3
 80031b2:	6923      	ldr	r3, [r4, #16]
 80031b4:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	1eb5      	subs	r5, r6, #2
 80031bc:	6123      	str	r3, [r4, #16]
 80031be:	464a      	mov	r2, r9
 80031c0:	4640      	mov	r0, r8
 80031c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80031c6:	4798      	blx	r3
 80031c8:	462e      	mov	r6, r5
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	f012 0210 	ands.w	r2, r2, #16
 80031d0:	d001      	beq.n	80031d6 <_scanf_float+0x36a>
 80031d2:	2000      	movs	r0, #0
 80031d4:	e68e      	b.n	8002ef4 <_scanf_float+0x88>
 80031d6:	7032      	strb	r2, [r6, #0]
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e2:	d125      	bne.n	8003230 <_scanf_float+0x3c4>
 80031e4:	9b02      	ldr	r3, [sp, #8]
 80031e6:	429f      	cmp	r7, r3
 80031e8:	d00a      	beq.n	8003200 <_scanf_float+0x394>
 80031ea:	1bda      	subs	r2, r3, r7
 80031ec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80031f0:	429e      	cmp	r6, r3
 80031f2:	bf28      	it	cs
 80031f4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80031f8:	4630      	mov	r0, r6
 80031fa:	491f      	ldr	r1, [pc, #124]	@ (8003278 <_scanf_float+0x40c>)
 80031fc:	f000 fa24 	bl	8003648 <siprintf>
 8003200:	2200      	movs	r2, #0
 8003202:	4640      	mov	r0, r8
 8003204:	9901      	ldr	r1, [sp, #4]
 8003206:	f002 fd9f 	bl	8005d48 <_strtod_r>
 800320a:	9b03      	ldr	r3, [sp, #12]
 800320c:	6825      	ldr	r5, [r4, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f015 0f02 	tst.w	r5, #2
 8003214:	4606      	mov	r6, r0
 8003216:	460f      	mov	r7, r1
 8003218:	f103 0204 	add.w	r2, r3, #4
 800321c:	d015      	beq.n	800324a <_scanf_float+0x3de>
 800321e:	9903      	ldr	r1, [sp, #12]
 8003220:	600a      	str	r2, [r1, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	e9c3 6700 	strd	r6, r7, [r3]
 8003228:	68e3      	ldr	r3, [r4, #12]
 800322a:	3301      	adds	r3, #1
 800322c:	60e3      	str	r3, [r4, #12]
 800322e:	e7d0      	b.n	80031d2 <_scanf_float+0x366>
 8003230:	9b04      	ldr	r3, [sp, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0e4      	beq.n	8003200 <_scanf_float+0x394>
 8003236:	9905      	ldr	r1, [sp, #20]
 8003238:	230a      	movs	r3, #10
 800323a:	4640      	mov	r0, r8
 800323c:	3101      	adds	r1, #1
 800323e:	f002 fe03 	bl	8005e48 <_strtol_r>
 8003242:	9b04      	ldr	r3, [sp, #16]
 8003244:	9e05      	ldr	r6, [sp, #20]
 8003246:	1ac2      	subs	r2, r0, r3
 8003248:	e7d0      	b.n	80031ec <_scanf_float+0x380>
 800324a:	076d      	lsls	r5, r5, #29
 800324c:	d4e7      	bmi.n	800321e <_scanf_float+0x3b2>
 800324e:	9d03      	ldr	r5, [sp, #12]
 8003250:	602a      	str	r2, [r5, #0]
 8003252:	681d      	ldr	r5, [r3, #0]
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	f7fd fbd8 	bl	8000a0c <__aeabi_dcmpun>
 800325c:	b120      	cbz	r0, 8003268 <_scanf_float+0x3fc>
 800325e:	4807      	ldr	r0, [pc, #28]	@ (800327c <_scanf_float+0x410>)
 8003260:	f000 fb7a 	bl	8003958 <nanf>
 8003264:	6028      	str	r0, [r5, #0]
 8003266:	e7df      	b.n	8003228 <_scanf_float+0x3bc>
 8003268:	4630      	mov	r0, r6
 800326a:	4639      	mov	r1, r7
 800326c:	f7fd fc2c 	bl	8000ac8 <__aeabi_d2f>
 8003270:	e7f8      	b.n	8003264 <_scanf_float+0x3f8>
 8003272:	2700      	movs	r7, #0
 8003274:	e633      	b.n	8002ede <_scanf_float+0x72>
 8003276:	bf00      	nop
 8003278:	08006e46 	.word	0x08006e46
 800327c:	08006f87 	.word	0x08006f87

08003280 <__sflush_r>:
 8003280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	0716      	lsls	r6, r2, #28
 8003288:	4605      	mov	r5, r0
 800328a:	460c      	mov	r4, r1
 800328c:	d454      	bmi.n	8003338 <__sflush_r+0xb8>
 800328e:	684b      	ldr	r3, [r1, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	dc02      	bgt.n	800329a <__sflush_r+0x1a>
 8003294:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	dd48      	ble.n	800332c <__sflush_r+0xac>
 800329a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800329c:	2e00      	cmp	r6, #0
 800329e:	d045      	beq.n	800332c <__sflush_r+0xac>
 80032a0:	2300      	movs	r3, #0
 80032a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80032a6:	682f      	ldr	r7, [r5, #0]
 80032a8:	6a21      	ldr	r1, [r4, #32]
 80032aa:	602b      	str	r3, [r5, #0]
 80032ac:	d030      	beq.n	8003310 <__sflush_r+0x90>
 80032ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80032b0:	89a3      	ldrh	r3, [r4, #12]
 80032b2:	0759      	lsls	r1, r3, #29
 80032b4:	d505      	bpl.n	80032c2 <__sflush_r+0x42>
 80032b6:	6863      	ldr	r3, [r4, #4]
 80032b8:	1ad2      	subs	r2, r2, r3
 80032ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80032bc:	b10b      	cbz	r3, 80032c2 <__sflush_r+0x42>
 80032be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032c0:	1ad2      	subs	r2, r2, r3
 80032c2:	2300      	movs	r3, #0
 80032c4:	4628      	mov	r0, r5
 80032c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032c8:	6a21      	ldr	r1, [r4, #32]
 80032ca:	47b0      	blx	r6
 80032cc:	1c43      	adds	r3, r0, #1
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	d106      	bne.n	80032e0 <__sflush_r+0x60>
 80032d2:	6829      	ldr	r1, [r5, #0]
 80032d4:	291d      	cmp	r1, #29
 80032d6:	d82b      	bhi.n	8003330 <__sflush_r+0xb0>
 80032d8:	4a28      	ldr	r2, [pc, #160]	@ (800337c <__sflush_r+0xfc>)
 80032da:	40ca      	lsrs	r2, r1
 80032dc:	07d6      	lsls	r6, r2, #31
 80032de:	d527      	bpl.n	8003330 <__sflush_r+0xb0>
 80032e0:	2200      	movs	r2, #0
 80032e2:	6062      	str	r2, [r4, #4]
 80032e4:	6922      	ldr	r2, [r4, #16]
 80032e6:	04d9      	lsls	r1, r3, #19
 80032e8:	6022      	str	r2, [r4, #0]
 80032ea:	d504      	bpl.n	80032f6 <__sflush_r+0x76>
 80032ec:	1c42      	adds	r2, r0, #1
 80032ee:	d101      	bne.n	80032f4 <__sflush_r+0x74>
 80032f0:	682b      	ldr	r3, [r5, #0]
 80032f2:	b903      	cbnz	r3, 80032f6 <__sflush_r+0x76>
 80032f4:	6560      	str	r0, [r4, #84]	@ 0x54
 80032f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032f8:	602f      	str	r7, [r5, #0]
 80032fa:	b1b9      	cbz	r1, 800332c <__sflush_r+0xac>
 80032fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003300:	4299      	cmp	r1, r3
 8003302:	d002      	beq.n	800330a <__sflush_r+0x8a>
 8003304:	4628      	mov	r0, r5
 8003306:	f001 f987 	bl	8004618 <_free_r>
 800330a:	2300      	movs	r3, #0
 800330c:	6363      	str	r3, [r4, #52]	@ 0x34
 800330e:	e00d      	b.n	800332c <__sflush_r+0xac>
 8003310:	2301      	movs	r3, #1
 8003312:	4628      	mov	r0, r5
 8003314:	47b0      	blx	r6
 8003316:	4602      	mov	r2, r0
 8003318:	1c50      	adds	r0, r2, #1
 800331a:	d1c9      	bne.n	80032b0 <__sflush_r+0x30>
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0c6      	beq.n	80032b0 <__sflush_r+0x30>
 8003322:	2b1d      	cmp	r3, #29
 8003324:	d001      	beq.n	800332a <__sflush_r+0xaa>
 8003326:	2b16      	cmp	r3, #22
 8003328:	d11d      	bne.n	8003366 <__sflush_r+0xe6>
 800332a:	602f      	str	r7, [r5, #0]
 800332c:	2000      	movs	r0, #0
 800332e:	e021      	b.n	8003374 <__sflush_r+0xf4>
 8003330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003334:	b21b      	sxth	r3, r3
 8003336:	e01a      	b.n	800336e <__sflush_r+0xee>
 8003338:	690f      	ldr	r7, [r1, #16]
 800333a:	2f00      	cmp	r7, #0
 800333c:	d0f6      	beq.n	800332c <__sflush_r+0xac>
 800333e:	0793      	lsls	r3, r2, #30
 8003340:	bf18      	it	ne
 8003342:	2300      	movne	r3, #0
 8003344:	680e      	ldr	r6, [r1, #0]
 8003346:	bf08      	it	eq
 8003348:	694b      	ldreq	r3, [r1, #20]
 800334a:	1bf6      	subs	r6, r6, r7
 800334c:	600f      	str	r7, [r1, #0]
 800334e:	608b      	str	r3, [r1, #8]
 8003350:	2e00      	cmp	r6, #0
 8003352:	ddeb      	ble.n	800332c <__sflush_r+0xac>
 8003354:	4633      	mov	r3, r6
 8003356:	463a      	mov	r2, r7
 8003358:	4628      	mov	r0, r5
 800335a:	6a21      	ldr	r1, [r4, #32]
 800335c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003360:	47e0      	blx	ip
 8003362:	2800      	cmp	r0, #0
 8003364:	dc07      	bgt.n	8003376 <__sflush_r+0xf6>
 8003366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800336a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800336e:	f04f 30ff 	mov.w	r0, #4294967295
 8003372:	81a3      	strh	r3, [r4, #12]
 8003374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003376:	4407      	add	r7, r0
 8003378:	1a36      	subs	r6, r6, r0
 800337a:	e7e9      	b.n	8003350 <__sflush_r+0xd0>
 800337c:	20400001 	.word	0x20400001

08003380 <_fflush_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	690b      	ldr	r3, [r1, #16]
 8003384:	4605      	mov	r5, r0
 8003386:	460c      	mov	r4, r1
 8003388:	b913      	cbnz	r3, 8003390 <_fflush_r+0x10>
 800338a:	2500      	movs	r5, #0
 800338c:	4628      	mov	r0, r5
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	b118      	cbz	r0, 800339a <_fflush_r+0x1a>
 8003392:	6a03      	ldr	r3, [r0, #32]
 8003394:	b90b      	cbnz	r3, 800339a <_fflush_r+0x1a>
 8003396:	f000 f8bb 	bl	8003510 <__sinit>
 800339a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f3      	beq.n	800338a <_fflush_r+0xa>
 80033a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80033a4:	07d0      	lsls	r0, r2, #31
 80033a6:	d404      	bmi.n	80033b2 <_fflush_r+0x32>
 80033a8:	0599      	lsls	r1, r3, #22
 80033aa:	d402      	bmi.n	80033b2 <_fflush_r+0x32>
 80033ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033ae:	f000 fac2 	bl	8003936 <__retarget_lock_acquire_recursive>
 80033b2:	4628      	mov	r0, r5
 80033b4:	4621      	mov	r1, r4
 80033b6:	f7ff ff63 	bl	8003280 <__sflush_r>
 80033ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033bc:	4605      	mov	r5, r0
 80033be:	07da      	lsls	r2, r3, #31
 80033c0:	d4e4      	bmi.n	800338c <_fflush_r+0xc>
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	059b      	lsls	r3, r3, #22
 80033c6:	d4e1      	bmi.n	800338c <_fflush_r+0xc>
 80033c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033ca:	f000 fab5 	bl	8003938 <__retarget_lock_release_recursive>
 80033ce:	e7dd      	b.n	800338c <_fflush_r+0xc>

080033d0 <fflush>:
 80033d0:	4601      	mov	r1, r0
 80033d2:	b920      	cbnz	r0, 80033de <fflush+0xe>
 80033d4:	4a04      	ldr	r2, [pc, #16]	@ (80033e8 <fflush+0x18>)
 80033d6:	4905      	ldr	r1, [pc, #20]	@ (80033ec <fflush+0x1c>)
 80033d8:	4805      	ldr	r0, [pc, #20]	@ (80033f0 <fflush+0x20>)
 80033da:	f000 b8b1 	b.w	8003540 <_fwalk_sglue>
 80033de:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <fflush+0x24>)
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	f7ff bfcd 	b.w	8003380 <_fflush_r>
 80033e6:	bf00      	nop
 80033e8:	2000000c 	.word	0x2000000c
 80033ec:	08003381 	.word	0x08003381
 80033f0:	2000001c 	.word	0x2000001c
 80033f4:	20000018 	.word	0x20000018

080033f8 <std>:
 80033f8:	2300      	movs	r3, #0
 80033fa:	b510      	push	{r4, lr}
 80033fc:	4604      	mov	r4, r0
 80033fe:	e9c0 3300 	strd	r3, r3, [r0]
 8003402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003406:	6083      	str	r3, [r0, #8]
 8003408:	8181      	strh	r1, [r0, #12]
 800340a:	6643      	str	r3, [r0, #100]	@ 0x64
 800340c:	81c2      	strh	r2, [r0, #14]
 800340e:	6183      	str	r3, [r0, #24]
 8003410:	4619      	mov	r1, r3
 8003412:	2208      	movs	r2, #8
 8003414:	305c      	adds	r0, #92	@ 0x5c
 8003416:	f000 fa11 	bl	800383c <memset>
 800341a:	4b0d      	ldr	r3, [pc, #52]	@ (8003450 <std+0x58>)
 800341c:	6224      	str	r4, [r4, #32]
 800341e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003420:	4b0c      	ldr	r3, [pc, #48]	@ (8003454 <std+0x5c>)
 8003422:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003424:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <std+0x60>)
 8003426:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003428:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <std+0x64>)
 800342a:	6323      	str	r3, [r4, #48]	@ 0x30
 800342c:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <std+0x68>)
 800342e:	429c      	cmp	r4, r3
 8003430:	d006      	beq.n	8003440 <std+0x48>
 8003432:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003436:	4294      	cmp	r4, r2
 8003438:	d002      	beq.n	8003440 <std+0x48>
 800343a:	33d0      	adds	r3, #208	@ 0xd0
 800343c:	429c      	cmp	r4, r3
 800343e:	d105      	bne.n	800344c <std+0x54>
 8003440:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003448:	f000 ba74 	b.w	8003934 <__retarget_lock_init_recursive>
 800344c:	bd10      	pop	{r4, pc}
 800344e:	bf00      	nop
 8003450:	0800368d 	.word	0x0800368d
 8003454:	080036af 	.word	0x080036af
 8003458:	080036e7 	.word	0x080036e7
 800345c:	0800370b 	.word	0x0800370b
 8003460:	20000240 	.word	0x20000240

08003464 <stdio_exit_handler>:
 8003464:	4a02      	ldr	r2, [pc, #8]	@ (8003470 <stdio_exit_handler+0xc>)
 8003466:	4903      	ldr	r1, [pc, #12]	@ (8003474 <stdio_exit_handler+0x10>)
 8003468:	4803      	ldr	r0, [pc, #12]	@ (8003478 <stdio_exit_handler+0x14>)
 800346a:	f000 b869 	b.w	8003540 <_fwalk_sglue>
 800346e:	bf00      	nop
 8003470:	2000000c 	.word	0x2000000c
 8003474:	08003381 	.word	0x08003381
 8003478:	2000001c 	.word	0x2000001c

0800347c <cleanup_stdio>:
 800347c:	6841      	ldr	r1, [r0, #4]
 800347e:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <cleanup_stdio+0x34>)
 8003480:	b510      	push	{r4, lr}
 8003482:	4299      	cmp	r1, r3
 8003484:	4604      	mov	r4, r0
 8003486:	d001      	beq.n	800348c <cleanup_stdio+0x10>
 8003488:	f7ff ff7a 	bl	8003380 <_fflush_r>
 800348c:	68a1      	ldr	r1, [r4, #8]
 800348e:	4b09      	ldr	r3, [pc, #36]	@ (80034b4 <cleanup_stdio+0x38>)
 8003490:	4299      	cmp	r1, r3
 8003492:	d002      	beq.n	800349a <cleanup_stdio+0x1e>
 8003494:	4620      	mov	r0, r4
 8003496:	f7ff ff73 	bl	8003380 <_fflush_r>
 800349a:	68e1      	ldr	r1, [r4, #12]
 800349c:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <cleanup_stdio+0x3c>)
 800349e:	4299      	cmp	r1, r3
 80034a0:	d004      	beq.n	80034ac <cleanup_stdio+0x30>
 80034a2:	4620      	mov	r0, r4
 80034a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a8:	f7ff bf6a 	b.w	8003380 <_fflush_r>
 80034ac:	bd10      	pop	{r4, pc}
 80034ae:	bf00      	nop
 80034b0:	20000240 	.word	0x20000240
 80034b4:	200002a8 	.word	0x200002a8
 80034b8:	20000310 	.word	0x20000310

080034bc <global_stdio_init.part.0>:
 80034bc:	b510      	push	{r4, lr}
 80034be:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <global_stdio_init.part.0+0x30>)
 80034c0:	4c0b      	ldr	r4, [pc, #44]	@ (80034f0 <global_stdio_init.part.0+0x34>)
 80034c2:	4a0c      	ldr	r2, [pc, #48]	@ (80034f4 <global_stdio_init.part.0+0x38>)
 80034c4:	4620      	mov	r0, r4
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	2104      	movs	r1, #4
 80034ca:	2200      	movs	r2, #0
 80034cc:	f7ff ff94 	bl	80033f8 <std>
 80034d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80034d4:	2201      	movs	r2, #1
 80034d6:	2109      	movs	r1, #9
 80034d8:	f7ff ff8e 	bl	80033f8 <std>
 80034dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80034e0:	2202      	movs	r2, #2
 80034e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034e6:	2112      	movs	r1, #18
 80034e8:	f7ff bf86 	b.w	80033f8 <std>
 80034ec:	20000378 	.word	0x20000378
 80034f0:	20000240 	.word	0x20000240
 80034f4:	08003465 	.word	0x08003465

080034f8 <__sfp_lock_acquire>:
 80034f8:	4801      	ldr	r0, [pc, #4]	@ (8003500 <__sfp_lock_acquire+0x8>)
 80034fa:	f000 ba1c 	b.w	8003936 <__retarget_lock_acquire_recursive>
 80034fe:	bf00      	nop
 8003500:	20000381 	.word	0x20000381

08003504 <__sfp_lock_release>:
 8003504:	4801      	ldr	r0, [pc, #4]	@ (800350c <__sfp_lock_release+0x8>)
 8003506:	f000 ba17 	b.w	8003938 <__retarget_lock_release_recursive>
 800350a:	bf00      	nop
 800350c:	20000381 	.word	0x20000381

08003510 <__sinit>:
 8003510:	b510      	push	{r4, lr}
 8003512:	4604      	mov	r4, r0
 8003514:	f7ff fff0 	bl	80034f8 <__sfp_lock_acquire>
 8003518:	6a23      	ldr	r3, [r4, #32]
 800351a:	b11b      	cbz	r3, 8003524 <__sinit+0x14>
 800351c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003520:	f7ff bff0 	b.w	8003504 <__sfp_lock_release>
 8003524:	4b04      	ldr	r3, [pc, #16]	@ (8003538 <__sinit+0x28>)
 8003526:	6223      	str	r3, [r4, #32]
 8003528:	4b04      	ldr	r3, [pc, #16]	@ (800353c <__sinit+0x2c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f5      	bne.n	800351c <__sinit+0xc>
 8003530:	f7ff ffc4 	bl	80034bc <global_stdio_init.part.0>
 8003534:	e7f2      	b.n	800351c <__sinit+0xc>
 8003536:	bf00      	nop
 8003538:	0800347d 	.word	0x0800347d
 800353c:	20000378 	.word	0x20000378

08003540 <_fwalk_sglue>:
 8003540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003544:	4607      	mov	r7, r0
 8003546:	4688      	mov	r8, r1
 8003548:	4614      	mov	r4, r2
 800354a:	2600      	movs	r6, #0
 800354c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003550:	f1b9 0901 	subs.w	r9, r9, #1
 8003554:	d505      	bpl.n	8003562 <_fwalk_sglue+0x22>
 8003556:	6824      	ldr	r4, [r4, #0]
 8003558:	2c00      	cmp	r4, #0
 800355a:	d1f7      	bne.n	800354c <_fwalk_sglue+0xc>
 800355c:	4630      	mov	r0, r6
 800355e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003562:	89ab      	ldrh	r3, [r5, #12]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d907      	bls.n	8003578 <_fwalk_sglue+0x38>
 8003568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800356c:	3301      	adds	r3, #1
 800356e:	d003      	beq.n	8003578 <_fwalk_sglue+0x38>
 8003570:	4629      	mov	r1, r5
 8003572:	4638      	mov	r0, r7
 8003574:	47c0      	blx	r8
 8003576:	4306      	orrs	r6, r0
 8003578:	3568      	adds	r5, #104	@ 0x68
 800357a:	e7e9      	b.n	8003550 <_fwalk_sglue+0x10>

0800357c <putchar>:
 800357c:	4b02      	ldr	r3, [pc, #8]	@ (8003588 <putchar+0xc>)
 800357e:	4601      	mov	r1, r0
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	6882      	ldr	r2, [r0, #8]
 8003584:	f002 be1b 	b.w	80061be <_putc_r>
 8003588:	20000018 	.word	0x20000018

0800358c <_puts_r>:
 800358c:	6a03      	ldr	r3, [r0, #32]
 800358e:	b570      	push	{r4, r5, r6, lr}
 8003590:	4605      	mov	r5, r0
 8003592:	460e      	mov	r6, r1
 8003594:	6884      	ldr	r4, [r0, #8]
 8003596:	b90b      	cbnz	r3, 800359c <_puts_r+0x10>
 8003598:	f7ff ffba 	bl	8003510 <__sinit>
 800359c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800359e:	07db      	lsls	r3, r3, #31
 80035a0:	d405      	bmi.n	80035ae <_puts_r+0x22>
 80035a2:	89a3      	ldrh	r3, [r4, #12]
 80035a4:	0598      	lsls	r0, r3, #22
 80035a6:	d402      	bmi.n	80035ae <_puts_r+0x22>
 80035a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035aa:	f000 f9c4 	bl	8003936 <__retarget_lock_acquire_recursive>
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	0719      	lsls	r1, r3, #28
 80035b2:	d502      	bpl.n	80035ba <_puts_r+0x2e>
 80035b4:	6923      	ldr	r3, [r4, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d135      	bne.n	8003626 <_puts_r+0x9a>
 80035ba:	4621      	mov	r1, r4
 80035bc:	4628      	mov	r0, r5
 80035be:	f000 f8e7 	bl	8003790 <__swsetup_r>
 80035c2:	b380      	cbz	r0, 8003626 <_puts_r+0x9a>
 80035c4:	f04f 35ff 	mov.w	r5, #4294967295
 80035c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035ca:	07da      	lsls	r2, r3, #31
 80035cc:	d405      	bmi.n	80035da <_puts_r+0x4e>
 80035ce:	89a3      	ldrh	r3, [r4, #12]
 80035d0:	059b      	lsls	r3, r3, #22
 80035d2:	d402      	bmi.n	80035da <_puts_r+0x4e>
 80035d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035d6:	f000 f9af 	bl	8003938 <__retarget_lock_release_recursive>
 80035da:	4628      	mov	r0, r5
 80035dc:	bd70      	pop	{r4, r5, r6, pc}
 80035de:	2b00      	cmp	r3, #0
 80035e0:	da04      	bge.n	80035ec <_puts_r+0x60>
 80035e2:	69a2      	ldr	r2, [r4, #24]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	dc17      	bgt.n	8003618 <_puts_r+0x8c>
 80035e8:	290a      	cmp	r1, #10
 80035ea:	d015      	beq.n	8003618 <_puts_r+0x8c>
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	6022      	str	r2, [r4, #0]
 80035f2:	7019      	strb	r1, [r3, #0]
 80035f4:	68a3      	ldr	r3, [r4, #8]
 80035f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035fa:	3b01      	subs	r3, #1
 80035fc:	60a3      	str	r3, [r4, #8]
 80035fe:	2900      	cmp	r1, #0
 8003600:	d1ed      	bne.n	80035de <_puts_r+0x52>
 8003602:	2b00      	cmp	r3, #0
 8003604:	da11      	bge.n	800362a <_puts_r+0x9e>
 8003606:	4622      	mov	r2, r4
 8003608:	210a      	movs	r1, #10
 800360a:	4628      	mov	r0, r5
 800360c:	f000 f881 	bl	8003712 <__swbuf_r>
 8003610:	3001      	adds	r0, #1
 8003612:	d0d7      	beq.n	80035c4 <_puts_r+0x38>
 8003614:	250a      	movs	r5, #10
 8003616:	e7d7      	b.n	80035c8 <_puts_r+0x3c>
 8003618:	4622      	mov	r2, r4
 800361a:	4628      	mov	r0, r5
 800361c:	f000 f879 	bl	8003712 <__swbuf_r>
 8003620:	3001      	adds	r0, #1
 8003622:	d1e7      	bne.n	80035f4 <_puts_r+0x68>
 8003624:	e7ce      	b.n	80035c4 <_puts_r+0x38>
 8003626:	3e01      	subs	r6, #1
 8003628:	e7e4      	b.n	80035f4 <_puts_r+0x68>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	6022      	str	r2, [r4, #0]
 8003630:	220a      	movs	r2, #10
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e7ee      	b.n	8003614 <_puts_r+0x88>
	...

08003638 <puts>:
 8003638:	4b02      	ldr	r3, [pc, #8]	@ (8003644 <puts+0xc>)
 800363a:	4601      	mov	r1, r0
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	f7ff bfa5 	b.w	800358c <_puts_r>
 8003642:	bf00      	nop
 8003644:	20000018 	.word	0x20000018

08003648 <siprintf>:
 8003648:	b40e      	push	{r1, r2, r3}
 800364a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800364e:	b510      	push	{r4, lr}
 8003650:	2400      	movs	r4, #0
 8003652:	b09d      	sub	sp, #116	@ 0x74
 8003654:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003656:	9002      	str	r0, [sp, #8]
 8003658:	9006      	str	r0, [sp, #24]
 800365a:	9107      	str	r1, [sp, #28]
 800365c:	9104      	str	r1, [sp, #16]
 800365e:	4809      	ldr	r0, [pc, #36]	@ (8003684 <siprintf+0x3c>)
 8003660:	4909      	ldr	r1, [pc, #36]	@ (8003688 <siprintf+0x40>)
 8003662:	f853 2b04 	ldr.w	r2, [r3], #4
 8003666:	9105      	str	r1, [sp, #20]
 8003668:	6800      	ldr	r0, [r0, #0]
 800366a:	a902      	add	r1, sp, #8
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003670:	f002 fc48 	bl	8005f04 <_svfiprintf_r>
 8003674:	9b02      	ldr	r3, [sp, #8]
 8003676:	701c      	strb	r4, [r3, #0]
 8003678:	b01d      	add	sp, #116	@ 0x74
 800367a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800367e:	b003      	add	sp, #12
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000018 	.word	0x20000018
 8003688:	ffff0208 	.word	0xffff0208

0800368c <__sread>:
 800368c:	b510      	push	{r4, lr}
 800368e:	460c      	mov	r4, r1
 8003690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003694:	f000 f900 	bl	8003898 <_read_r>
 8003698:	2800      	cmp	r0, #0
 800369a:	bfab      	itete	ge
 800369c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800369e:	89a3      	ldrhlt	r3, [r4, #12]
 80036a0:	181b      	addge	r3, r3, r0
 80036a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036a6:	bfac      	ite	ge
 80036a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036aa:	81a3      	strhlt	r3, [r4, #12]
 80036ac:	bd10      	pop	{r4, pc}

080036ae <__swrite>:
 80036ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b2:	461f      	mov	r7, r3
 80036b4:	898b      	ldrh	r3, [r1, #12]
 80036b6:	4605      	mov	r5, r0
 80036b8:	05db      	lsls	r3, r3, #23
 80036ba:	460c      	mov	r4, r1
 80036bc:	4616      	mov	r6, r2
 80036be:	d505      	bpl.n	80036cc <__swrite+0x1e>
 80036c0:	2302      	movs	r3, #2
 80036c2:	2200      	movs	r2, #0
 80036c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c8:	f000 f8d4 	bl	8003874 <_lseek_r>
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	4632      	mov	r2, r6
 80036d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036d4:	81a3      	strh	r3, [r4, #12]
 80036d6:	4628      	mov	r0, r5
 80036d8:	463b      	mov	r3, r7
 80036da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036e2:	f000 b8eb 	b.w	80038bc <_write_r>

080036e6 <__sseek>:
 80036e6:	b510      	push	{r4, lr}
 80036e8:	460c      	mov	r4, r1
 80036ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ee:	f000 f8c1 	bl	8003874 <_lseek_r>
 80036f2:	1c43      	adds	r3, r0, #1
 80036f4:	89a3      	ldrh	r3, [r4, #12]
 80036f6:	bf15      	itete	ne
 80036f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80036fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80036fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003702:	81a3      	strheq	r3, [r4, #12]
 8003704:	bf18      	it	ne
 8003706:	81a3      	strhne	r3, [r4, #12]
 8003708:	bd10      	pop	{r4, pc}

0800370a <__sclose>:
 800370a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800370e:	f000 b8a1 	b.w	8003854 <_close_r>

08003712 <__swbuf_r>:
 8003712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003714:	460e      	mov	r6, r1
 8003716:	4614      	mov	r4, r2
 8003718:	4605      	mov	r5, r0
 800371a:	b118      	cbz	r0, 8003724 <__swbuf_r+0x12>
 800371c:	6a03      	ldr	r3, [r0, #32]
 800371e:	b90b      	cbnz	r3, 8003724 <__swbuf_r+0x12>
 8003720:	f7ff fef6 	bl	8003510 <__sinit>
 8003724:	69a3      	ldr	r3, [r4, #24]
 8003726:	60a3      	str	r3, [r4, #8]
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	071a      	lsls	r2, r3, #28
 800372c:	d501      	bpl.n	8003732 <__swbuf_r+0x20>
 800372e:	6923      	ldr	r3, [r4, #16]
 8003730:	b943      	cbnz	r3, 8003744 <__swbuf_r+0x32>
 8003732:	4621      	mov	r1, r4
 8003734:	4628      	mov	r0, r5
 8003736:	f000 f82b 	bl	8003790 <__swsetup_r>
 800373a:	b118      	cbz	r0, 8003744 <__swbuf_r+0x32>
 800373c:	f04f 37ff 	mov.w	r7, #4294967295
 8003740:	4638      	mov	r0, r7
 8003742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	6922      	ldr	r2, [r4, #16]
 8003748:	b2f6      	uxtb	r6, r6
 800374a:	1a98      	subs	r0, r3, r2
 800374c:	6963      	ldr	r3, [r4, #20]
 800374e:	4637      	mov	r7, r6
 8003750:	4283      	cmp	r3, r0
 8003752:	dc05      	bgt.n	8003760 <__swbuf_r+0x4e>
 8003754:	4621      	mov	r1, r4
 8003756:	4628      	mov	r0, r5
 8003758:	f7ff fe12 	bl	8003380 <_fflush_r>
 800375c:	2800      	cmp	r0, #0
 800375e:	d1ed      	bne.n	800373c <__swbuf_r+0x2a>
 8003760:	68a3      	ldr	r3, [r4, #8]
 8003762:	3b01      	subs	r3, #1
 8003764:	60a3      	str	r3, [r4, #8]
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	6022      	str	r2, [r4, #0]
 800376c:	701e      	strb	r6, [r3, #0]
 800376e:	6962      	ldr	r2, [r4, #20]
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	429a      	cmp	r2, r3
 8003774:	d004      	beq.n	8003780 <__swbuf_r+0x6e>
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	07db      	lsls	r3, r3, #31
 800377a:	d5e1      	bpl.n	8003740 <__swbuf_r+0x2e>
 800377c:	2e0a      	cmp	r6, #10
 800377e:	d1df      	bne.n	8003740 <__swbuf_r+0x2e>
 8003780:	4621      	mov	r1, r4
 8003782:	4628      	mov	r0, r5
 8003784:	f7ff fdfc 	bl	8003380 <_fflush_r>
 8003788:	2800      	cmp	r0, #0
 800378a:	d0d9      	beq.n	8003740 <__swbuf_r+0x2e>
 800378c:	e7d6      	b.n	800373c <__swbuf_r+0x2a>
	...

08003790 <__swsetup_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	4b29      	ldr	r3, [pc, #164]	@ (8003838 <__swsetup_r+0xa8>)
 8003794:	4605      	mov	r5, r0
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	460c      	mov	r4, r1
 800379a:	b118      	cbz	r0, 80037a4 <__swsetup_r+0x14>
 800379c:	6a03      	ldr	r3, [r0, #32]
 800379e:	b90b      	cbnz	r3, 80037a4 <__swsetup_r+0x14>
 80037a0:	f7ff feb6 	bl	8003510 <__sinit>
 80037a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037a8:	0719      	lsls	r1, r3, #28
 80037aa:	d422      	bmi.n	80037f2 <__swsetup_r+0x62>
 80037ac:	06da      	lsls	r2, r3, #27
 80037ae:	d407      	bmi.n	80037c0 <__swsetup_r+0x30>
 80037b0:	2209      	movs	r2, #9
 80037b2:	602a      	str	r2, [r5, #0]
 80037b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	81a3      	strh	r3, [r4, #12]
 80037be:	e033      	b.n	8003828 <__swsetup_r+0x98>
 80037c0:	0758      	lsls	r0, r3, #29
 80037c2:	d512      	bpl.n	80037ea <__swsetup_r+0x5a>
 80037c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037c6:	b141      	cbz	r1, 80037da <__swsetup_r+0x4a>
 80037c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037cc:	4299      	cmp	r1, r3
 80037ce:	d002      	beq.n	80037d6 <__swsetup_r+0x46>
 80037d0:	4628      	mov	r0, r5
 80037d2:	f000 ff21 	bl	8004618 <_free_r>
 80037d6:	2300      	movs	r3, #0
 80037d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80037e0:	81a3      	strh	r3, [r4, #12]
 80037e2:	2300      	movs	r3, #0
 80037e4:	6063      	str	r3, [r4, #4]
 80037e6:	6923      	ldr	r3, [r4, #16]
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	89a3      	ldrh	r3, [r4, #12]
 80037ec:	f043 0308 	orr.w	r3, r3, #8
 80037f0:	81a3      	strh	r3, [r4, #12]
 80037f2:	6923      	ldr	r3, [r4, #16]
 80037f4:	b94b      	cbnz	r3, 800380a <__swsetup_r+0x7a>
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80037fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003800:	d003      	beq.n	800380a <__swsetup_r+0x7a>
 8003802:	4621      	mov	r1, r4
 8003804:	4628      	mov	r0, r5
 8003806:	f002 fc9e 	bl	8006146 <__smakebuf_r>
 800380a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800380e:	f013 0201 	ands.w	r2, r3, #1
 8003812:	d00a      	beq.n	800382a <__swsetup_r+0x9a>
 8003814:	2200      	movs	r2, #0
 8003816:	60a2      	str	r2, [r4, #8]
 8003818:	6962      	ldr	r2, [r4, #20]
 800381a:	4252      	negs	r2, r2
 800381c:	61a2      	str	r2, [r4, #24]
 800381e:	6922      	ldr	r2, [r4, #16]
 8003820:	b942      	cbnz	r2, 8003834 <__swsetup_r+0xa4>
 8003822:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003826:	d1c5      	bne.n	80037b4 <__swsetup_r+0x24>
 8003828:	bd38      	pop	{r3, r4, r5, pc}
 800382a:	0799      	lsls	r1, r3, #30
 800382c:	bf58      	it	pl
 800382e:	6962      	ldrpl	r2, [r4, #20]
 8003830:	60a2      	str	r2, [r4, #8]
 8003832:	e7f4      	b.n	800381e <__swsetup_r+0x8e>
 8003834:	2000      	movs	r0, #0
 8003836:	e7f7      	b.n	8003828 <__swsetup_r+0x98>
 8003838:	20000018 	.word	0x20000018

0800383c <memset>:
 800383c:	4603      	mov	r3, r0
 800383e:	4402      	add	r2, r0
 8003840:	4293      	cmp	r3, r2
 8003842:	d100      	bne.n	8003846 <memset+0xa>
 8003844:	4770      	bx	lr
 8003846:	f803 1b01 	strb.w	r1, [r3], #1
 800384a:	e7f9      	b.n	8003840 <memset+0x4>

0800384c <_localeconv_r>:
 800384c:	4800      	ldr	r0, [pc, #0]	@ (8003850 <_localeconv_r+0x4>)
 800384e:	4770      	bx	lr
 8003850:	20000158 	.word	0x20000158

08003854 <_close_r>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	2300      	movs	r3, #0
 8003858:	4d05      	ldr	r5, [pc, #20]	@ (8003870 <_close_r+0x1c>)
 800385a:	4604      	mov	r4, r0
 800385c:	4608      	mov	r0, r1
 800385e:	602b      	str	r3, [r5, #0]
 8003860:	f7fd fbf9 	bl	8001056 <_close>
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	d102      	bne.n	800386e <_close_r+0x1a>
 8003868:	682b      	ldr	r3, [r5, #0]
 800386a:	b103      	cbz	r3, 800386e <_close_r+0x1a>
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	bd38      	pop	{r3, r4, r5, pc}
 8003870:	2000037c 	.word	0x2000037c

08003874 <_lseek_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4604      	mov	r4, r0
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	2200      	movs	r2, #0
 800387e:	4d05      	ldr	r5, [pc, #20]	@ (8003894 <_lseek_r+0x20>)
 8003880:	602a      	str	r2, [r5, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	f7fd fc0b 	bl	800109e <_lseek>
 8003888:	1c43      	adds	r3, r0, #1
 800388a:	d102      	bne.n	8003892 <_lseek_r+0x1e>
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	b103      	cbz	r3, 8003892 <_lseek_r+0x1e>
 8003890:	6023      	str	r3, [r4, #0]
 8003892:	bd38      	pop	{r3, r4, r5, pc}
 8003894:	2000037c 	.word	0x2000037c

08003898 <_read_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4604      	mov	r4, r0
 800389c:	4608      	mov	r0, r1
 800389e:	4611      	mov	r1, r2
 80038a0:	2200      	movs	r2, #0
 80038a2:	4d05      	ldr	r5, [pc, #20]	@ (80038b8 <_read_r+0x20>)
 80038a4:	602a      	str	r2, [r5, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f7fd fb9c 	bl	8000fe4 <_read>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d102      	bne.n	80038b6 <_read_r+0x1e>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	b103      	cbz	r3, 80038b6 <_read_r+0x1e>
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	bd38      	pop	{r3, r4, r5, pc}
 80038b8:	2000037c 	.word	0x2000037c

080038bc <_write_r>:
 80038bc:	b538      	push	{r3, r4, r5, lr}
 80038be:	4604      	mov	r4, r0
 80038c0:	4608      	mov	r0, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	2200      	movs	r2, #0
 80038c6:	4d05      	ldr	r5, [pc, #20]	@ (80038dc <_write_r+0x20>)
 80038c8:	602a      	str	r2, [r5, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f7fd fba7 	bl	800101e <_write>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d102      	bne.n	80038da <_write_r+0x1e>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	b103      	cbz	r3, 80038da <_write_r+0x1e>
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	bd38      	pop	{r3, r4, r5, pc}
 80038dc:	2000037c 	.word	0x2000037c

080038e0 <__errno>:
 80038e0:	4b01      	ldr	r3, [pc, #4]	@ (80038e8 <__errno+0x8>)
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000018 	.word	0x20000018

080038ec <__libc_init_array>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	2600      	movs	r6, #0
 80038f0:	4d0c      	ldr	r5, [pc, #48]	@ (8003924 <__libc_init_array+0x38>)
 80038f2:	4c0d      	ldr	r4, [pc, #52]	@ (8003928 <__libc_init_array+0x3c>)
 80038f4:	1b64      	subs	r4, r4, r5
 80038f6:	10a4      	asrs	r4, r4, #2
 80038f8:	42a6      	cmp	r6, r4
 80038fa:	d109      	bne.n	8003910 <__libc_init_array+0x24>
 80038fc:	f003 fa62 	bl	8006dc4 <_init>
 8003900:	2600      	movs	r6, #0
 8003902:	4d0a      	ldr	r5, [pc, #40]	@ (800392c <__libc_init_array+0x40>)
 8003904:	4c0a      	ldr	r4, [pc, #40]	@ (8003930 <__libc_init_array+0x44>)
 8003906:	1b64      	subs	r4, r4, r5
 8003908:	10a4      	asrs	r4, r4, #2
 800390a:	42a6      	cmp	r6, r4
 800390c:	d105      	bne.n	800391a <__libc_init_array+0x2e>
 800390e:	bd70      	pop	{r4, r5, r6, pc}
 8003910:	f855 3b04 	ldr.w	r3, [r5], #4
 8003914:	4798      	blx	r3
 8003916:	3601      	adds	r6, #1
 8003918:	e7ee      	b.n	80038f8 <__libc_init_array+0xc>
 800391a:	f855 3b04 	ldr.w	r3, [r5], #4
 800391e:	4798      	blx	r3
 8003920:	3601      	adds	r6, #1
 8003922:	e7f2      	b.n	800390a <__libc_init_array+0x1e>
 8003924:	08007244 	.word	0x08007244
 8003928:	08007244 	.word	0x08007244
 800392c:	08007244 	.word	0x08007244
 8003930:	08007248 	.word	0x08007248

08003934 <__retarget_lock_init_recursive>:
 8003934:	4770      	bx	lr

08003936 <__retarget_lock_acquire_recursive>:
 8003936:	4770      	bx	lr

08003938 <__retarget_lock_release_recursive>:
 8003938:	4770      	bx	lr

0800393a <memchr>:
 800393a:	4603      	mov	r3, r0
 800393c:	b510      	push	{r4, lr}
 800393e:	b2c9      	uxtb	r1, r1
 8003940:	4402      	add	r2, r0
 8003942:	4293      	cmp	r3, r2
 8003944:	4618      	mov	r0, r3
 8003946:	d101      	bne.n	800394c <memchr+0x12>
 8003948:	2000      	movs	r0, #0
 800394a:	e003      	b.n	8003954 <memchr+0x1a>
 800394c:	7804      	ldrb	r4, [r0, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	428c      	cmp	r4, r1
 8003952:	d1f6      	bne.n	8003942 <memchr+0x8>
 8003954:	bd10      	pop	{r4, pc}
	...

08003958 <nanf>:
 8003958:	4800      	ldr	r0, [pc, #0]	@ (800395c <nanf+0x4>)
 800395a:	4770      	bx	lr
 800395c:	7fc00000 	.word	0x7fc00000

08003960 <quorem>:
 8003960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003964:	6903      	ldr	r3, [r0, #16]
 8003966:	690c      	ldr	r4, [r1, #16]
 8003968:	4607      	mov	r7, r0
 800396a:	42a3      	cmp	r3, r4
 800396c:	db7e      	blt.n	8003a6c <quorem+0x10c>
 800396e:	3c01      	subs	r4, #1
 8003970:	00a3      	lsls	r3, r4, #2
 8003972:	f100 0514 	add.w	r5, r0, #20
 8003976:	f101 0814 	add.w	r8, r1, #20
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003986:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800398a:	3301      	adds	r3, #1
 800398c:	429a      	cmp	r2, r3
 800398e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003992:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003996:	d32e      	bcc.n	80039f6 <quorem+0x96>
 8003998:	f04f 0a00 	mov.w	sl, #0
 800399c:	46c4      	mov	ip, r8
 800399e:	46ae      	mov	lr, r5
 80039a0:	46d3      	mov	fp, sl
 80039a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80039a6:	b298      	uxth	r0, r3
 80039a8:	fb06 a000 	mla	r0, r6, r0, sl
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	0c02      	lsrs	r2, r0, #16
 80039b0:	fb06 2303 	mla	r3, r6, r3, r2
 80039b4:	f8de 2000 	ldr.w	r2, [lr]
 80039b8:	b280      	uxth	r0, r0
 80039ba:	b292      	uxth	r2, r2
 80039bc:	1a12      	subs	r2, r2, r0
 80039be:	445a      	add	r2, fp
 80039c0:	f8de 0000 	ldr.w	r0, [lr]
 80039c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80039ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80039d2:	b292      	uxth	r2, r2
 80039d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80039d8:	45e1      	cmp	r9, ip
 80039da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80039de:	f84e 2b04 	str.w	r2, [lr], #4
 80039e2:	d2de      	bcs.n	80039a2 <quorem+0x42>
 80039e4:	9b00      	ldr	r3, [sp, #0]
 80039e6:	58eb      	ldr	r3, [r5, r3]
 80039e8:	b92b      	cbnz	r3, 80039f6 <quorem+0x96>
 80039ea:	9b01      	ldr	r3, [sp, #4]
 80039ec:	3b04      	subs	r3, #4
 80039ee:	429d      	cmp	r5, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	d32f      	bcc.n	8003a54 <quorem+0xf4>
 80039f4:	613c      	str	r4, [r7, #16]
 80039f6:	4638      	mov	r0, r7
 80039f8:	f001 f9c8 	bl	8004d8c <__mcmp>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	db25      	blt.n	8003a4c <quorem+0xec>
 8003a00:	4629      	mov	r1, r5
 8003a02:	2000      	movs	r0, #0
 8003a04:	f858 2b04 	ldr.w	r2, [r8], #4
 8003a08:	f8d1 c000 	ldr.w	ip, [r1]
 8003a0c:	fa1f fe82 	uxth.w	lr, r2
 8003a10:	fa1f f38c 	uxth.w	r3, ip
 8003a14:	eba3 030e 	sub.w	r3, r3, lr
 8003a18:	4403      	add	r3, r0
 8003a1a:	0c12      	lsrs	r2, r2, #16
 8003a1c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003a20:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a2a:	45c1      	cmp	r9, r8
 8003a2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003a30:	f841 3b04 	str.w	r3, [r1], #4
 8003a34:	d2e6      	bcs.n	8003a04 <quorem+0xa4>
 8003a36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a3e:	b922      	cbnz	r2, 8003a4a <quorem+0xea>
 8003a40:	3b04      	subs	r3, #4
 8003a42:	429d      	cmp	r5, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	d30b      	bcc.n	8003a60 <quorem+0x100>
 8003a48:	613c      	str	r4, [r7, #16]
 8003a4a:	3601      	adds	r6, #1
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	b003      	add	sp, #12
 8003a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	3b04      	subs	r3, #4
 8003a58:	2a00      	cmp	r2, #0
 8003a5a:	d1cb      	bne.n	80039f4 <quorem+0x94>
 8003a5c:	3c01      	subs	r4, #1
 8003a5e:	e7c6      	b.n	80039ee <quorem+0x8e>
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	3b04      	subs	r3, #4
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	d1ef      	bne.n	8003a48 <quorem+0xe8>
 8003a68:	3c01      	subs	r4, #1
 8003a6a:	e7ea      	b.n	8003a42 <quorem+0xe2>
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	e7ee      	b.n	8003a4e <quorem+0xee>

08003a70 <_dtoa_r>:
 8003a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a74:	4614      	mov	r4, r2
 8003a76:	461d      	mov	r5, r3
 8003a78:	69c7      	ldr	r7, [r0, #28]
 8003a7a:	b097      	sub	sp, #92	@ 0x5c
 8003a7c:	4681      	mov	r9, r0
 8003a7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003a82:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003a84:	b97f      	cbnz	r7, 8003aa6 <_dtoa_r+0x36>
 8003a86:	2010      	movs	r0, #16
 8003a88:	f000 fe0e 	bl	80046a8 <malloc>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	f8c9 001c 	str.w	r0, [r9, #28]
 8003a92:	b920      	cbnz	r0, 8003a9e <_dtoa_r+0x2e>
 8003a94:	21ef      	movs	r1, #239	@ 0xef
 8003a96:	4bac      	ldr	r3, [pc, #688]	@ (8003d48 <_dtoa_r+0x2d8>)
 8003a98:	48ac      	ldr	r0, [pc, #688]	@ (8003d4c <_dtoa_r+0x2dc>)
 8003a9a:	f002 fc37 	bl	800630c <__assert_func>
 8003a9e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003aa2:	6007      	str	r7, [r0, #0]
 8003aa4:	60c7      	str	r7, [r0, #12]
 8003aa6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003aaa:	6819      	ldr	r1, [r3, #0]
 8003aac:	b159      	cbz	r1, 8003ac6 <_dtoa_r+0x56>
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	4093      	lsls	r3, r2
 8003ab4:	604a      	str	r2, [r1, #4]
 8003ab6:	608b      	str	r3, [r1, #8]
 8003ab8:	4648      	mov	r0, r9
 8003aba:	f000 feeb 	bl	8004894 <_Bfree>
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	1e2b      	subs	r3, r5, #0
 8003ac8:	bfaf      	iteee	ge
 8003aca:	2300      	movge	r3, #0
 8003acc:	2201      	movlt	r2, #1
 8003ace:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003ad2:	9307      	strlt	r3, [sp, #28]
 8003ad4:	bfa8      	it	ge
 8003ad6:	6033      	strge	r3, [r6, #0]
 8003ad8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003adc:	4b9c      	ldr	r3, [pc, #624]	@ (8003d50 <_dtoa_r+0x2e0>)
 8003ade:	bfb8      	it	lt
 8003ae0:	6032      	strlt	r2, [r6, #0]
 8003ae2:	ea33 0308 	bics.w	r3, r3, r8
 8003ae6:	d112      	bne.n	8003b0e <_dtoa_r+0x9e>
 8003ae8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003aec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003af4:	4323      	orrs	r3, r4
 8003af6:	f000 855e 	beq.w	80045b6 <_dtoa_r+0xb46>
 8003afa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003afc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003d54 <_dtoa_r+0x2e4>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8560 	beq.w	80045c6 <_dtoa_r+0xb56>
 8003b06:	f10a 0303 	add.w	r3, sl, #3
 8003b0a:	f000 bd5a 	b.w	80045c2 <_dtoa_r+0xb52>
 8003b0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b12:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f7fc ff43 	bl	80009a8 <__aeabi_dcmpeq>
 8003b22:	4607      	mov	r7, r0
 8003b24:	b158      	cbz	r0, 8003b3e <_dtoa_r+0xce>
 8003b26:	2301      	movs	r3, #1
 8003b28:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003b2e:	b113      	cbz	r3, 8003b36 <_dtoa_r+0xc6>
 8003b30:	4b89      	ldr	r3, [pc, #548]	@ (8003d58 <_dtoa_r+0x2e8>)
 8003b32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8003d5c <_dtoa_r+0x2ec>
 8003b3a:	f000 bd44 	b.w	80045c6 <_dtoa_r+0xb56>
 8003b3e:	ab14      	add	r3, sp, #80	@ 0x50
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	ab15      	add	r3, sp, #84	@ 0x54
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	4648      	mov	r0, r9
 8003b48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003b4c:	f001 fa36 	bl	8004fbc <__d2b>
 8003b50:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003b54:	9003      	str	r0, [sp, #12]
 8003b56:	2e00      	cmp	r6, #0
 8003b58:	d078      	beq.n	8003c4c <_dtoa_r+0x1dc>
 8003b5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b60:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b68:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003b6c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003b70:	9712      	str	r7, [sp, #72]	@ 0x48
 8003b72:	4619      	mov	r1, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	4b7a      	ldr	r3, [pc, #488]	@ (8003d60 <_dtoa_r+0x2f0>)
 8003b78:	f7fc faf6 	bl	8000168 <__aeabi_dsub>
 8003b7c:	a36c      	add	r3, pc, #432	@ (adr r3, 8003d30 <_dtoa_r+0x2c0>)
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f7fc fca9 	bl	80004d8 <__aeabi_dmul>
 8003b86:	a36c      	add	r3, pc, #432	@ (adr r3, 8003d38 <_dtoa_r+0x2c8>)
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f7fc faee 	bl	800016c <__adddf3>
 8003b90:	4604      	mov	r4, r0
 8003b92:	4630      	mov	r0, r6
 8003b94:	460d      	mov	r5, r1
 8003b96:	f7fc fc35 	bl	8000404 <__aeabi_i2d>
 8003b9a:	a369      	add	r3, pc, #420	@ (adr r3, 8003d40 <_dtoa_r+0x2d0>)
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f7fc fc9a 	bl	80004d8 <__aeabi_dmul>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4620      	mov	r0, r4
 8003baa:	4629      	mov	r1, r5
 8003bac:	f7fc fade 	bl	800016c <__adddf3>
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	460d      	mov	r5, r1
 8003bb4:	f7fc ff40 	bl	8000a38 <__aeabi_d2iz>
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4607      	mov	r7, r0
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	f7fc fefb 	bl	80009bc <__aeabi_dcmplt>
 8003bc6:	b140      	cbz	r0, 8003bda <_dtoa_r+0x16a>
 8003bc8:	4638      	mov	r0, r7
 8003bca:	f7fc fc1b 	bl	8000404 <__aeabi_i2d>
 8003bce:	4622      	mov	r2, r4
 8003bd0:	462b      	mov	r3, r5
 8003bd2:	f7fc fee9 	bl	80009a8 <__aeabi_dcmpeq>
 8003bd6:	b900      	cbnz	r0, 8003bda <_dtoa_r+0x16a>
 8003bd8:	3f01      	subs	r7, #1
 8003bda:	2f16      	cmp	r7, #22
 8003bdc:	d854      	bhi.n	8003c88 <_dtoa_r+0x218>
 8003bde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003be2:	4b60      	ldr	r3, [pc, #384]	@ (8003d64 <_dtoa_r+0x2f4>)
 8003be4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f7fc fee6 	bl	80009bc <__aeabi_dcmplt>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d04b      	beq.n	8003c8c <_dtoa_r+0x21c>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	3f01      	subs	r7, #1
 8003bf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003bfa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003bfc:	1b9b      	subs	r3, r3, r6
 8003bfe:	1e5a      	subs	r2, r3, #1
 8003c00:	bf49      	itett	mi
 8003c02:	f1c3 0301 	rsbmi	r3, r3, #1
 8003c06:	2300      	movpl	r3, #0
 8003c08:	9304      	strmi	r3, [sp, #16]
 8003c0a:	2300      	movmi	r3, #0
 8003c0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c0e:	bf54      	ite	pl
 8003c10:	9304      	strpl	r3, [sp, #16]
 8003c12:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003c14:	2f00      	cmp	r7, #0
 8003c16:	db3b      	blt.n	8003c90 <_dtoa_r+0x220>
 8003c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c1a:	970e      	str	r7, [sp, #56]	@ 0x38
 8003c1c:	443b      	add	r3, r7
 8003c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c20:	2300      	movs	r3, #0
 8003c22:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003c26:	2b09      	cmp	r3, #9
 8003c28:	d865      	bhi.n	8003cf6 <_dtoa_r+0x286>
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	bfc4      	itt	gt
 8003c2e:	3b04      	subgt	r3, #4
 8003c30:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003c32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003c34:	bfc8      	it	gt
 8003c36:	2400      	movgt	r4, #0
 8003c38:	f1a3 0302 	sub.w	r3, r3, #2
 8003c3c:	bfd8      	it	le
 8003c3e:	2401      	movle	r4, #1
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d864      	bhi.n	8003d0e <_dtoa_r+0x29e>
 8003c44:	e8df f003 	tbb	[pc, r3]
 8003c48:	2c385553 	.word	0x2c385553
 8003c4c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003c50:	441e      	add	r6, r3
 8003c52:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	bfc1      	itttt	gt
 8003c5a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003c5e:	fa08 f803 	lslgt.w	r8, r8, r3
 8003c62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003c66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003c6a:	bfd6      	itet	le
 8003c6c:	f1c3 0320 	rsble	r3, r3, #32
 8003c70:	ea48 0003 	orrgt.w	r0, r8, r3
 8003c74:	fa04 f003 	lslle.w	r0, r4, r3
 8003c78:	f7fc fbb4 	bl	80003e4 <__aeabi_ui2d>
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003c82:	3e01      	subs	r6, #1
 8003c84:	9212      	str	r2, [sp, #72]	@ 0x48
 8003c86:	e774      	b.n	8003b72 <_dtoa_r+0x102>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e7b5      	b.n	8003bf8 <_dtoa_r+0x188>
 8003c8c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003c8e:	e7b4      	b.n	8003bfa <_dtoa_r+0x18a>
 8003c90:	9b04      	ldr	r3, [sp, #16]
 8003c92:	1bdb      	subs	r3, r3, r7
 8003c94:	9304      	str	r3, [sp, #16]
 8003c96:	427b      	negs	r3, r7
 8003c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8003c9e:	e7c1      	b.n	8003c24 <_dtoa_r+0x1b4>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ca4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ca6:	eb07 0b03 	add.w	fp, r7, r3
 8003caa:	f10b 0301 	add.w	r3, fp, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	9308      	str	r3, [sp, #32]
 8003cb2:	bfb8      	it	lt
 8003cb4:	2301      	movlt	r3, #1
 8003cb6:	e006      	b.n	8003cc6 <_dtoa_r+0x256>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003cbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	dd28      	ble.n	8003d14 <_dtoa_r+0x2a4>
 8003cc2:	469b      	mov	fp, r3
 8003cc4:	9308      	str	r3, [sp, #32]
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	2204      	movs	r2, #4
 8003cca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003cce:	f102 0514 	add.w	r5, r2, #20
 8003cd2:	429d      	cmp	r5, r3
 8003cd4:	d926      	bls.n	8003d24 <_dtoa_r+0x2b4>
 8003cd6:	6041      	str	r1, [r0, #4]
 8003cd8:	4648      	mov	r0, r9
 8003cda:	f000 fd9b 	bl	8004814 <_Balloc>
 8003cde:	4682      	mov	sl, r0
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d143      	bne.n	8003d6c <_dtoa_r+0x2fc>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	f240 11af 	movw	r1, #431	@ 0x1af
 8003cea:	4b1f      	ldr	r3, [pc, #124]	@ (8003d68 <_dtoa_r+0x2f8>)
 8003cec:	e6d4      	b.n	8003a98 <_dtoa_r+0x28>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e7e3      	b.n	8003cba <_dtoa_r+0x24a>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e7d5      	b.n	8003ca2 <_dtoa_r+0x232>
 8003cf6:	2401      	movs	r4, #1
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003cfc:	9320      	str	r3, [sp, #128]	@ 0x80
 8003cfe:	f04f 3bff 	mov.w	fp, #4294967295
 8003d02:	2200      	movs	r2, #0
 8003d04:	2312      	movs	r3, #18
 8003d06:	f8cd b020 	str.w	fp, [sp, #32]
 8003d0a:	9221      	str	r2, [sp, #132]	@ 0x84
 8003d0c:	e7db      	b.n	8003cc6 <_dtoa_r+0x256>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d12:	e7f4      	b.n	8003cfe <_dtoa_r+0x28e>
 8003d14:	f04f 0b01 	mov.w	fp, #1
 8003d18:	465b      	mov	r3, fp
 8003d1a:	f8cd b020 	str.w	fp, [sp, #32]
 8003d1e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003d22:	e7d0      	b.n	8003cc6 <_dtoa_r+0x256>
 8003d24:	3101      	adds	r1, #1
 8003d26:	0052      	lsls	r2, r2, #1
 8003d28:	e7d1      	b.n	8003cce <_dtoa_r+0x25e>
 8003d2a:	bf00      	nop
 8003d2c:	f3af 8000 	nop.w
 8003d30:	636f4361 	.word	0x636f4361
 8003d34:	3fd287a7 	.word	0x3fd287a7
 8003d38:	8b60c8b3 	.word	0x8b60c8b3
 8003d3c:	3fc68a28 	.word	0x3fc68a28
 8003d40:	509f79fb 	.word	0x509f79fb
 8003d44:	3fd34413 	.word	0x3fd34413
 8003d48:	08006e58 	.word	0x08006e58
 8003d4c:	08006e6f 	.word	0x08006e6f
 8003d50:	7ff00000 	.word	0x7ff00000
 8003d54:	08006e54 	.word	0x08006e54
 8003d58:	08006e23 	.word	0x08006e23
 8003d5c:	08006e22 	.word	0x08006e22
 8003d60:	3ff80000 	.word	0x3ff80000
 8003d64:	08007020 	.word	0x08007020
 8003d68:	08006ec7 	.word	0x08006ec7
 8003d6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d70:	6018      	str	r0, [r3, #0]
 8003d72:	9b08      	ldr	r3, [sp, #32]
 8003d74:	2b0e      	cmp	r3, #14
 8003d76:	f200 80a1 	bhi.w	8003ebc <_dtoa_r+0x44c>
 8003d7a:	2c00      	cmp	r4, #0
 8003d7c:	f000 809e 	beq.w	8003ebc <_dtoa_r+0x44c>
 8003d80:	2f00      	cmp	r7, #0
 8003d82:	dd33      	ble.n	8003dec <_dtoa_r+0x37c>
 8003d84:	4b9c      	ldr	r3, [pc, #624]	@ (8003ff8 <_dtoa_r+0x588>)
 8003d86:	f007 020f 	and.w	r2, r7, #15
 8003d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d8e:	05f8      	lsls	r0, r7, #23
 8003d90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d94:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8003d98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003d9c:	d516      	bpl.n	8003dcc <_dtoa_r+0x35c>
 8003d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003da2:	4b96      	ldr	r3, [pc, #600]	@ (8003ffc <_dtoa_r+0x58c>)
 8003da4:	2603      	movs	r6, #3
 8003da6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003daa:	f7fc fcbf 	bl	800072c <__aeabi_ddiv>
 8003dae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003db2:	f004 040f 	and.w	r4, r4, #15
 8003db6:	4d91      	ldr	r5, [pc, #580]	@ (8003ffc <_dtoa_r+0x58c>)
 8003db8:	b954      	cbnz	r4, 8003dd0 <_dtoa_r+0x360>
 8003dba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dc2:	f7fc fcb3 	bl	800072c <__aeabi_ddiv>
 8003dc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003dca:	e028      	b.n	8003e1e <_dtoa_r+0x3ae>
 8003dcc:	2602      	movs	r6, #2
 8003dce:	e7f2      	b.n	8003db6 <_dtoa_r+0x346>
 8003dd0:	07e1      	lsls	r1, r4, #31
 8003dd2:	d508      	bpl.n	8003de6 <_dtoa_r+0x376>
 8003dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003dd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ddc:	f7fc fb7c 	bl	80004d8 <__aeabi_dmul>
 8003de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003de4:	3601      	adds	r6, #1
 8003de6:	1064      	asrs	r4, r4, #1
 8003de8:	3508      	adds	r5, #8
 8003dea:	e7e5      	b.n	8003db8 <_dtoa_r+0x348>
 8003dec:	f000 80af 	beq.w	8003f4e <_dtoa_r+0x4de>
 8003df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003df4:	427c      	negs	r4, r7
 8003df6:	4b80      	ldr	r3, [pc, #512]	@ (8003ff8 <_dtoa_r+0x588>)
 8003df8:	f004 020f 	and.w	r2, r4, #15
 8003dfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	f7fc fb68 	bl	80004d8 <__aeabi_dmul>
 8003e08:	2602      	movs	r6, #2
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003e10:	4d7a      	ldr	r5, [pc, #488]	@ (8003ffc <_dtoa_r+0x58c>)
 8003e12:	1124      	asrs	r4, r4, #4
 8003e14:	2c00      	cmp	r4, #0
 8003e16:	f040 808f 	bne.w	8003f38 <_dtoa_r+0x4c8>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1d3      	bne.n	8003dc6 <_dtoa_r+0x356>
 8003e1e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003e22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8094 	beq.w	8003f52 <_dtoa_r+0x4e2>
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	4629      	mov	r1, r5
 8003e30:	4b73      	ldr	r3, [pc, #460]	@ (8004000 <_dtoa_r+0x590>)
 8003e32:	f7fc fdc3 	bl	80009bc <__aeabi_dcmplt>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	f000 808b 	beq.w	8003f52 <_dtoa_r+0x4e2>
 8003e3c:	9b08      	ldr	r3, [sp, #32]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8087 	beq.w	8003f52 <_dtoa_r+0x4e2>
 8003e44:	f1bb 0f00 	cmp.w	fp, #0
 8003e48:	dd34      	ble.n	8003eb4 <_dtoa_r+0x444>
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	4629      	mov	r1, r5
 8003e50:	4b6c      	ldr	r3, [pc, #432]	@ (8004004 <_dtoa_r+0x594>)
 8003e52:	f7fc fb41 	bl	80004d8 <__aeabi_dmul>
 8003e56:	465c      	mov	r4, fp
 8003e58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003e5c:	f107 38ff 	add.w	r8, r7, #4294967295
 8003e60:	3601      	adds	r6, #1
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7fc face 	bl	8000404 <__aeabi_i2d>
 8003e68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e6c:	f7fc fb34 	bl	80004d8 <__aeabi_dmul>
 8003e70:	2200      	movs	r2, #0
 8003e72:	4b65      	ldr	r3, [pc, #404]	@ (8004008 <_dtoa_r+0x598>)
 8003e74:	f7fc f97a 	bl	800016c <__adddf3>
 8003e78:	4605      	mov	r5, r0
 8003e7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003e7e:	2c00      	cmp	r4, #0
 8003e80:	d16a      	bne.n	8003f58 <_dtoa_r+0x4e8>
 8003e82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e86:	2200      	movs	r2, #0
 8003e88:	4b60      	ldr	r3, [pc, #384]	@ (800400c <_dtoa_r+0x59c>)
 8003e8a:	f7fc f96d 	bl	8000168 <__aeabi_dsub>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e96:	462a      	mov	r2, r5
 8003e98:	4633      	mov	r3, r6
 8003e9a:	f7fc fdad 	bl	80009f8 <__aeabi_dcmpgt>
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	f040 8298 	bne.w	80043d4 <_dtoa_r+0x964>
 8003ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ea8:	462a      	mov	r2, r5
 8003eaa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003eae:	f7fc fd85 	bl	80009bc <__aeabi_dcmplt>
 8003eb2:	bb38      	cbnz	r0, 8003f04 <_dtoa_r+0x494>
 8003eb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003eb8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003ebc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f2c0 8157 	blt.w	8004172 <_dtoa_r+0x702>
 8003ec4:	2f0e      	cmp	r7, #14
 8003ec6:	f300 8154 	bgt.w	8004172 <_dtoa_r+0x702>
 8003eca:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff8 <_dtoa_r+0x588>)
 8003ecc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003ed0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ed4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003ed8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f280 80e5 	bge.w	80040aa <_dtoa_r+0x63a>
 8003ee0:	9b08      	ldr	r3, [sp, #32]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f300 80e1 	bgt.w	80040aa <_dtoa_r+0x63a>
 8003ee8:	d10c      	bne.n	8003f04 <_dtoa_r+0x494>
 8003eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	4b46      	ldr	r3, [pc, #280]	@ (800400c <_dtoa_r+0x59c>)
 8003ef2:	f7fc faf1 	bl	80004d8 <__aeabi_dmul>
 8003ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003efa:	f7fc fd73 	bl	80009e4 <__aeabi_dcmpge>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	f000 8266 	beq.w	80043d0 <_dtoa_r+0x960>
 8003f04:	2400      	movs	r4, #0
 8003f06:	4625      	mov	r5, r4
 8003f08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f0a:	4656      	mov	r6, sl
 8003f0c:	ea6f 0803 	mvn.w	r8, r3
 8003f10:	2700      	movs	r7, #0
 8003f12:	4621      	mov	r1, r4
 8003f14:	4648      	mov	r0, r9
 8003f16:	f000 fcbd 	bl	8004894 <_Bfree>
 8003f1a:	2d00      	cmp	r5, #0
 8003f1c:	f000 80bd 	beq.w	800409a <_dtoa_r+0x62a>
 8003f20:	b12f      	cbz	r7, 8003f2e <_dtoa_r+0x4be>
 8003f22:	42af      	cmp	r7, r5
 8003f24:	d003      	beq.n	8003f2e <_dtoa_r+0x4be>
 8003f26:	4639      	mov	r1, r7
 8003f28:	4648      	mov	r0, r9
 8003f2a:	f000 fcb3 	bl	8004894 <_Bfree>
 8003f2e:	4629      	mov	r1, r5
 8003f30:	4648      	mov	r0, r9
 8003f32:	f000 fcaf 	bl	8004894 <_Bfree>
 8003f36:	e0b0      	b.n	800409a <_dtoa_r+0x62a>
 8003f38:	07e2      	lsls	r2, r4, #31
 8003f3a:	d505      	bpl.n	8003f48 <_dtoa_r+0x4d8>
 8003f3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f40:	f7fc faca 	bl	80004d8 <__aeabi_dmul>
 8003f44:	2301      	movs	r3, #1
 8003f46:	3601      	adds	r6, #1
 8003f48:	1064      	asrs	r4, r4, #1
 8003f4a:	3508      	adds	r5, #8
 8003f4c:	e762      	b.n	8003e14 <_dtoa_r+0x3a4>
 8003f4e:	2602      	movs	r6, #2
 8003f50:	e765      	b.n	8003e1e <_dtoa_r+0x3ae>
 8003f52:	46b8      	mov	r8, r7
 8003f54:	9c08      	ldr	r4, [sp, #32]
 8003f56:	e784      	b.n	8003e62 <_dtoa_r+0x3f2>
 8003f58:	4b27      	ldr	r3, [pc, #156]	@ (8003ff8 <_dtoa_r+0x588>)
 8003f5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003f5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003f60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f64:	4454      	add	r4, sl
 8003f66:	2900      	cmp	r1, #0
 8003f68:	d054      	beq.n	8004014 <_dtoa_r+0x5a4>
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	4928      	ldr	r1, [pc, #160]	@ (8004010 <_dtoa_r+0x5a0>)
 8003f6e:	f7fc fbdd 	bl	800072c <__aeabi_ddiv>
 8003f72:	4633      	mov	r3, r6
 8003f74:	462a      	mov	r2, r5
 8003f76:	f7fc f8f7 	bl	8000168 <__aeabi_dsub>
 8003f7a:	4656      	mov	r6, sl
 8003f7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f84:	f7fc fd58 	bl	8000a38 <__aeabi_d2iz>
 8003f88:	4605      	mov	r5, r0
 8003f8a:	f7fc fa3b 	bl	8000404 <__aeabi_i2d>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f96:	f7fc f8e7 	bl	8000168 <__aeabi_dsub>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	3530      	adds	r5, #48	@ 0x30
 8003fa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003fa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003fa8:	f806 5b01 	strb.w	r5, [r6], #1
 8003fac:	f7fc fd06 	bl	80009bc <__aeabi_dcmplt>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d172      	bne.n	800409a <_dtoa_r+0x62a>
 8003fb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003fb8:	2000      	movs	r0, #0
 8003fba:	4911      	ldr	r1, [pc, #68]	@ (8004000 <_dtoa_r+0x590>)
 8003fbc:	f7fc f8d4 	bl	8000168 <__aeabi_dsub>
 8003fc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003fc4:	f7fc fcfa 	bl	80009bc <__aeabi_dcmplt>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	f040 80b4 	bne.w	8004136 <_dtoa_r+0x6c6>
 8003fce:	42a6      	cmp	r6, r4
 8003fd0:	f43f af70 	beq.w	8003eb4 <_dtoa_r+0x444>
 8003fd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4b0a      	ldr	r3, [pc, #40]	@ (8004004 <_dtoa_r+0x594>)
 8003fdc:	f7fc fa7c 	bl	80004d8 <__aeabi_dmul>
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003fe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fea:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <_dtoa_r+0x594>)
 8003fec:	f7fc fa74 	bl	80004d8 <__aeabi_dmul>
 8003ff0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003ff4:	e7c4      	b.n	8003f80 <_dtoa_r+0x510>
 8003ff6:	bf00      	nop
 8003ff8:	08007020 	.word	0x08007020
 8003ffc:	08006ff8 	.word	0x08006ff8
 8004000:	3ff00000 	.word	0x3ff00000
 8004004:	40240000 	.word	0x40240000
 8004008:	401c0000 	.word	0x401c0000
 800400c:	40140000 	.word	0x40140000
 8004010:	3fe00000 	.word	0x3fe00000
 8004014:	4631      	mov	r1, r6
 8004016:	4628      	mov	r0, r5
 8004018:	f7fc fa5e 	bl	80004d8 <__aeabi_dmul>
 800401c:	4656      	mov	r6, sl
 800401e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004022:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004028:	f7fc fd06 	bl	8000a38 <__aeabi_d2iz>
 800402c:	4605      	mov	r5, r0
 800402e:	f7fc f9e9 	bl	8000404 <__aeabi_i2d>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800403a:	f7fc f895 	bl	8000168 <__aeabi_dsub>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	3530      	adds	r5, #48	@ 0x30
 8004044:	f806 5b01 	strb.w	r5, [r6], #1
 8004048:	42a6      	cmp	r6, r4
 800404a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	d124      	bne.n	800409e <_dtoa_r+0x62e>
 8004054:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004058:	4bae      	ldr	r3, [pc, #696]	@ (8004314 <_dtoa_r+0x8a4>)
 800405a:	f7fc f887 	bl	800016c <__adddf3>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004066:	f7fc fcc7 	bl	80009f8 <__aeabi_dcmpgt>
 800406a:	2800      	cmp	r0, #0
 800406c:	d163      	bne.n	8004136 <_dtoa_r+0x6c6>
 800406e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004072:	2000      	movs	r0, #0
 8004074:	49a7      	ldr	r1, [pc, #668]	@ (8004314 <_dtoa_r+0x8a4>)
 8004076:	f7fc f877 	bl	8000168 <__aeabi_dsub>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004082:	f7fc fc9b 	bl	80009bc <__aeabi_dcmplt>
 8004086:	2800      	cmp	r0, #0
 8004088:	f43f af14 	beq.w	8003eb4 <_dtoa_r+0x444>
 800408c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800408e:	1e73      	subs	r3, r6, #1
 8004090:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004092:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004096:	2b30      	cmp	r3, #48	@ 0x30
 8004098:	d0f8      	beq.n	800408c <_dtoa_r+0x61c>
 800409a:	4647      	mov	r7, r8
 800409c:	e03b      	b.n	8004116 <_dtoa_r+0x6a6>
 800409e:	4b9e      	ldr	r3, [pc, #632]	@ (8004318 <_dtoa_r+0x8a8>)
 80040a0:	f7fc fa1a 	bl	80004d8 <__aeabi_dmul>
 80040a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040a8:	e7bc      	b.n	8004024 <_dtoa_r+0x5b4>
 80040aa:	4656      	mov	r6, sl
 80040ac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80040b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040b4:	4620      	mov	r0, r4
 80040b6:	4629      	mov	r1, r5
 80040b8:	f7fc fb38 	bl	800072c <__aeabi_ddiv>
 80040bc:	f7fc fcbc 	bl	8000a38 <__aeabi_d2iz>
 80040c0:	4680      	mov	r8, r0
 80040c2:	f7fc f99f 	bl	8000404 <__aeabi_i2d>
 80040c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040ca:	f7fc fa05 	bl	80004d8 <__aeabi_dmul>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4620      	mov	r0, r4
 80040d4:	4629      	mov	r1, r5
 80040d6:	f7fc f847 	bl	8000168 <__aeabi_dsub>
 80040da:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80040de:	9d08      	ldr	r5, [sp, #32]
 80040e0:	f806 4b01 	strb.w	r4, [r6], #1
 80040e4:	eba6 040a 	sub.w	r4, r6, sl
 80040e8:	42a5      	cmp	r5, r4
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	d133      	bne.n	8004158 <_dtoa_r+0x6e8>
 80040f0:	f7fc f83c 	bl	800016c <__adddf3>
 80040f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040f8:	4604      	mov	r4, r0
 80040fa:	460d      	mov	r5, r1
 80040fc:	f7fc fc7c 	bl	80009f8 <__aeabi_dcmpgt>
 8004100:	b9c0      	cbnz	r0, 8004134 <_dtoa_r+0x6c4>
 8004102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004106:	4620      	mov	r0, r4
 8004108:	4629      	mov	r1, r5
 800410a:	f7fc fc4d 	bl	80009a8 <__aeabi_dcmpeq>
 800410e:	b110      	cbz	r0, 8004116 <_dtoa_r+0x6a6>
 8004110:	f018 0f01 	tst.w	r8, #1
 8004114:	d10e      	bne.n	8004134 <_dtoa_r+0x6c4>
 8004116:	4648      	mov	r0, r9
 8004118:	9903      	ldr	r1, [sp, #12]
 800411a:	f000 fbbb 	bl	8004894 <_Bfree>
 800411e:	2300      	movs	r3, #0
 8004120:	7033      	strb	r3, [r6, #0]
 8004122:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004124:	3701      	adds	r7, #1
 8004126:	601f      	str	r7, [r3, #0]
 8004128:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 824b 	beq.w	80045c6 <_dtoa_r+0xb56>
 8004130:	601e      	str	r6, [r3, #0]
 8004132:	e248      	b.n	80045c6 <_dtoa_r+0xb56>
 8004134:	46b8      	mov	r8, r7
 8004136:	4633      	mov	r3, r6
 8004138:	461e      	mov	r6, r3
 800413a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800413e:	2a39      	cmp	r2, #57	@ 0x39
 8004140:	d106      	bne.n	8004150 <_dtoa_r+0x6e0>
 8004142:	459a      	cmp	sl, r3
 8004144:	d1f8      	bne.n	8004138 <_dtoa_r+0x6c8>
 8004146:	2230      	movs	r2, #48	@ 0x30
 8004148:	f108 0801 	add.w	r8, r8, #1
 800414c:	f88a 2000 	strb.w	r2, [sl]
 8004150:	781a      	ldrb	r2, [r3, #0]
 8004152:	3201      	adds	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	e7a0      	b.n	800409a <_dtoa_r+0x62a>
 8004158:	2200      	movs	r2, #0
 800415a:	4b6f      	ldr	r3, [pc, #444]	@ (8004318 <_dtoa_r+0x8a8>)
 800415c:	f7fc f9bc 	bl	80004d8 <__aeabi_dmul>
 8004160:	2200      	movs	r2, #0
 8004162:	2300      	movs	r3, #0
 8004164:	4604      	mov	r4, r0
 8004166:	460d      	mov	r5, r1
 8004168:	f7fc fc1e 	bl	80009a8 <__aeabi_dcmpeq>
 800416c:	2800      	cmp	r0, #0
 800416e:	d09f      	beq.n	80040b0 <_dtoa_r+0x640>
 8004170:	e7d1      	b.n	8004116 <_dtoa_r+0x6a6>
 8004172:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004174:	2a00      	cmp	r2, #0
 8004176:	f000 80ea 	beq.w	800434e <_dtoa_r+0x8de>
 800417a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800417c:	2a01      	cmp	r2, #1
 800417e:	f300 80cd 	bgt.w	800431c <_dtoa_r+0x8ac>
 8004182:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004184:	2a00      	cmp	r2, #0
 8004186:	f000 80c1 	beq.w	800430c <_dtoa_r+0x89c>
 800418a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800418e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004190:	9e04      	ldr	r6, [sp, #16]
 8004192:	9a04      	ldr	r2, [sp, #16]
 8004194:	2101      	movs	r1, #1
 8004196:	441a      	add	r2, r3
 8004198:	9204      	str	r2, [sp, #16]
 800419a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800419c:	4648      	mov	r0, r9
 800419e:	441a      	add	r2, r3
 80041a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80041a2:	f000 fc75 	bl	8004a90 <__i2b>
 80041a6:	4605      	mov	r5, r0
 80041a8:	b166      	cbz	r6, 80041c4 <_dtoa_r+0x754>
 80041aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	dd09      	ble.n	80041c4 <_dtoa_r+0x754>
 80041b0:	42b3      	cmp	r3, r6
 80041b2:	bfa8      	it	ge
 80041b4:	4633      	movge	r3, r6
 80041b6:	9a04      	ldr	r2, [sp, #16]
 80041b8:	1af6      	subs	r6, r6, r3
 80041ba:	1ad2      	subs	r2, r2, r3
 80041bc:	9204      	str	r2, [sp, #16]
 80041be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80041c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041c6:	b30b      	cbz	r3, 800420c <_dtoa_r+0x79c>
 80041c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80c6 	beq.w	800435c <_dtoa_r+0x8ec>
 80041d0:	2c00      	cmp	r4, #0
 80041d2:	f000 80c0 	beq.w	8004356 <_dtoa_r+0x8e6>
 80041d6:	4629      	mov	r1, r5
 80041d8:	4622      	mov	r2, r4
 80041da:	4648      	mov	r0, r9
 80041dc:	f000 fd10 	bl	8004c00 <__pow5mult>
 80041e0:	9a03      	ldr	r2, [sp, #12]
 80041e2:	4601      	mov	r1, r0
 80041e4:	4605      	mov	r5, r0
 80041e6:	4648      	mov	r0, r9
 80041e8:	f000 fc68 	bl	8004abc <__multiply>
 80041ec:	9903      	ldr	r1, [sp, #12]
 80041ee:	4680      	mov	r8, r0
 80041f0:	4648      	mov	r0, r9
 80041f2:	f000 fb4f 	bl	8004894 <_Bfree>
 80041f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041f8:	1b1b      	subs	r3, r3, r4
 80041fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80041fc:	f000 80b1 	beq.w	8004362 <_dtoa_r+0x8f2>
 8004200:	4641      	mov	r1, r8
 8004202:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004204:	4648      	mov	r0, r9
 8004206:	f000 fcfb 	bl	8004c00 <__pow5mult>
 800420a:	9003      	str	r0, [sp, #12]
 800420c:	2101      	movs	r1, #1
 800420e:	4648      	mov	r0, r9
 8004210:	f000 fc3e 	bl	8004a90 <__i2b>
 8004214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004216:	4604      	mov	r4, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 81d8 	beq.w	80045ce <_dtoa_r+0xb5e>
 800421e:	461a      	mov	r2, r3
 8004220:	4601      	mov	r1, r0
 8004222:	4648      	mov	r0, r9
 8004224:	f000 fcec 	bl	8004c00 <__pow5mult>
 8004228:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800422a:	4604      	mov	r4, r0
 800422c:	2b01      	cmp	r3, #1
 800422e:	f300 809f 	bgt.w	8004370 <_dtoa_r+0x900>
 8004232:	9b06      	ldr	r3, [sp, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f040 8097 	bne.w	8004368 <_dtoa_r+0x8f8>
 800423a:	9b07      	ldr	r3, [sp, #28]
 800423c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004240:	2b00      	cmp	r3, #0
 8004242:	f040 8093 	bne.w	800436c <_dtoa_r+0x8fc>
 8004246:	9b07      	ldr	r3, [sp, #28]
 8004248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800424c:	0d1b      	lsrs	r3, r3, #20
 800424e:	051b      	lsls	r3, r3, #20
 8004250:	b133      	cbz	r3, 8004260 <_dtoa_r+0x7f0>
 8004252:	9b04      	ldr	r3, [sp, #16]
 8004254:	3301      	adds	r3, #1
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800425a:	3301      	adds	r3, #1
 800425c:	9309      	str	r3, [sp, #36]	@ 0x24
 800425e:	2301      	movs	r3, #1
 8004260:	930a      	str	r3, [sp, #40]	@ 0x28
 8004262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 81b8 	beq.w	80045da <_dtoa_r+0xb6a>
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004270:	6918      	ldr	r0, [r3, #16]
 8004272:	f000 fbc1 	bl	80049f8 <__hi0bits>
 8004276:	f1c0 0020 	rsb	r0, r0, #32
 800427a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800427c:	4418      	add	r0, r3
 800427e:	f010 001f 	ands.w	r0, r0, #31
 8004282:	f000 8082 	beq.w	800438a <_dtoa_r+0x91a>
 8004286:	f1c0 0320 	rsb	r3, r0, #32
 800428a:	2b04      	cmp	r3, #4
 800428c:	dd73      	ble.n	8004376 <_dtoa_r+0x906>
 800428e:	9b04      	ldr	r3, [sp, #16]
 8004290:	f1c0 001c 	rsb	r0, r0, #28
 8004294:	4403      	add	r3, r0
 8004296:	9304      	str	r3, [sp, #16]
 8004298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800429a:	4406      	add	r6, r0
 800429c:	4403      	add	r3, r0
 800429e:	9309      	str	r3, [sp, #36]	@ 0x24
 80042a0:	9b04      	ldr	r3, [sp, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	dd05      	ble.n	80042b2 <_dtoa_r+0x842>
 80042a6:	461a      	mov	r2, r3
 80042a8:	4648      	mov	r0, r9
 80042aa:	9903      	ldr	r1, [sp, #12]
 80042ac:	f000 fd02 	bl	8004cb4 <__lshift>
 80042b0:	9003      	str	r0, [sp, #12]
 80042b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	dd05      	ble.n	80042c4 <_dtoa_r+0x854>
 80042b8:	4621      	mov	r1, r4
 80042ba:	461a      	mov	r2, r3
 80042bc:	4648      	mov	r0, r9
 80042be:	f000 fcf9 	bl	8004cb4 <__lshift>
 80042c2:	4604      	mov	r4, r0
 80042c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d061      	beq.n	800438e <_dtoa_r+0x91e>
 80042ca:	4621      	mov	r1, r4
 80042cc:	9803      	ldr	r0, [sp, #12]
 80042ce:	f000 fd5d 	bl	8004d8c <__mcmp>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	da5b      	bge.n	800438e <_dtoa_r+0x91e>
 80042d6:	2300      	movs	r3, #0
 80042d8:	220a      	movs	r2, #10
 80042da:	4648      	mov	r0, r9
 80042dc:	9903      	ldr	r1, [sp, #12]
 80042de:	f000 fafb 	bl	80048d8 <__multadd>
 80042e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042e4:	f107 38ff 	add.w	r8, r7, #4294967295
 80042e8:	9003      	str	r0, [sp, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8177 	beq.w	80045de <_dtoa_r+0xb6e>
 80042f0:	4629      	mov	r1, r5
 80042f2:	2300      	movs	r3, #0
 80042f4:	220a      	movs	r2, #10
 80042f6:	4648      	mov	r0, r9
 80042f8:	f000 faee 	bl	80048d8 <__multadd>
 80042fc:	f1bb 0f00 	cmp.w	fp, #0
 8004300:	4605      	mov	r5, r0
 8004302:	dc6f      	bgt.n	80043e4 <_dtoa_r+0x974>
 8004304:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004306:	2b02      	cmp	r3, #2
 8004308:	dc49      	bgt.n	800439e <_dtoa_r+0x92e>
 800430a:	e06b      	b.n	80043e4 <_dtoa_r+0x974>
 800430c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800430e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004312:	e73c      	b.n	800418e <_dtoa_r+0x71e>
 8004314:	3fe00000 	.word	0x3fe00000
 8004318:	40240000 	.word	0x40240000
 800431c:	9b08      	ldr	r3, [sp, #32]
 800431e:	1e5c      	subs	r4, r3, #1
 8004320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004322:	42a3      	cmp	r3, r4
 8004324:	db09      	blt.n	800433a <_dtoa_r+0x8ca>
 8004326:	1b1c      	subs	r4, r3, r4
 8004328:	9b08      	ldr	r3, [sp, #32]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f6bf af30 	bge.w	8004190 <_dtoa_r+0x720>
 8004330:	9b04      	ldr	r3, [sp, #16]
 8004332:	9a08      	ldr	r2, [sp, #32]
 8004334:	1a9e      	subs	r6, r3, r2
 8004336:	2300      	movs	r3, #0
 8004338:	e72b      	b.n	8004192 <_dtoa_r+0x722>
 800433a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800433c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800433e:	1ae3      	subs	r3, r4, r3
 8004340:	441a      	add	r2, r3
 8004342:	940a      	str	r4, [sp, #40]	@ 0x28
 8004344:	9e04      	ldr	r6, [sp, #16]
 8004346:	2400      	movs	r4, #0
 8004348:	9b08      	ldr	r3, [sp, #32]
 800434a:	920e      	str	r2, [sp, #56]	@ 0x38
 800434c:	e721      	b.n	8004192 <_dtoa_r+0x722>
 800434e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004350:	9e04      	ldr	r6, [sp, #16]
 8004352:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004354:	e728      	b.n	80041a8 <_dtoa_r+0x738>
 8004356:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800435a:	e751      	b.n	8004200 <_dtoa_r+0x790>
 800435c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800435e:	9903      	ldr	r1, [sp, #12]
 8004360:	e750      	b.n	8004204 <_dtoa_r+0x794>
 8004362:	f8cd 800c 	str.w	r8, [sp, #12]
 8004366:	e751      	b.n	800420c <_dtoa_r+0x79c>
 8004368:	2300      	movs	r3, #0
 800436a:	e779      	b.n	8004260 <_dtoa_r+0x7f0>
 800436c:	9b06      	ldr	r3, [sp, #24]
 800436e:	e777      	b.n	8004260 <_dtoa_r+0x7f0>
 8004370:	2300      	movs	r3, #0
 8004372:	930a      	str	r3, [sp, #40]	@ 0x28
 8004374:	e779      	b.n	800426a <_dtoa_r+0x7fa>
 8004376:	d093      	beq.n	80042a0 <_dtoa_r+0x830>
 8004378:	9a04      	ldr	r2, [sp, #16]
 800437a:	331c      	adds	r3, #28
 800437c:	441a      	add	r2, r3
 800437e:	9204      	str	r2, [sp, #16]
 8004380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004382:	441e      	add	r6, r3
 8004384:	441a      	add	r2, r3
 8004386:	9209      	str	r2, [sp, #36]	@ 0x24
 8004388:	e78a      	b.n	80042a0 <_dtoa_r+0x830>
 800438a:	4603      	mov	r3, r0
 800438c:	e7f4      	b.n	8004378 <_dtoa_r+0x908>
 800438e:	9b08      	ldr	r3, [sp, #32]
 8004390:	46b8      	mov	r8, r7
 8004392:	2b00      	cmp	r3, #0
 8004394:	dc20      	bgt.n	80043d8 <_dtoa_r+0x968>
 8004396:	469b      	mov	fp, r3
 8004398:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800439a:	2b02      	cmp	r3, #2
 800439c:	dd1e      	ble.n	80043dc <_dtoa_r+0x96c>
 800439e:	f1bb 0f00 	cmp.w	fp, #0
 80043a2:	f47f adb1 	bne.w	8003f08 <_dtoa_r+0x498>
 80043a6:	4621      	mov	r1, r4
 80043a8:	465b      	mov	r3, fp
 80043aa:	2205      	movs	r2, #5
 80043ac:	4648      	mov	r0, r9
 80043ae:	f000 fa93 	bl	80048d8 <__multadd>
 80043b2:	4601      	mov	r1, r0
 80043b4:	4604      	mov	r4, r0
 80043b6:	9803      	ldr	r0, [sp, #12]
 80043b8:	f000 fce8 	bl	8004d8c <__mcmp>
 80043bc:	2800      	cmp	r0, #0
 80043be:	f77f ada3 	ble.w	8003f08 <_dtoa_r+0x498>
 80043c2:	4656      	mov	r6, sl
 80043c4:	2331      	movs	r3, #49	@ 0x31
 80043c6:	f108 0801 	add.w	r8, r8, #1
 80043ca:	f806 3b01 	strb.w	r3, [r6], #1
 80043ce:	e59f      	b.n	8003f10 <_dtoa_r+0x4a0>
 80043d0:	46b8      	mov	r8, r7
 80043d2:	9c08      	ldr	r4, [sp, #32]
 80043d4:	4625      	mov	r5, r4
 80043d6:	e7f4      	b.n	80043c2 <_dtoa_r+0x952>
 80043d8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80043dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 8101 	beq.w	80045e6 <_dtoa_r+0xb76>
 80043e4:	2e00      	cmp	r6, #0
 80043e6:	dd05      	ble.n	80043f4 <_dtoa_r+0x984>
 80043e8:	4629      	mov	r1, r5
 80043ea:	4632      	mov	r2, r6
 80043ec:	4648      	mov	r0, r9
 80043ee:	f000 fc61 	bl	8004cb4 <__lshift>
 80043f2:	4605      	mov	r5, r0
 80043f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d05c      	beq.n	80044b4 <_dtoa_r+0xa44>
 80043fa:	4648      	mov	r0, r9
 80043fc:	6869      	ldr	r1, [r5, #4]
 80043fe:	f000 fa09 	bl	8004814 <_Balloc>
 8004402:	4606      	mov	r6, r0
 8004404:	b928      	cbnz	r0, 8004412 <_dtoa_r+0x9a2>
 8004406:	4602      	mov	r2, r0
 8004408:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800440c:	4b80      	ldr	r3, [pc, #512]	@ (8004610 <_dtoa_r+0xba0>)
 800440e:	f7ff bb43 	b.w	8003a98 <_dtoa_r+0x28>
 8004412:	692a      	ldr	r2, [r5, #16]
 8004414:	f105 010c 	add.w	r1, r5, #12
 8004418:	3202      	adds	r2, #2
 800441a:	0092      	lsls	r2, r2, #2
 800441c:	300c      	adds	r0, #12
 800441e:	f001 ff61 	bl	80062e4 <memcpy>
 8004422:	2201      	movs	r2, #1
 8004424:	4631      	mov	r1, r6
 8004426:	4648      	mov	r0, r9
 8004428:	f000 fc44 	bl	8004cb4 <__lshift>
 800442c:	462f      	mov	r7, r5
 800442e:	4605      	mov	r5, r0
 8004430:	f10a 0301 	add.w	r3, sl, #1
 8004434:	9304      	str	r3, [sp, #16]
 8004436:	eb0a 030b 	add.w	r3, sl, fp
 800443a:	930a      	str	r3, [sp, #40]	@ 0x28
 800443c:	9b06      	ldr	r3, [sp, #24]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	9309      	str	r3, [sp, #36]	@ 0x24
 8004444:	9b04      	ldr	r3, [sp, #16]
 8004446:	4621      	mov	r1, r4
 8004448:	9803      	ldr	r0, [sp, #12]
 800444a:	f103 3bff 	add.w	fp, r3, #4294967295
 800444e:	f7ff fa87 	bl	8003960 <quorem>
 8004452:	4603      	mov	r3, r0
 8004454:	4639      	mov	r1, r7
 8004456:	3330      	adds	r3, #48	@ 0x30
 8004458:	9006      	str	r0, [sp, #24]
 800445a:	9803      	ldr	r0, [sp, #12]
 800445c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800445e:	f000 fc95 	bl	8004d8c <__mcmp>
 8004462:	462a      	mov	r2, r5
 8004464:	9008      	str	r0, [sp, #32]
 8004466:	4621      	mov	r1, r4
 8004468:	4648      	mov	r0, r9
 800446a:	f000 fcab 	bl	8004dc4 <__mdiff>
 800446e:	68c2      	ldr	r2, [r0, #12]
 8004470:	4606      	mov	r6, r0
 8004472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004474:	bb02      	cbnz	r2, 80044b8 <_dtoa_r+0xa48>
 8004476:	4601      	mov	r1, r0
 8004478:	9803      	ldr	r0, [sp, #12]
 800447a:	f000 fc87 	bl	8004d8c <__mcmp>
 800447e:	4602      	mov	r2, r0
 8004480:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004482:	4631      	mov	r1, r6
 8004484:	4648      	mov	r0, r9
 8004486:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800448a:	f000 fa03 	bl	8004894 <_Bfree>
 800448e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004490:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004492:	9e04      	ldr	r6, [sp, #16]
 8004494:	ea42 0103 	orr.w	r1, r2, r3
 8004498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800449a:	4319      	orrs	r1, r3
 800449c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800449e:	d10d      	bne.n	80044bc <_dtoa_r+0xa4c>
 80044a0:	2b39      	cmp	r3, #57	@ 0x39
 80044a2:	d027      	beq.n	80044f4 <_dtoa_r+0xa84>
 80044a4:	9a08      	ldr	r2, [sp, #32]
 80044a6:	2a00      	cmp	r2, #0
 80044a8:	dd01      	ble.n	80044ae <_dtoa_r+0xa3e>
 80044aa:	9b06      	ldr	r3, [sp, #24]
 80044ac:	3331      	adds	r3, #49	@ 0x31
 80044ae:	f88b 3000 	strb.w	r3, [fp]
 80044b2:	e52e      	b.n	8003f12 <_dtoa_r+0x4a2>
 80044b4:	4628      	mov	r0, r5
 80044b6:	e7b9      	b.n	800442c <_dtoa_r+0x9bc>
 80044b8:	2201      	movs	r2, #1
 80044ba:	e7e2      	b.n	8004482 <_dtoa_r+0xa12>
 80044bc:	9908      	ldr	r1, [sp, #32]
 80044be:	2900      	cmp	r1, #0
 80044c0:	db04      	blt.n	80044cc <_dtoa_r+0xa5c>
 80044c2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80044c4:	4301      	orrs	r1, r0
 80044c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044c8:	4301      	orrs	r1, r0
 80044ca:	d120      	bne.n	800450e <_dtoa_r+0xa9e>
 80044cc:	2a00      	cmp	r2, #0
 80044ce:	ddee      	ble.n	80044ae <_dtoa_r+0xa3e>
 80044d0:	2201      	movs	r2, #1
 80044d2:	9903      	ldr	r1, [sp, #12]
 80044d4:	4648      	mov	r0, r9
 80044d6:	9304      	str	r3, [sp, #16]
 80044d8:	f000 fbec 	bl	8004cb4 <__lshift>
 80044dc:	4621      	mov	r1, r4
 80044de:	9003      	str	r0, [sp, #12]
 80044e0:	f000 fc54 	bl	8004d8c <__mcmp>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	9b04      	ldr	r3, [sp, #16]
 80044e8:	dc02      	bgt.n	80044f0 <_dtoa_r+0xa80>
 80044ea:	d1e0      	bne.n	80044ae <_dtoa_r+0xa3e>
 80044ec:	07da      	lsls	r2, r3, #31
 80044ee:	d5de      	bpl.n	80044ae <_dtoa_r+0xa3e>
 80044f0:	2b39      	cmp	r3, #57	@ 0x39
 80044f2:	d1da      	bne.n	80044aa <_dtoa_r+0xa3a>
 80044f4:	2339      	movs	r3, #57	@ 0x39
 80044f6:	f88b 3000 	strb.w	r3, [fp]
 80044fa:	4633      	mov	r3, r6
 80044fc:	461e      	mov	r6, r3
 80044fe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004502:	3b01      	subs	r3, #1
 8004504:	2a39      	cmp	r2, #57	@ 0x39
 8004506:	d04e      	beq.n	80045a6 <_dtoa_r+0xb36>
 8004508:	3201      	adds	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e501      	b.n	8003f12 <_dtoa_r+0x4a2>
 800450e:	2a00      	cmp	r2, #0
 8004510:	dd03      	ble.n	800451a <_dtoa_r+0xaaa>
 8004512:	2b39      	cmp	r3, #57	@ 0x39
 8004514:	d0ee      	beq.n	80044f4 <_dtoa_r+0xa84>
 8004516:	3301      	adds	r3, #1
 8004518:	e7c9      	b.n	80044ae <_dtoa_r+0xa3e>
 800451a:	9a04      	ldr	r2, [sp, #16]
 800451c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800451e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004522:	428a      	cmp	r2, r1
 8004524:	d028      	beq.n	8004578 <_dtoa_r+0xb08>
 8004526:	2300      	movs	r3, #0
 8004528:	220a      	movs	r2, #10
 800452a:	9903      	ldr	r1, [sp, #12]
 800452c:	4648      	mov	r0, r9
 800452e:	f000 f9d3 	bl	80048d8 <__multadd>
 8004532:	42af      	cmp	r7, r5
 8004534:	9003      	str	r0, [sp, #12]
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	f04f 020a 	mov.w	r2, #10
 800453e:	4639      	mov	r1, r7
 8004540:	4648      	mov	r0, r9
 8004542:	d107      	bne.n	8004554 <_dtoa_r+0xae4>
 8004544:	f000 f9c8 	bl	80048d8 <__multadd>
 8004548:	4607      	mov	r7, r0
 800454a:	4605      	mov	r5, r0
 800454c:	9b04      	ldr	r3, [sp, #16]
 800454e:	3301      	adds	r3, #1
 8004550:	9304      	str	r3, [sp, #16]
 8004552:	e777      	b.n	8004444 <_dtoa_r+0x9d4>
 8004554:	f000 f9c0 	bl	80048d8 <__multadd>
 8004558:	4629      	mov	r1, r5
 800455a:	4607      	mov	r7, r0
 800455c:	2300      	movs	r3, #0
 800455e:	220a      	movs	r2, #10
 8004560:	4648      	mov	r0, r9
 8004562:	f000 f9b9 	bl	80048d8 <__multadd>
 8004566:	4605      	mov	r5, r0
 8004568:	e7f0      	b.n	800454c <_dtoa_r+0xadc>
 800456a:	f1bb 0f00 	cmp.w	fp, #0
 800456e:	bfcc      	ite	gt
 8004570:	465e      	movgt	r6, fp
 8004572:	2601      	movle	r6, #1
 8004574:	2700      	movs	r7, #0
 8004576:	4456      	add	r6, sl
 8004578:	2201      	movs	r2, #1
 800457a:	9903      	ldr	r1, [sp, #12]
 800457c:	4648      	mov	r0, r9
 800457e:	9304      	str	r3, [sp, #16]
 8004580:	f000 fb98 	bl	8004cb4 <__lshift>
 8004584:	4621      	mov	r1, r4
 8004586:	9003      	str	r0, [sp, #12]
 8004588:	f000 fc00 	bl	8004d8c <__mcmp>
 800458c:	2800      	cmp	r0, #0
 800458e:	dcb4      	bgt.n	80044fa <_dtoa_r+0xa8a>
 8004590:	d102      	bne.n	8004598 <_dtoa_r+0xb28>
 8004592:	9b04      	ldr	r3, [sp, #16]
 8004594:	07db      	lsls	r3, r3, #31
 8004596:	d4b0      	bmi.n	80044fa <_dtoa_r+0xa8a>
 8004598:	4633      	mov	r3, r6
 800459a:	461e      	mov	r6, r3
 800459c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80045a0:	2a30      	cmp	r2, #48	@ 0x30
 80045a2:	d0fa      	beq.n	800459a <_dtoa_r+0xb2a>
 80045a4:	e4b5      	b.n	8003f12 <_dtoa_r+0x4a2>
 80045a6:	459a      	cmp	sl, r3
 80045a8:	d1a8      	bne.n	80044fc <_dtoa_r+0xa8c>
 80045aa:	2331      	movs	r3, #49	@ 0x31
 80045ac:	f108 0801 	add.w	r8, r8, #1
 80045b0:	f88a 3000 	strb.w	r3, [sl]
 80045b4:	e4ad      	b.n	8003f12 <_dtoa_r+0x4a2>
 80045b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80045b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004614 <_dtoa_r+0xba4>
 80045bc:	b11b      	cbz	r3, 80045c6 <_dtoa_r+0xb56>
 80045be:	f10a 0308 	add.w	r3, sl, #8
 80045c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	4650      	mov	r0, sl
 80045c8:	b017      	add	sp, #92	@ 0x5c
 80045ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	f77f ae2e 	ble.w	8004232 <_dtoa_r+0x7c2>
 80045d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80045d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80045da:	2001      	movs	r0, #1
 80045dc:	e64d      	b.n	800427a <_dtoa_r+0x80a>
 80045de:	f1bb 0f00 	cmp.w	fp, #0
 80045e2:	f77f aed9 	ble.w	8004398 <_dtoa_r+0x928>
 80045e6:	4656      	mov	r6, sl
 80045e8:	4621      	mov	r1, r4
 80045ea:	9803      	ldr	r0, [sp, #12]
 80045ec:	f7ff f9b8 	bl	8003960 <quorem>
 80045f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80045f4:	f806 3b01 	strb.w	r3, [r6], #1
 80045f8:	eba6 020a 	sub.w	r2, r6, sl
 80045fc:	4593      	cmp	fp, r2
 80045fe:	ddb4      	ble.n	800456a <_dtoa_r+0xafa>
 8004600:	2300      	movs	r3, #0
 8004602:	220a      	movs	r2, #10
 8004604:	4648      	mov	r0, r9
 8004606:	9903      	ldr	r1, [sp, #12]
 8004608:	f000 f966 	bl	80048d8 <__multadd>
 800460c:	9003      	str	r0, [sp, #12]
 800460e:	e7eb      	b.n	80045e8 <_dtoa_r+0xb78>
 8004610:	08006ec7 	.word	0x08006ec7
 8004614:	08006e4b 	.word	0x08006e4b

08004618 <_free_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4605      	mov	r5, r0
 800461c:	2900      	cmp	r1, #0
 800461e:	d040      	beq.n	80046a2 <_free_r+0x8a>
 8004620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004624:	1f0c      	subs	r4, r1, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	bfb8      	it	lt
 800462a:	18e4      	addlt	r4, r4, r3
 800462c:	f000 f8e6 	bl	80047fc <__malloc_lock>
 8004630:	4a1c      	ldr	r2, [pc, #112]	@ (80046a4 <_free_r+0x8c>)
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	b933      	cbnz	r3, 8004644 <_free_r+0x2c>
 8004636:	6063      	str	r3, [r4, #4]
 8004638:	6014      	str	r4, [r2, #0]
 800463a:	4628      	mov	r0, r5
 800463c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004640:	f000 b8e2 	b.w	8004808 <__malloc_unlock>
 8004644:	42a3      	cmp	r3, r4
 8004646:	d908      	bls.n	800465a <_free_r+0x42>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	1821      	adds	r1, r4, r0
 800464c:	428b      	cmp	r3, r1
 800464e:	bf01      	itttt	eq
 8004650:	6819      	ldreq	r1, [r3, #0]
 8004652:	685b      	ldreq	r3, [r3, #4]
 8004654:	1809      	addeq	r1, r1, r0
 8004656:	6021      	streq	r1, [r4, #0]
 8004658:	e7ed      	b.n	8004636 <_free_r+0x1e>
 800465a:	461a      	mov	r2, r3
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	b10b      	cbz	r3, 8004664 <_free_r+0x4c>
 8004660:	42a3      	cmp	r3, r4
 8004662:	d9fa      	bls.n	800465a <_free_r+0x42>
 8004664:	6811      	ldr	r1, [r2, #0]
 8004666:	1850      	adds	r0, r2, r1
 8004668:	42a0      	cmp	r0, r4
 800466a:	d10b      	bne.n	8004684 <_free_r+0x6c>
 800466c:	6820      	ldr	r0, [r4, #0]
 800466e:	4401      	add	r1, r0
 8004670:	1850      	adds	r0, r2, r1
 8004672:	4283      	cmp	r3, r0
 8004674:	6011      	str	r1, [r2, #0]
 8004676:	d1e0      	bne.n	800463a <_free_r+0x22>
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	4408      	add	r0, r1
 800467e:	6010      	str	r0, [r2, #0]
 8004680:	6053      	str	r3, [r2, #4]
 8004682:	e7da      	b.n	800463a <_free_r+0x22>
 8004684:	d902      	bls.n	800468c <_free_r+0x74>
 8004686:	230c      	movs	r3, #12
 8004688:	602b      	str	r3, [r5, #0]
 800468a:	e7d6      	b.n	800463a <_free_r+0x22>
 800468c:	6820      	ldr	r0, [r4, #0]
 800468e:	1821      	adds	r1, r4, r0
 8004690:	428b      	cmp	r3, r1
 8004692:	bf01      	itttt	eq
 8004694:	6819      	ldreq	r1, [r3, #0]
 8004696:	685b      	ldreq	r3, [r3, #4]
 8004698:	1809      	addeq	r1, r1, r0
 800469a:	6021      	streq	r1, [r4, #0]
 800469c:	6063      	str	r3, [r4, #4]
 800469e:	6054      	str	r4, [r2, #4]
 80046a0:	e7cb      	b.n	800463a <_free_r+0x22>
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	20000388 	.word	0x20000388

080046a8 <malloc>:
 80046a8:	4b02      	ldr	r3, [pc, #8]	@ (80046b4 <malloc+0xc>)
 80046aa:	4601      	mov	r1, r0
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	f000 b825 	b.w	80046fc <_malloc_r>
 80046b2:	bf00      	nop
 80046b4:	20000018 	.word	0x20000018

080046b8 <sbrk_aligned>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4e0f      	ldr	r6, [pc, #60]	@ (80046f8 <sbrk_aligned+0x40>)
 80046bc:	460c      	mov	r4, r1
 80046be:	6831      	ldr	r1, [r6, #0]
 80046c0:	4605      	mov	r5, r0
 80046c2:	b911      	cbnz	r1, 80046ca <sbrk_aligned+0x12>
 80046c4:	f001 fdfe 	bl	80062c4 <_sbrk_r>
 80046c8:	6030      	str	r0, [r6, #0]
 80046ca:	4621      	mov	r1, r4
 80046cc:	4628      	mov	r0, r5
 80046ce:	f001 fdf9 	bl	80062c4 <_sbrk_r>
 80046d2:	1c43      	adds	r3, r0, #1
 80046d4:	d103      	bne.n	80046de <sbrk_aligned+0x26>
 80046d6:	f04f 34ff 	mov.w	r4, #4294967295
 80046da:	4620      	mov	r0, r4
 80046dc:	bd70      	pop	{r4, r5, r6, pc}
 80046de:	1cc4      	adds	r4, r0, #3
 80046e0:	f024 0403 	bic.w	r4, r4, #3
 80046e4:	42a0      	cmp	r0, r4
 80046e6:	d0f8      	beq.n	80046da <sbrk_aligned+0x22>
 80046e8:	1a21      	subs	r1, r4, r0
 80046ea:	4628      	mov	r0, r5
 80046ec:	f001 fdea 	bl	80062c4 <_sbrk_r>
 80046f0:	3001      	adds	r0, #1
 80046f2:	d1f2      	bne.n	80046da <sbrk_aligned+0x22>
 80046f4:	e7ef      	b.n	80046d6 <sbrk_aligned+0x1e>
 80046f6:	bf00      	nop
 80046f8:	20000384 	.word	0x20000384

080046fc <_malloc_r>:
 80046fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004700:	1ccd      	adds	r5, r1, #3
 8004702:	f025 0503 	bic.w	r5, r5, #3
 8004706:	3508      	adds	r5, #8
 8004708:	2d0c      	cmp	r5, #12
 800470a:	bf38      	it	cc
 800470c:	250c      	movcc	r5, #12
 800470e:	2d00      	cmp	r5, #0
 8004710:	4606      	mov	r6, r0
 8004712:	db01      	blt.n	8004718 <_malloc_r+0x1c>
 8004714:	42a9      	cmp	r1, r5
 8004716:	d904      	bls.n	8004722 <_malloc_r+0x26>
 8004718:	230c      	movs	r3, #12
 800471a:	6033      	str	r3, [r6, #0]
 800471c:	2000      	movs	r0, #0
 800471e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004722:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047f8 <_malloc_r+0xfc>
 8004726:	f000 f869 	bl	80047fc <__malloc_lock>
 800472a:	f8d8 3000 	ldr.w	r3, [r8]
 800472e:	461c      	mov	r4, r3
 8004730:	bb44      	cbnz	r4, 8004784 <_malloc_r+0x88>
 8004732:	4629      	mov	r1, r5
 8004734:	4630      	mov	r0, r6
 8004736:	f7ff ffbf 	bl	80046b8 <sbrk_aligned>
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	4604      	mov	r4, r0
 800473e:	d158      	bne.n	80047f2 <_malloc_r+0xf6>
 8004740:	f8d8 4000 	ldr.w	r4, [r8]
 8004744:	4627      	mov	r7, r4
 8004746:	2f00      	cmp	r7, #0
 8004748:	d143      	bne.n	80047d2 <_malloc_r+0xd6>
 800474a:	2c00      	cmp	r4, #0
 800474c:	d04b      	beq.n	80047e6 <_malloc_r+0xea>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	4639      	mov	r1, r7
 8004752:	4630      	mov	r0, r6
 8004754:	eb04 0903 	add.w	r9, r4, r3
 8004758:	f001 fdb4 	bl	80062c4 <_sbrk_r>
 800475c:	4581      	cmp	r9, r0
 800475e:	d142      	bne.n	80047e6 <_malloc_r+0xea>
 8004760:	6821      	ldr	r1, [r4, #0]
 8004762:	4630      	mov	r0, r6
 8004764:	1a6d      	subs	r5, r5, r1
 8004766:	4629      	mov	r1, r5
 8004768:	f7ff ffa6 	bl	80046b8 <sbrk_aligned>
 800476c:	3001      	adds	r0, #1
 800476e:	d03a      	beq.n	80047e6 <_malloc_r+0xea>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	442b      	add	r3, r5
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	f8d8 3000 	ldr.w	r3, [r8]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	bb62      	cbnz	r2, 80047d8 <_malloc_r+0xdc>
 800477e:	f8c8 7000 	str.w	r7, [r8]
 8004782:	e00f      	b.n	80047a4 <_malloc_r+0xa8>
 8004784:	6822      	ldr	r2, [r4, #0]
 8004786:	1b52      	subs	r2, r2, r5
 8004788:	d420      	bmi.n	80047cc <_malloc_r+0xd0>
 800478a:	2a0b      	cmp	r2, #11
 800478c:	d917      	bls.n	80047be <_malloc_r+0xc2>
 800478e:	1961      	adds	r1, r4, r5
 8004790:	42a3      	cmp	r3, r4
 8004792:	6025      	str	r5, [r4, #0]
 8004794:	bf18      	it	ne
 8004796:	6059      	strne	r1, [r3, #4]
 8004798:	6863      	ldr	r3, [r4, #4]
 800479a:	bf08      	it	eq
 800479c:	f8c8 1000 	streq.w	r1, [r8]
 80047a0:	5162      	str	r2, [r4, r5]
 80047a2:	604b      	str	r3, [r1, #4]
 80047a4:	4630      	mov	r0, r6
 80047a6:	f000 f82f 	bl	8004808 <__malloc_unlock>
 80047aa:	f104 000b 	add.w	r0, r4, #11
 80047ae:	1d23      	adds	r3, r4, #4
 80047b0:	f020 0007 	bic.w	r0, r0, #7
 80047b4:	1ac2      	subs	r2, r0, r3
 80047b6:	bf1c      	itt	ne
 80047b8:	1a1b      	subne	r3, r3, r0
 80047ba:	50a3      	strne	r3, [r4, r2]
 80047bc:	e7af      	b.n	800471e <_malloc_r+0x22>
 80047be:	6862      	ldr	r2, [r4, #4]
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	bf0c      	ite	eq
 80047c4:	f8c8 2000 	streq.w	r2, [r8]
 80047c8:	605a      	strne	r2, [r3, #4]
 80047ca:	e7eb      	b.n	80047a4 <_malloc_r+0xa8>
 80047cc:	4623      	mov	r3, r4
 80047ce:	6864      	ldr	r4, [r4, #4]
 80047d0:	e7ae      	b.n	8004730 <_malloc_r+0x34>
 80047d2:	463c      	mov	r4, r7
 80047d4:	687f      	ldr	r7, [r7, #4]
 80047d6:	e7b6      	b.n	8004746 <_malloc_r+0x4a>
 80047d8:	461a      	mov	r2, r3
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	42a3      	cmp	r3, r4
 80047de:	d1fb      	bne.n	80047d8 <_malloc_r+0xdc>
 80047e0:	2300      	movs	r3, #0
 80047e2:	6053      	str	r3, [r2, #4]
 80047e4:	e7de      	b.n	80047a4 <_malloc_r+0xa8>
 80047e6:	230c      	movs	r3, #12
 80047e8:	4630      	mov	r0, r6
 80047ea:	6033      	str	r3, [r6, #0]
 80047ec:	f000 f80c 	bl	8004808 <__malloc_unlock>
 80047f0:	e794      	b.n	800471c <_malloc_r+0x20>
 80047f2:	6005      	str	r5, [r0, #0]
 80047f4:	e7d6      	b.n	80047a4 <_malloc_r+0xa8>
 80047f6:	bf00      	nop
 80047f8:	20000388 	.word	0x20000388

080047fc <__malloc_lock>:
 80047fc:	4801      	ldr	r0, [pc, #4]	@ (8004804 <__malloc_lock+0x8>)
 80047fe:	f7ff b89a 	b.w	8003936 <__retarget_lock_acquire_recursive>
 8004802:	bf00      	nop
 8004804:	20000380 	.word	0x20000380

08004808 <__malloc_unlock>:
 8004808:	4801      	ldr	r0, [pc, #4]	@ (8004810 <__malloc_unlock+0x8>)
 800480a:	f7ff b895 	b.w	8003938 <__retarget_lock_release_recursive>
 800480e:	bf00      	nop
 8004810:	20000380 	.word	0x20000380

08004814 <_Balloc>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	69c6      	ldr	r6, [r0, #28]
 8004818:	4604      	mov	r4, r0
 800481a:	460d      	mov	r5, r1
 800481c:	b976      	cbnz	r6, 800483c <_Balloc+0x28>
 800481e:	2010      	movs	r0, #16
 8004820:	f7ff ff42 	bl	80046a8 <malloc>
 8004824:	4602      	mov	r2, r0
 8004826:	61e0      	str	r0, [r4, #28]
 8004828:	b920      	cbnz	r0, 8004834 <_Balloc+0x20>
 800482a:	216b      	movs	r1, #107	@ 0x6b
 800482c:	4b17      	ldr	r3, [pc, #92]	@ (800488c <_Balloc+0x78>)
 800482e:	4818      	ldr	r0, [pc, #96]	@ (8004890 <_Balloc+0x7c>)
 8004830:	f001 fd6c 	bl	800630c <__assert_func>
 8004834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004838:	6006      	str	r6, [r0, #0]
 800483a:	60c6      	str	r6, [r0, #12]
 800483c:	69e6      	ldr	r6, [r4, #28]
 800483e:	68f3      	ldr	r3, [r6, #12]
 8004840:	b183      	cbz	r3, 8004864 <_Balloc+0x50>
 8004842:	69e3      	ldr	r3, [r4, #28]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800484a:	b9b8      	cbnz	r0, 800487c <_Balloc+0x68>
 800484c:	2101      	movs	r1, #1
 800484e:	fa01 f605 	lsl.w	r6, r1, r5
 8004852:	1d72      	adds	r2, r6, #5
 8004854:	4620      	mov	r0, r4
 8004856:	0092      	lsls	r2, r2, #2
 8004858:	f001 fd76 	bl	8006348 <_calloc_r>
 800485c:	b160      	cbz	r0, 8004878 <_Balloc+0x64>
 800485e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004862:	e00e      	b.n	8004882 <_Balloc+0x6e>
 8004864:	2221      	movs	r2, #33	@ 0x21
 8004866:	2104      	movs	r1, #4
 8004868:	4620      	mov	r0, r4
 800486a:	f001 fd6d 	bl	8006348 <_calloc_r>
 800486e:	69e3      	ldr	r3, [r4, #28]
 8004870:	60f0      	str	r0, [r6, #12]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e4      	bne.n	8004842 <_Balloc+0x2e>
 8004878:	2000      	movs	r0, #0
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	6802      	ldr	r2, [r0, #0]
 800487e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004882:	2300      	movs	r3, #0
 8004884:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004888:	e7f7      	b.n	800487a <_Balloc+0x66>
 800488a:	bf00      	nop
 800488c:	08006e58 	.word	0x08006e58
 8004890:	08006ed8 	.word	0x08006ed8

08004894 <_Bfree>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	69c6      	ldr	r6, [r0, #28]
 8004898:	4605      	mov	r5, r0
 800489a:	460c      	mov	r4, r1
 800489c:	b976      	cbnz	r6, 80048bc <_Bfree+0x28>
 800489e:	2010      	movs	r0, #16
 80048a0:	f7ff ff02 	bl	80046a8 <malloc>
 80048a4:	4602      	mov	r2, r0
 80048a6:	61e8      	str	r0, [r5, #28]
 80048a8:	b920      	cbnz	r0, 80048b4 <_Bfree+0x20>
 80048aa:	218f      	movs	r1, #143	@ 0x8f
 80048ac:	4b08      	ldr	r3, [pc, #32]	@ (80048d0 <_Bfree+0x3c>)
 80048ae:	4809      	ldr	r0, [pc, #36]	@ (80048d4 <_Bfree+0x40>)
 80048b0:	f001 fd2c 	bl	800630c <__assert_func>
 80048b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048b8:	6006      	str	r6, [r0, #0]
 80048ba:	60c6      	str	r6, [r0, #12]
 80048bc:	b13c      	cbz	r4, 80048ce <_Bfree+0x3a>
 80048be:	69eb      	ldr	r3, [r5, #28]
 80048c0:	6862      	ldr	r2, [r4, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048c8:	6021      	str	r1, [r4, #0]
 80048ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80048ce:	bd70      	pop	{r4, r5, r6, pc}
 80048d0:	08006e58 	.word	0x08006e58
 80048d4:	08006ed8 	.word	0x08006ed8

080048d8 <__multadd>:
 80048d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048dc:	4607      	mov	r7, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	461e      	mov	r6, r3
 80048e2:	2000      	movs	r0, #0
 80048e4:	690d      	ldr	r5, [r1, #16]
 80048e6:	f101 0c14 	add.w	ip, r1, #20
 80048ea:	f8dc 3000 	ldr.w	r3, [ip]
 80048ee:	3001      	adds	r0, #1
 80048f0:	b299      	uxth	r1, r3
 80048f2:	fb02 6101 	mla	r1, r2, r1, r6
 80048f6:	0c1e      	lsrs	r6, r3, #16
 80048f8:	0c0b      	lsrs	r3, r1, #16
 80048fa:	fb02 3306 	mla	r3, r2, r6, r3
 80048fe:	b289      	uxth	r1, r1
 8004900:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004904:	4285      	cmp	r5, r0
 8004906:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800490a:	f84c 1b04 	str.w	r1, [ip], #4
 800490e:	dcec      	bgt.n	80048ea <__multadd+0x12>
 8004910:	b30e      	cbz	r6, 8004956 <__multadd+0x7e>
 8004912:	68a3      	ldr	r3, [r4, #8]
 8004914:	42ab      	cmp	r3, r5
 8004916:	dc19      	bgt.n	800494c <__multadd+0x74>
 8004918:	6861      	ldr	r1, [r4, #4]
 800491a:	4638      	mov	r0, r7
 800491c:	3101      	adds	r1, #1
 800491e:	f7ff ff79 	bl	8004814 <_Balloc>
 8004922:	4680      	mov	r8, r0
 8004924:	b928      	cbnz	r0, 8004932 <__multadd+0x5a>
 8004926:	4602      	mov	r2, r0
 8004928:	21ba      	movs	r1, #186	@ 0xba
 800492a:	4b0c      	ldr	r3, [pc, #48]	@ (800495c <__multadd+0x84>)
 800492c:	480c      	ldr	r0, [pc, #48]	@ (8004960 <__multadd+0x88>)
 800492e:	f001 fced 	bl	800630c <__assert_func>
 8004932:	6922      	ldr	r2, [r4, #16]
 8004934:	f104 010c 	add.w	r1, r4, #12
 8004938:	3202      	adds	r2, #2
 800493a:	0092      	lsls	r2, r2, #2
 800493c:	300c      	adds	r0, #12
 800493e:	f001 fcd1 	bl	80062e4 <memcpy>
 8004942:	4621      	mov	r1, r4
 8004944:	4638      	mov	r0, r7
 8004946:	f7ff ffa5 	bl	8004894 <_Bfree>
 800494a:	4644      	mov	r4, r8
 800494c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004950:	3501      	adds	r5, #1
 8004952:	615e      	str	r6, [r3, #20]
 8004954:	6125      	str	r5, [r4, #16]
 8004956:	4620      	mov	r0, r4
 8004958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800495c:	08006ec7 	.word	0x08006ec7
 8004960:	08006ed8 	.word	0x08006ed8

08004964 <__s2b>:
 8004964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004968:	4615      	mov	r5, r2
 800496a:	2209      	movs	r2, #9
 800496c:	461f      	mov	r7, r3
 800496e:	3308      	adds	r3, #8
 8004970:	460c      	mov	r4, r1
 8004972:	fb93 f3f2 	sdiv	r3, r3, r2
 8004976:	4606      	mov	r6, r0
 8004978:	2201      	movs	r2, #1
 800497a:	2100      	movs	r1, #0
 800497c:	429a      	cmp	r2, r3
 800497e:	db09      	blt.n	8004994 <__s2b+0x30>
 8004980:	4630      	mov	r0, r6
 8004982:	f7ff ff47 	bl	8004814 <_Balloc>
 8004986:	b940      	cbnz	r0, 800499a <__s2b+0x36>
 8004988:	4602      	mov	r2, r0
 800498a:	21d3      	movs	r1, #211	@ 0xd3
 800498c:	4b18      	ldr	r3, [pc, #96]	@ (80049f0 <__s2b+0x8c>)
 800498e:	4819      	ldr	r0, [pc, #100]	@ (80049f4 <__s2b+0x90>)
 8004990:	f001 fcbc 	bl	800630c <__assert_func>
 8004994:	0052      	lsls	r2, r2, #1
 8004996:	3101      	adds	r1, #1
 8004998:	e7f0      	b.n	800497c <__s2b+0x18>
 800499a:	9b08      	ldr	r3, [sp, #32]
 800499c:	2d09      	cmp	r5, #9
 800499e:	6143      	str	r3, [r0, #20]
 80049a0:	f04f 0301 	mov.w	r3, #1
 80049a4:	6103      	str	r3, [r0, #16]
 80049a6:	dd16      	ble.n	80049d6 <__s2b+0x72>
 80049a8:	f104 0909 	add.w	r9, r4, #9
 80049ac:	46c8      	mov	r8, r9
 80049ae:	442c      	add	r4, r5
 80049b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80049b4:	4601      	mov	r1, r0
 80049b6:	220a      	movs	r2, #10
 80049b8:	4630      	mov	r0, r6
 80049ba:	3b30      	subs	r3, #48	@ 0x30
 80049bc:	f7ff ff8c 	bl	80048d8 <__multadd>
 80049c0:	45a0      	cmp	r8, r4
 80049c2:	d1f5      	bne.n	80049b0 <__s2b+0x4c>
 80049c4:	f1a5 0408 	sub.w	r4, r5, #8
 80049c8:	444c      	add	r4, r9
 80049ca:	1b2d      	subs	r5, r5, r4
 80049cc:	1963      	adds	r3, r4, r5
 80049ce:	42bb      	cmp	r3, r7
 80049d0:	db04      	blt.n	80049dc <__s2b+0x78>
 80049d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049d6:	2509      	movs	r5, #9
 80049d8:	340a      	adds	r4, #10
 80049da:	e7f6      	b.n	80049ca <__s2b+0x66>
 80049dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80049e0:	4601      	mov	r1, r0
 80049e2:	220a      	movs	r2, #10
 80049e4:	4630      	mov	r0, r6
 80049e6:	3b30      	subs	r3, #48	@ 0x30
 80049e8:	f7ff ff76 	bl	80048d8 <__multadd>
 80049ec:	e7ee      	b.n	80049cc <__s2b+0x68>
 80049ee:	bf00      	nop
 80049f0:	08006ec7 	.word	0x08006ec7
 80049f4:	08006ed8 	.word	0x08006ed8

080049f8 <__hi0bits>:
 80049f8:	4603      	mov	r3, r0
 80049fa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80049fe:	bf3a      	itte	cc
 8004a00:	0403      	lslcc	r3, r0, #16
 8004a02:	2010      	movcc	r0, #16
 8004a04:	2000      	movcs	r0, #0
 8004a06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a0a:	bf3c      	itt	cc
 8004a0c:	021b      	lslcc	r3, r3, #8
 8004a0e:	3008      	addcc	r0, #8
 8004a10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a14:	bf3c      	itt	cc
 8004a16:	011b      	lslcc	r3, r3, #4
 8004a18:	3004      	addcc	r0, #4
 8004a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a1e:	bf3c      	itt	cc
 8004a20:	009b      	lslcc	r3, r3, #2
 8004a22:	3002      	addcc	r0, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	db05      	blt.n	8004a34 <__hi0bits+0x3c>
 8004a28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004a2c:	f100 0001 	add.w	r0, r0, #1
 8004a30:	bf08      	it	eq
 8004a32:	2020      	moveq	r0, #32
 8004a34:	4770      	bx	lr

08004a36 <__lo0bits>:
 8004a36:	6803      	ldr	r3, [r0, #0]
 8004a38:	4602      	mov	r2, r0
 8004a3a:	f013 0007 	ands.w	r0, r3, #7
 8004a3e:	d00b      	beq.n	8004a58 <__lo0bits+0x22>
 8004a40:	07d9      	lsls	r1, r3, #31
 8004a42:	d421      	bmi.n	8004a88 <__lo0bits+0x52>
 8004a44:	0798      	lsls	r0, r3, #30
 8004a46:	bf49      	itett	mi
 8004a48:	085b      	lsrmi	r3, r3, #1
 8004a4a:	089b      	lsrpl	r3, r3, #2
 8004a4c:	2001      	movmi	r0, #1
 8004a4e:	6013      	strmi	r3, [r2, #0]
 8004a50:	bf5c      	itt	pl
 8004a52:	2002      	movpl	r0, #2
 8004a54:	6013      	strpl	r3, [r2, #0]
 8004a56:	4770      	bx	lr
 8004a58:	b299      	uxth	r1, r3
 8004a5a:	b909      	cbnz	r1, 8004a60 <__lo0bits+0x2a>
 8004a5c:	2010      	movs	r0, #16
 8004a5e:	0c1b      	lsrs	r3, r3, #16
 8004a60:	b2d9      	uxtb	r1, r3
 8004a62:	b909      	cbnz	r1, 8004a68 <__lo0bits+0x32>
 8004a64:	3008      	adds	r0, #8
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	0719      	lsls	r1, r3, #28
 8004a6a:	bf04      	itt	eq
 8004a6c:	091b      	lsreq	r3, r3, #4
 8004a6e:	3004      	addeq	r0, #4
 8004a70:	0799      	lsls	r1, r3, #30
 8004a72:	bf04      	itt	eq
 8004a74:	089b      	lsreq	r3, r3, #2
 8004a76:	3002      	addeq	r0, #2
 8004a78:	07d9      	lsls	r1, r3, #31
 8004a7a:	d403      	bmi.n	8004a84 <__lo0bits+0x4e>
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	f100 0001 	add.w	r0, r0, #1
 8004a82:	d003      	beq.n	8004a8c <__lo0bits+0x56>
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	4770      	bx	lr
 8004a88:	2000      	movs	r0, #0
 8004a8a:	4770      	bx	lr
 8004a8c:	2020      	movs	r0, #32
 8004a8e:	4770      	bx	lr

08004a90 <__i2b>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	460c      	mov	r4, r1
 8004a94:	2101      	movs	r1, #1
 8004a96:	f7ff febd 	bl	8004814 <_Balloc>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	b928      	cbnz	r0, 8004aaa <__i2b+0x1a>
 8004a9e:	f240 1145 	movw	r1, #325	@ 0x145
 8004aa2:	4b04      	ldr	r3, [pc, #16]	@ (8004ab4 <__i2b+0x24>)
 8004aa4:	4804      	ldr	r0, [pc, #16]	@ (8004ab8 <__i2b+0x28>)
 8004aa6:	f001 fc31 	bl	800630c <__assert_func>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	6144      	str	r4, [r0, #20]
 8004aae:	6103      	str	r3, [r0, #16]
 8004ab0:	bd10      	pop	{r4, pc}
 8004ab2:	bf00      	nop
 8004ab4:	08006ec7 	.word	0x08006ec7
 8004ab8:	08006ed8 	.word	0x08006ed8

08004abc <__multiply>:
 8004abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac0:	4617      	mov	r7, r2
 8004ac2:	690a      	ldr	r2, [r1, #16]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4689      	mov	r9, r1
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	bfa2      	ittt	ge
 8004acc:	463b      	movge	r3, r7
 8004ace:	460f      	movge	r7, r1
 8004ad0:	4699      	movge	r9, r3
 8004ad2:	693d      	ldr	r5, [r7, #16]
 8004ad4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	eb05 060a 	add.w	r6, r5, sl
 8004ae0:	42b3      	cmp	r3, r6
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	bfb8      	it	lt
 8004ae6:	3101      	addlt	r1, #1
 8004ae8:	f7ff fe94 	bl	8004814 <_Balloc>
 8004aec:	b930      	cbnz	r0, 8004afc <__multiply+0x40>
 8004aee:	4602      	mov	r2, r0
 8004af0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004af4:	4b40      	ldr	r3, [pc, #256]	@ (8004bf8 <__multiply+0x13c>)
 8004af6:	4841      	ldr	r0, [pc, #260]	@ (8004bfc <__multiply+0x140>)
 8004af8:	f001 fc08 	bl	800630c <__assert_func>
 8004afc:	f100 0414 	add.w	r4, r0, #20
 8004b00:	4623      	mov	r3, r4
 8004b02:	2200      	movs	r2, #0
 8004b04:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004b08:	4573      	cmp	r3, lr
 8004b0a:	d320      	bcc.n	8004b4e <__multiply+0x92>
 8004b0c:	f107 0814 	add.w	r8, r7, #20
 8004b10:	f109 0114 	add.w	r1, r9, #20
 8004b14:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004b18:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004b1c:	9302      	str	r3, [sp, #8]
 8004b1e:	1beb      	subs	r3, r5, r7
 8004b20:	3b15      	subs	r3, #21
 8004b22:	f023 0303 	bic.w	r3, r3, #3
 8004b26:	3304      	adds	r3, #4
 8004b28:	3715      	adds	r7, #21
 8004b2a:	42bd      	cmp	r5, r7
 8004b2c:	bf38      	it	cc
 8004b2e:	2304      	movcc	r3, #4
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	9b02      	ldr	r3, [sp, #8]
 8004b34:	9103      	str	r1, [sp, #12]
 8004b36:	428b      	cmp	r3, r1
 8004b38:	d80c      	bhi.n	8004b54 <__multiply+0x98>
 8004b3a:	2e00      	cmp	r6, #0
 8004b3c:	dd03      	ble.n	8004b46 <__multiply+0x8a>
 8004b3e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d055      	beq.n	8004bf2 <__multiply+0x136>
 8004b46:	6106      	str	r6, [r0, #16]
 8004b48:	b005      	add	sp, #20
 8004b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4e:	f843 2b04 	str.w	r2, [r3], #4
 8004b52:	e7d9      	b.n	8004b08 <__multiply+0x4c>
 8004b54:	f8b1 a000 	ldrh.w	sl, [r1]
 8004b58:	f1ba 0f00 	cmp.w	sl, #0
 8004b5c:	d01f      	beq.n	8004b9e <__multiply+0xe2>
 8004b5e:	46c4      	mov	ip, r8
 8004b60:	46a1      	mov	r9, r4
 8004b62:	2700      	movs	r7, #0
 8004b64:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004b68:	f8d9 3000 	ldr.w	r3, [r9]
 8004b6c:	fa1f fb82 	uxth.w	fp, r2
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	fb0a 330b 	mla	r3, sl, fp, r3
 8004b76:	443b      	add	r3, r7
 8004b78:	f8d9 7000 	ldr.w	r7, [r9]
 8004b7c:	0c12      	lsrs	r2, r2, #16
 8004b7e:	0c3f      	lsrs	r7, r7, #16
 8004b80:	fb0a 7202 	mla	r2, sl, r2, r7
 8004b84:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b8e:	4565      	cmp	r5, ip
 8004b90:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004b94:	f849 3b04 	str.w	r3, [r9], #4
 8004b98:	d8e4      	bhi.n	8004b64 <__multiply+0xa8>
 8004b9a:	9b01      	ldr	r3, [sp, #4]
 8004b9c:	50e7      	str	r7, [r4, r3]
 8004b9e:	9b03      	ldr	r3, [sp, #12]
 8004ba0:	3104      	adds	r1, #4
 8004ba2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004ba6:	f1b9 0f00 	cmp.w	r9, #0
 8004baa:	d020      	beq.n	8004bee <__multiply+0x132>
 8004bac:	4647      	mov	r7, r8
 8004bae:	46a4      	mov	ip, r4
 8004bb0:	f04f 0a00 	mov.w	sl, #0
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	f8b7 b000 	ldrh.w	fp, [r7]
 8004bba:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	fb09 220b 	mla	r2, r9, fp, r2
 8004bc4:	4452      	add	r2, sl
 8004bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bca:	f84c 3b04 	str.w	r3, [ip], #4
 8004bce:	f857 3b04 	ldr.w	r3, [r7], #4
 8004bd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bd6:	f8bc 3000 	ldrh.w	r3, [ip]
 8004bda:	42bd      	cmp	r5, r7
 8004bdc:	fb09 330a 	mla	r3, r9, sl, r3
 8004be0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004be4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004be8:	d8e5      	bhi.n	8004bb6 <__multiply+0xfa>
 8004bea:	9a01      	ldr	r2, [sp, #4]
 8004bec:	50a3      	str	r3, [r4, r2]
 8004bee:	3404      	adds	r4, #4
 8004bf0:	e79f      	b.n	8004b32 <__multiply+0x76>
 8004bf2:	3e01      	subs	r6, #1
 8004bf4:	e7a1      	b.n	8004b3a <__multiply+0x7e>
 8004bf6:	bf00      	nop
 8004bf8:	08006ec7 	.word	0x08006ec7
 8004bfc:	08006ed8 	.word	0x08006ed8

08004c00 <__pow5mult>:
 8004c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c04:	4615      	mov	r5, r2
 8004c06:	f012 0203 	ands.w	r2, r2, #3
 8004c0a:	4607      	mov	r7, r0
 8004c0c:	460e      	mov	r6, r1
 8004c0e:	d007      	beq.n	8004c20 <__pow5mult+0x20>
 8004c10:	4c25      	ldr	r4, [pc, #148]	@ (8004ca8 <__pow5mult+0xa8>)
 8004c12:	3a01      	subs	r2, #1
 8004c14:	2300      	movs	r3, #0
 8004c16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c1a:	f7ff fe5d 	bl	80048d8 <__multadd>
 8004c1e:	4606      	mov	r6, r0
 8004c20:	10ad      	asrs	r5, r5, #2
 8004c22:	d03d      	beq.n	8004ca0 <__pow5mult+0xa0>
 8004c24:	69fc      	ldr	r4, [r7, #28]
 8004c26:	b97c      	cbnz	r4, 8004c48 <__pow5mult+0x48>
 8004c28:	2010      	movs	r0, #16
 8004c2a:	f7ff fd3d 	bl	80046a8 <malloc>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	61f8      	str	r0, [r7, #28]
 8004c32:	b928      	cbnz	r0, 8004c40 <__pow5mult+0x40>
 8004c34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004c38:	4b1c      	ldr	r3, [pc, #112]	@ (8004cac <__pow5mult+0xac>)
 8004c3a:	481d      	ldr	r0, [pc, #116]	@ (8004cb0 <__pow5mult+0xb0>)
 8004c3c:	f001 fb66 	bl	800630c <__assert_func>
 8004c40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c44:	6004      	str	r4, [r0, #0]
 8004c46:	60c4      	str	r4, [r0, #12]
 8004c48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004c4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c50:	b94c      	cbnz	r4, 8004c66 <__pow5mult+0x66>
 8004c52:	f240 2171 	movw	r1, #625	@ 0x271
 8004c56:	4638      	mov	r0, r7
 8004c58:	f7ff ff1a 	bl	8004a90 <__i2b>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4604      	mov	r4, r0
 8004c60:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c64:	6003      	str	r3, [r0, #0]
 8004c66:	f04f 0900 	mov.w	r9, #0
 8004c6a:	07eb      	lsls	r3, r5, #31
 8004c6c:	d50a      	bpl.n	8004c84 <__pow5mult+0x84>
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4622      	mov	r2, r4
 8004c72:	4638      	mov	r0, r7
 8004c74:	f7ff ff22 	bl	8004abc <__multiply>
 8004c78:	4680      	mov	r8, r0
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f7ff fe09 	bl	8004894 <_Bfree>
 8004c82:	4646      	mov	r6, r8
 8004c84:	106d      	asrs	r5, r5, #1
 8004c86:	d00b      	beq.n	8004ca0 <__pow5mult+0xa0>
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	b938      	cbnz	r0, 8004c9c <__pow5mult+0x9c>
 8004c8c:	4622      	mov	r2, r4
 8004c8e:	4621      	mov	r1, r4
 8004c90:	4638      	mov	r0, r7
 8004c92:	f7ff ff13 	bl	8004abc <__multiply>
 8004c96:	6020      	str	r0, [r4, #0]
 8004c98:	f8c0 9000 	str.w	r9, [r0]
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	e7e4      	b.n	8004c6a <__pow5mult+0x6a>
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ca6:	bf00      	nop
 8004ca8:	08006fe8 	.word	0x08006fe8
 8004cac:	08006e58 	.word	0x08006e58
 8004cb0:	08006ed8 	.word	0x08006ed8

08004cb4 <__lshift>:
 8004cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb8:	460c      	mov	r4, r1
 8004cba:	4607      	mov	r7, r0
 8004cbc:	4691      	mov	r9, r2
 8004cbe:	6923      	ldr	r3, [r4, #16]
 8004cc0:	6849      	ldr	r1, [r1, #4]
 8004cc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004cc6:	68a3      	ldr	r3, [r4, #8]
 8004cc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ccc:	f108 0601 	add.w	r6, r8, #1
 8004cd0:	42b3      	cmp	r3, r6
 8004cd2:	db0b      	blt.n	8004cec <__lshift+0x38>
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	f7ff fd9d 	bl	8004814 <_Balloc>
 8004cda:	4605      	mov	r5, r0
 8004cdc:	b948      	cbnz	r0, 8004cf2 <__lshift+0x3e>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004ce4:	4b27      	ldr	r3, [pc, #156]	@ (8004d84 <__lshift+0xd0>)
 8004ce6:	4828      	ldr	r0, [pc, #160]	@ (8004d88 <__lshift+0xd4>)
 8004ce8:	f001 fb10 	bl	800630c <__assert_func>
 8004cec:	3101      	adds	r1, #1
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	e7ee      	b.n	8004cd0 <__lshift+0x1c>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f100 0114 	add.w	r1, r0, #20
 8004cf8:	f100 0210 	add.w	r2, r0, #16
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	4553      	cmp	r3, sl
 8004d00:	db33      	blt.n	8004d6a <__lshift+0xb6>
 8004d02:	6920      	ldr	r0, [r4, #16]
 8004d04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d08:	f104 0314 	add.w	r3, r4, #20
 8004d0c:	f019 091f 	ands.w	r9, r9, #31
 8004d10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d18:	d02b      	beq.n	8004d72 <__lshift+0xbe>
 8004d1a:	468a      	mov	sl, r1
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f1c9 0e20 	rsb	lr, r9, #32
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	fa00 f009 	lsl.w	r0, r0, r9
 8004d28:	4310      	orrs	r0, r2
 8004d2a:	f84a 0b04 	str.w	r0, [sl], #4
 8004d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d32:	459c      	cmp	ip, r3
 8004d34:	fa22 f20e 	lsr.w	r2, r2, lr
 8004d38:	d8f3      	bhi.n	8004d22 <__lshift+0x6e>
 8004d3a:	ebac 0304 	sub.w	r3, ip, r4
 8004d3e:	3b15      	subs	r3, #21
 8004d40:	f023 0303 	bic.w	r3, r3, #3
 8004d44:	3304      	adds	r3, #4
 8004d46:	f104 0015 	add.w	r0, r4, #21
 8004d4a:	4560      	cmp	r0, ip
 8004d4c:	bf88      	it	hi
 8004d4e:	2304      	movhi	r3, #4
 8004d50:	50ca      	str	r2, [r1, r3]
 8004d52:	b10a      	cbz	r2, 8004d58 <__lshift+0xa4>
 8004d54:	f108 0602 	add.w	r6, r8, #2
 8004d58:	3e01      	subs	r6, #1
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	612e      	str	r6, [r5, #16]
 8004d60:	f7ff fd98 	bl	8004894 <_Bfree>
 8004d64:	4628      	mov	r0, r5
 8004d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d6e:	3301      	adds	r3, #1
 8004d70:	e7c5      	b.n	8004cfe <__lshift+0x4a>
 8004d72:	3904      	subs	r1, #4
 8004d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d78:	459c      	cmp	ip, r3
 8004d7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d7e:	d8f9      	bhi.n	8004d74 <__lshift+0xc0>
 8004d80:	e7ea      	b.n	8004d58 <__lshift+0xa4>
 8004d82:	bf00      	nop
 8004d84:	08006ec7 	.word	0x08006ec7
 8004d88:	08006ed8 	.word	0x08006ed8

08004d8c <__mcmp>:
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	690a      	ldr	r2, [r1, #16]
 8004d90:	6900      	ldr	r0, [r0, #16]
 8004d92:	b530      	push	{r4, r5, lr}
 8004d94:	1a80      	subs	r0, r0, r2
 8004d96:	d10e      	bne.n	8004db6 <__mcmp+0x2a>
 8004d98:	3314      	adds	r3, #20
 8004d9a:	3114      	adds	r1, #20
 8004d9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004da0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004da4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004da8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004dac:	4295      	cmp	r5, r2
 8004dae:	d003      	beq.n	8004db8 <__mcmp+0x2c>
 8004db0:	d205      	bcs.n	8004dbe <__mcmp+0x32>
 8004db2:	f04f 30ff 	mov.w	r0, #4294967295
 8004db6:	bd30      	pop	{r4, r5, pc}
 8004db8:	42a3      	cmp	r3, r4
 8004dba:	d3f3      	bcc.n	8004da4 <__mcmp+0x18>
 8004dbc:	e7fb      	b.n	8004db6 <__mcmp+0x2a>
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	e7f9      	b.n	8004db6 <__mcmp+0x2a>
	...

08004dc4 <__mdiff>:
 8004dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc8:	4689      	mov	r9, r1
 8004dca:	4606      	mov	r6, r0
 8004dcc:	4611      	mov	r1, r2
 8004dce:	4648      	mov	r0, r9
 8004dd0:	4614      	mov	r4, r2
 8004dd2:	f7ff ffdb 	bl	8004d8c <__mcmp>
 8004dd6:	1e05      	subs	r5, r0, #0
 8004dd8:	d112      	bne.n	8004e00 <__mdiff+0x3c>
 8004dda:	4629      	mov	r1, r5
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f7ff fd19 	bl	8004814 <_Balloc>
 8004de2:	4602      	mov	r2, r0
 8004de4:	b928      	cbnz	r0, 8004df2 <__mdiff+0x2e>
 8004de6:	f240 2137 	movw	r1, #567	@ 0x237
 8004dea:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee4 <__mdiff+0x120>)
 8004dec:	483e      	ldr	r0, [pc, #248]	@ (8004ee8 <__mdiff+0x124>)
 8004dee:	f001 fa8d 	bl	800630c <__assert_func>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004df8:	4610      	mov	r0, r2
 8004dfa:	b003      	add	sp, #12
 8004dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e00:	bfbc      	itt	lt
 8004e02:	464b      	movlt	r3, r9
 8004e04:	46a1      	movlt	r9, r4
 8004e06:	4630      	mov	r0, r6
 8004e08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004e0c:	bfba      	itte	lt
 8004e0e:	461c      	movlt	r4, r3
 8004e10:	2501      	movlt	r5, #1
 8004e12:	2500      	movge	r5, #0
 8004e14:	f7ff fcfe 	bl	8004814 <_Balloc>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	b918      	cbnz	r0, 8004e24 <__mdiff+0x60>
 8004e1c:	f240 2145 	movw	r1, #581	@ 0x245
 8004e20:	4b30      	ldr	r3, [pc, #192]	@ (8004ee4 <__mdiff+0x120>)
 8004e22:	e7e3      	b.n	8004dec <__mdiff+0x28>
 8004e24:	f100 0b14 	add.w	fp, r0, #20
 8004e28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004e2c:	f109 0310 	add.w	r3, r9, #16
 8004e30:	60c5      	str	r5, [r0, #12]
 8004e32:	f04f 0c00 	mov.w	ip, #0
 8004e36:	f109 0514 	add.w	r5, r9, #20
 8004e3a:	46d9      	mov	r9, fp
 8004e3c:	6926      	ldr	r6, [r4, #16]
 8004e3e:	f104 0e14 	add.w	lr, r4, #20
 8004e42:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004e46:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	9b01      	ldr	r3, [sp, #4]
 8004e4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004e52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004e56:	b281      	uxth	r1, r0
 8004e58:	9301      	str	r3, [sp, #4]
 8004e5a:	fa1f f38a 	uxth.w	r3, sl
 8004e5e:	1a5b      	subs	r3, r3, r1
 8004e60:	0c00      	lsrs	r0, r0, #16
 8004e62:	4463      	add	r3, ip
 8004e64:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004e68:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004e72:	4576      	cmp	r6, lr
 8004e74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004e78:	f849 3b04 	str.w	r3, [r9], #4
 8004e7c:	d8e6      	bhi.n	8004e4c <__mdiff+0x88>
 8004e7e:	1b33      	subs	r3, r6, r4
 8004e80:	3b15      	subs	r3, #21
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	3415      	adds	r4, #21
 8004e88:	3304      	adds	r3, #4
 8004e8a:	42a6      	cmp	r6, r4
 8004e8c:	bf38      	it	cc
 8004e8e:	2304      	movcc	r3, #4
 8004e90:	441d      	add	r5, r3
 8004e92:	445b      	add	r3, fp
 8004e94:	461e      	mov	r6, r3
 8004e96:	462c      	mov	r4, r5
 8004e98:	4544      	cmp	r4, r8
 8004e9a:	d30e      	bcc.n	8004eba <__mdiff+0xf6>
 8004e9c:	f108 0103 	add.w	r1, r8, #3
 8004ea0:	1b49      	subs	r1, r1, r5
 8004ea2:	f021 0103 	bic.w	r1, r1, #3
 8004ea6:	3d03      	subs	r5, #3
 8004ea8:	45a8      	cmp	r8, r5
 8004eaa:	bf38      	it	cc
 8004eac:	2100      	movcc	r1, #0
 8004eae:	440b      	add	r3, r1
 8004eb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004eb4:	b199      	cbz	r1, 8004ede <__mdiff+0x11a>
 8004eb6:	6117      	str	r7, [r2, #16]
 8004eb8:	e79e      	b.n	8004df8 <__mdiff+0x34>
 8004eba:	46e6      	mov	lr, ip
 8004ebc:	f854 1b04 	ldr.w	r1, [r4], #4
 8004ec0:	fa1f fc81 	uxth.w	ip, r1
 8004ec4:	44f4      	add	ip, lr
 8004ec6:	0c08      	lsrs	r0, r1, #16
 8004ec8:	4471      	add	r1, lr
 8004eca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004ece:	b289      	uxth	r1, r1
 8004ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004ed4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004ed8:	f846 1b04 	str.w	r1, [r6], #4
 8004edc:	e7dc      	b.n	8004e98 <__mdiff+0xd4>
 8004ede:	3f01      	subs	r7, #1
 8004ee0:	e7e6      	b.n	8004eb0 <__mdiff+0xec>
 8004ee2:	bf00      	nop
 8004ee4:	08006ec7 	.word	0x08006ec7
 8004ee8:	08006ed8 	.word	0x08006ed8

08004eec <__ulp>:
 8004eec:	4b0e      	ldr	r3, [pc, #56]	@ (8004f28 <__ulp+0x3c>)
 8004eee:	400b      	ands	r3, r1
 8004ef0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	dc08      	bgt.n	8004f0a <__ulp+0x1e>
 8004ef8:	425b      	negs	r3, r3
 8004efa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8004efe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004f02:	da04      	bge.n	8004f0e <__ulp+0x22>
 8004f04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004f08:	4113      	asrs	r3, r2
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	e008      	b.n	8004f20 <__ulp+0x34>
 8004f0e:	f1a2 0314 	sub.w	r3, r2, #20
 8004f12:	2b1e      	cmp	r3, #30
 8004f14:	bfd6      	itet	le
 8004f16:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8004f1a:	2201      	movgt	r2, #1
 8004f1c:	40da      	lsrle	r2, r3
 8004f1e:	2300      	movs	r3, #0
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	7ff00000 	.word	0x7ff00000

08004f2c <__b2d>:
 8004f2c:	6902      	ldr	r2, [r0, #16]
 8004f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f30:	f100 0614 	add.w	r6, r0, #20
 8004f34:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8004f38:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8004f3c:	4f1e      	ldr	r7, [pc, #120]	@ (8004fb8 <__b2d+0x8c>)
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f7ff fd5a 	bl	80049f8 <__hi0bits>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f1c0 0020 	rsb	r0, r0, #32
 8004f4a:	2b0a      	cmp	r3, #10
 8004f4c:	f1a2 0504 	sub.w	r5, r2, #4
 8004f50:	6008      	str	r0, [r1, #0]
 8004f52:	dc12      	bgt.n	8004f7a <__b2d+0x4e>
 8004f54:	42ae      	cmp	r6, r5
 8004f56:	bf2c      	ite	cs
 8004f58:	2200      	movcs	r2, #0
 8004f5a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8004f5e:	f1c3 0c0b 	rsb	ip, r3, #11
 8004f62:	3315      	adds	r3, #21
 8004f64:	fa24 fe0c 	lsr.w	lr, r4, ip
 8004f68:	fa04 f303 	lsl.w	r3, r4, r3
 8004f6c:	fa22 f20c 	lsr.w	r2, r2, ip
 8004f70:	ea4e 0107 	orr.w	r1, lr, r7
 8004f74:	431a      	orrs	r2, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f7a:	42ae      	cmp	r6, r5
 8004f7c:	bf36      	itet	cc
 8004f7e:	f1a2 0508 	subcc.w	r5, r2, #8
 8004f82:	2200      	movcs	r2, #0
 8004f84:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8004f88:	3b0b      	subs	r3, #11
 8004f8a:	d012      	beq.n	8004fb2 <__b2d+0x86>
 8004f8c:	f1c3 0720 	rsb	r7, r3, #32
 8004f90:	fa22 f107 	lsr.w	r1, r2, r7
 8004f94:	409c      	lsls	r4, r3
 8004f96:	430c      	orrs	r4, r1
 8004f98:	42b5      	cmp	r5, r6
 8004f9a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8004f9e:	bf94      	ite	ls
 8004fa0:	2400      	movls	r4, #0
 8004fa2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	40fc      	lsrs	r4, r7
 8004faa:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8004fae:	4322      	orrs	r2, r4
 8004fb0:	e7e1      	b.n	8004f76 <__b2d+0x4a>
 8004fb2:	ea44 0107 	orr.w	r1, r4, r7
 8004fb6:	e7de      	b.n	8004f76 <__b2d+0x4a>
 8004fb8:	3ff00000 	.word	0x3ff00000

08004fbc <__d2b>:
 8004fbc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	4690      	mov	r8, r2
 8004fc4:	4699      	mov	r9, r3
 8004fc6:	9e08      	ldr	r6, [sp, #32]
 8004fc8:	f7ff fc24 	bl	8004814 <_Balloc>
 8004fcc:	4604      	mov	r4, r0
 8004fce:	b930      	cbnz	r0, 8004fde <__d2b+0x22>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	f240 310f 	movw	r1, #783	@ 0x30f
 8004fd6:	4b23      	ldr	r3, [pc, #140]	@ (8005064 <__d2b+0xa8>)
 8004fd8:	4823      	ldr	r0, [pc, #140]	@ (8005068 <__d2b+0xac>)
 8004fda:	f001 f997 	bl	800630c <__assert_func>
 8004fde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004fe2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004fe6:	b10d      	cbz	r5, 8004fec <__d2b+0x30>
 8004fe8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	f1b8 0300 	subs.w	r3, r8, #0
 8004ff2:	d024      	beq.n	800503e <__d2b+0x82>
 8004ff4:	4668      	mov	r0, sp
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	f7ff fd1d 	bl	8004a36 <__lo0bits>
 8004ffc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005000:	b1d8      	cbz	r0, 800503a <__d2b+0x7e>
 8005002:	f1c0 0320 	rsb	r3, r0, #32
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	430b      	orrs	r3, r1
 800500c:	40c2      	lsrs	r2, r0
 800500e:	6163      	str	r3, [r4, #20]
 8005010:	9201      	str	r2, [sp, #4]
 8005012:	9b01      	ldr	r3, [sp, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	bf0c      	ite	eq
 8005018:	2201      	moveq	r2, #1
 800501a:	2202      	movne	r2, #2
 800501c:	61a3      	str	r3, [r4, #24]
 800501e:	6122      	str	r2, [r4, #16]
 8005020:	b1ad      	cbz	r5, 800504e <__d2b+0x92>
 8005022:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005026:	4405      	add	r5, r0
 8005028:	6035      	str	r5, [r6, #0]
 800502a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800502e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005030:	6018      	str	r0, [r3, #0]
 8005032:	4620      	mov	r0, r4
 8005034:	b002      	add	sp, #8
 8005036:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800503a:	6161      	str	r1, [r4, #20]
 800503c:	e7e9      	b.n	8005012 <__d2b+0x56>
 800503e:	a801      	add	r0, sp, #4
 8005040:	f7ff fcf9 	bl	8004a36 <__lo0bits>
 8005044:	9b01      	ldr	r3, [sp, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	6163      	str	r3, [r4, #20]
 800504a:	3020      	adds	r0, #32
 800504c:	e7e7      	b.n	800501e <__d2b+0x62>
 800504e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005052:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005056:	6030      	str	r0, [r6, #0]
 8005058:	6918      	ldr	r0, [r3, #16]
 800505a:	f7ff fccd 	bl	80049f8 <__hi0bits>
 800505e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005062:	e7e4      	b.n	800502e <__d2b+0x72>
 8005064:	08006ec7 	.word	0x08006ec7
 8005068:	08006ed8 	.word	0x08006ed8

0800506c <__ratio>:
 800506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005070:	b085      	sub	sp, #20
 8005072:	e9cd 1000 	strd	r1, r0, [sp]
 8005076:	a902      	add	r1, sp, #8
 8005078:	f7ff ff58 	bl	8004f2c <__b2d>
 800507c:	468b      	mov	fp, r1
 800507e:	4606      	mov	r6, r0
 8005080:	460f      	mov	r7, r1
 8005082:	9800      	ldr	r0, [sp, #0]
 8005084:	a903      	add	r1, sp, #12
 8005086:	f7ff ff51 	bl	8004f2c <__b2d>
 800508a:	460d      	mov	r5, r1
 800508c:	9b01      	ldr	r3, [sp, #4]
 800508e:	4689      	mov	r9, r1
 8005090:	6919      	ldr	r1, [r3, #16]
 8005092:	9b00      	ldr	r3, [sp, #0]
 8005094:	4604      	mov	r4, r0
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	4630      	mov	r0, r6
 800509a:	1ac9      	subs	r1, r1, r3
 800509c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bfcd      	iteet	gt
 80050aa:	463a      	movgt	r2, r7
 80050ac:	462a      	movle	r2, r5
 80050ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80050b2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80050b6:	bfd8      	it	le
 80050b8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80050bc:	464b      	mov	r3, r9
 80050be:	4622      	mov	r2, r4
 80050c0:	4659      	mov	r1, fp
 80050c2:	f7fb fb33 	bl	800072c <__aeabi_ddiv>
 80050c6:	b005      	add	sp, #20
 80050c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080050cc <__copybits>:
 80050cc:	3901      	subs	r1, #1
 80050ce:	b570      	push	{r4, r5, r6, lr}
 80050d0:	1149      	asrs	r1, r1, #5
 80050d2:	6914      	ldr	r4, [r2, #16]
 80050d4:	3101      	adds	r1, #1
 80050d6:	f102 0314 	add.w	r3, r2, #20
 80050da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80050de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80050e2:	1f05      	subs	r5, r0, #4
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d30c      	bcc.n	8005102 <__copybits+0x36>
 80050e8:	1aa3      	subs	r3, r4, r2
 80050ea:	3b11      	subs	r3, #17
 80050ec:	f023 0303 	bic.w	r3, r3, #3
 80050f0:	3211      	adds	r2, #17
 80050f2:	42a2      	cmp	r2, r4
 80050f4:	bf88      	it	hi
 80050f6:	2300      	movhi	r3, #0
 80050f8:	4418      	add	r0, r3
 80050fa:	2300      	movs	r3, #0
 80050fc:	4288      	cmp	r0, r1
 80050fe:	d305      	bcc.n	800510c <__copybits+0x40>
 8005100:	bd70      	pop	{r4, r5, r6, pc}
 8005102:	f853 6b04 	ldr.w	r6, [r3], #4
 8005106:	f845 6f04 	str.w	r6, [r5, #4]!
 800510a:	e7eb      	b.n	80050e4 <__copybits+0x18>
 800510c:	f840 3b04 	str.w	r3, [r0], #4
 8005110:	e7f4      	b.n	80050fc <__copybits+0x30>

08005112 <__any_on>:
 8005112:	f100 0214 	add.w	r2, r0, #20
 8005116:	6900      	ldr	r0, [r0, #16]
 8005118:	114b      	asrs	r3, r1, #5
 800511a:	4298      	cmp	r0, r3
 800511c:	b510      	push	{r4, lr}
 800511e:	db11      	blt.n	8005144 <__any_on+0x32>
 8005120:	dd0a      	ble.n	8005138 <__any_on+0x26>
 8005122:	f011 011f 	ands.w	r1, r1, #31
 8005126:	d007      	beq.n	8005138 <__any_on+0x26>
 8005128:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800512c:	fa24 f001 	lsr.w	r0, r4, r1
 8005130:	fa00 f101 	lsl.w	r1, r0, r1
 8005134:	428c      	cmp	r4, r1
 8005136:	d10b      	bne.n	8005150 <__any_on+0x3e>
 8005138:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800513c:	4293      	cmp	r3, r2
 800513e:	d803      	bhi.n	8005148 <__any_on+0x36>
 8005140:	2000      	movs	r0, #0
 8005142:	bd10      	pop	{r4, pc}
 8005144:	4603      	mov	r3, r0
 8005146:	e7f7      	b.n	8005138 <__any_on+0x26>
 8005148:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800514c:	2900      	cmp	r1, #0
 800514e:	d0f5      	beq.n	800513c <__any_on+0x2a>
 8005150:	2001      	movs	r0, #1
 8005152:	e7f6      	b.n	8005142 <__any_on+0x30>

08005154 <sulp>:
 8005154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005158:	460f      	mov	r7, r1
 800515a:	4690      	mov	r8, r2
 800515c:	f7ff fec6 	bl	8004eec <__ulp>
 8005160:	4604      	mov	r4, r0
 8005162:	460d      	mov	r5, r1
 8005164:	f1b8 0f00 	cmp.w	r8, #0
 8005168:	d011      	beq.n	800518e <sulp+0x3a>
 800516a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800516e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005172:	2b00      	cmp	r3, #0
 8005174:	dd0b      	ble.n	800518e <sulp+0x3a>
 8005176:	2400      	movs	r4, #0
 8005178:	051b      	lsls	r3, r3, #20
 800517a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800517e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005182:	4622      	mov	r2, r4
 8005184:	462b      	mov	r3, r5
 8005186:	f7fb f9a7 	bl	80004d8 <__aeabi_dmul>
 800518a:	4604      	mov	r4, r0
 800518c:	460d      	mov	r5, r1
 800518e:	4620      	mov	r0, r4
 8005190:	4629      	mov	r1, r5
 8005192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005198 <_strtod_l>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	b09f      	sub	sp, #124	@ 0x7c
 800519e:	9217      	str	r2, [sp, #92]	@ 0x5c
 80051a0:	2200      	movs	r2, #0
 80051a2:	460c      	mov	r4, r1
 80051a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80051a6:	f04f 0a00 	mov.w	sl, #0
 80051aa:	f04f 0b00 	mov.w	fp, #0
 80051ae:	460a      	mov	r2, r1
 80051b0:	9005      	str	r0, [sp, #20]
 80051b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80051b4:	7811      	ldrb	r1, [r2, #0]
 80051b6:	292b      	cmp	r1, #43	@ 0x2b
 80051b8:	d048      	beq.n	800524c <_strtod_l+0xb4>
 80051ba:	d836      	bhi.n	800522a <_strtod_l+0x92>
 80051bc:	290d      	cmp	r1, #13
 80051be:	d830      	bhi.n	8005222 <_strtod_l+0x8a>
 80051c0:	2908      	cmp	r1, #8
 80051c2:	d830      	bhi.n	8005226 <_strtod_l+0x8e>
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d039      	beq.n	800523c <_strtod_l+0xa4>
 80051c8:	2200      	movs	r2, #0
 80051ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80051cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80051ce:	782a      	ldrb	r2, [r5, #0]
 80051d0:	2a30      	cmp	r2, #48	@ 0x30
 80051d2:	f040 80b0 	bne.w	8005336 <_strtod_l+0x19e>
 80051d6:	786a      	ldrb	r2, [r5, #1]
 80051d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80051dc:	2a58      	cmp	r2, #88	@ 0x58
 80051de:	d16c      	bne.n	80052ba <_strtod_l+0x122>
 80051e0:	9302      	str	r3, [sp, #8]
 80051e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051e4:	4a8f      	ldr	r2, [pc, #572]	@ (8005424 <_strtod_l+0x28c>)
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	ab1a      	add	r3, sp, #104	@ 0x68
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	9805      	ldr	r0, [sp, #20]
 80051ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80051f0:	a919      	add	r1, sp, #100	@ 0x64
 80051f2:	f001 f925 	bl	8006440 <__gethex>
 80051f6:	f010 060f 	ands.w	r6, r0, #15
 80051fa:	4604      	mov	r4, r0
 80051fc:	d005      	beq.n	800520a <_strtod_l+0x72>
 80051fe:	2e06      	cmp	r6, #6
 8005200:	d126      	bne.n	8005250 <_strtod_l+0xb8>
 8005202:	2300      	movs	r3, #0
 8005204:	3501      	adds	r5, #1
 8005206:	9519      	str	r5, [sp, #100]	@ 0x64
 8005208:	930e      	str	r3, [sp, #56]	@ 0x38
 800520a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800520c:	2b00      	cmp	r3, #0
 800520e:	f040 8582 	bne.w	8005d16 <_strtod_l+0xb7e>
 8005212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005214:	b1bb      	cbz	r3, 8005246 <_strtod_l+0xae>
 8005216:	4650      	mov	r0, sl
 8005218:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800521c:	b01f      	add	sp, #124	@ 0x7c
 800521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005222:	2920      	cmp	r1, #32
 8005224:	d1d0      	bne.n	80051c8 <_strtod_l+0x30>
 8005226:	3201      	adds	r2, #1
 8005228:	e7c3      	b.n	80051b2 <_strtod_l+0x1a>
 800522a:	292d      	cmp	r1, #45	@ 0x2d
 800522c:	d1cc      	bne.n	80051c8 <_strtod_l+0x30>
 800522e:	2101      	movs	r1, #1
 8005230:	910e      	str	r1, [sp, #56]	@ 0x38
 8005232:	1c51      	adds	r1, r2, #1
 8005234:	9119      	str	r1, [sp, #100]	@ 0x64
 8005236:	7852      	ldrb	r2, [r2, #1]
 8005238:	2a00      	cmp	r2, #0
 800523a:	d1c7      	bne.n	80051cc <_strtod_l+0x34>
 800523c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800523e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005240:	2b00      	cmp	r3, #0
 8005242:	f040 8566 	bne.w	8005d12 <_strtod_l+0xb7a>
 8005246:	4650      	mov	r0, sl
 8005248:	4659      	mov	r1, fp
 800524a:	e7e7      	b.n	800521c <_strtod_l+0x84>
 800524c:	2100      	movs	r1, #0
 800524e:	e7ef      	b.n	8005230 <_strtod_l+0x98>
 8005250:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005252:	b13a      	cbz	r2, 8005264 <_strtod_l+0xcc>
 8005254:	2135      	movs	r1, #53	@ 0x35
 8005256:	a81c      	add	r0, sp, #112	@ 0x70
 8005258:	f7ff ff38 	bl	80050cc <__copybits>
 800525c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800525e:	9805      	ldr	r0, [sp, #20]
 8005260:	f7ff fb18 	bl	8004894 <_Bfree>
 8005264:	3e01      	subs	r6, #1
 8005266:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005268:	2e04      	cmp	r6, #4
 800526a:	d806      	bhi.n	800527a <_strtod_l+0xe2>
 800526c:	e8df f006 	tbb	[pc, r6]
 8005270:	201d0314 	.word	0x201d0314
 8005274:	14          	.byte	0x14
 8005275:	00          	.byte	0x00
 8005276:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800527a:	05e1      	lsls	r1, r4, #23
 800527c:	bf48      	it	mi
 800527e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005282:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005286:	0d1b      	lsrs	r3, r3, #20
 8005288:	051b      	lsls	r3, r3, #20
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1bd      	bne.n	800520a <_strtod_l+0x72>
 800528e:	f7fe fb27 	bl	80038e0 <__errno>
 8005292:	2322      	movs	r3, #34	@ 0x22
 8005294:	6003      	str	r3, [r0, #0]
 8005296:	e7b8      	b.n	800520a <_strtod_l+0x72>
 8005298:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800529c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80052a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80052a4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80052a8:	e7e7      	b.n	800527a <_strtod_l+0xe2>
 80052aa:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005428 <_strtod_l+0x290>
 80052ae:	e7e4      	b.n	800527a <_strtod_l+0xe2>
 80052b0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80052b4:	f04f 3aff 	mov.w	sl, #4294967295
 80052b8:	e7df      	b.n	800527a <_strtod_l+0xe2>
 80052ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	9219      	str	r2, [sp, #100]	@ 0x64
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	2b30      	cmp	r3, #48	@ 0x30
 80052c4:	d0f9      	beq.n	80052ba <_strtod_l+0x122>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d09f      	beq.n	800520a <_strtod_l+0x72>
 80052ca:	2301      	movs	r3, #1
 80052cc:	2700      	movs	r7, #0
 80052ce:	220a      	movs	r2, #10
 80052d0:	46b9      	mov	r9, r7
 80052d2:	9308      	str	r3, [sp, #32]
 80052d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80052d6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80052d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80052da:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80052dc:	7805      	ldrb	r5, [r0, #0]
 80052de:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80052e2:	b2d9      	uxtb	r1, r3
 80052e4:	2909      	cmp	r1, #9
 80052e6:	d928      	bls.n	800533a <_strtod_l+0x1a2>
 80052e8:	2201      	movs	r2, #1
 80052ea:	4950      	ldr	r1, [pc, #320]	@ (800542c <_strtod_l+0x294>)
 80052ec:	f000 ffb5 	bl	800625a <strncmp>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d032      	beq.n	800535a <_strtod_l+0x1c2>
 80052f4:	2000      	movs	r0, #0
 80052f6:	462a      	mov	r2, r5
 80052f8:	4603      	mov	r3, r0
 80052fa:	464d      	mov	r5, r9
 80052fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80052fe:	2a65      	cmp	r2, #101	@ 0x65
 8005300:	d001      	beq.n	8005306 <_strtod_l+0x16e>
 8005302:	2a45      	cmp	r2, #69	@ 0x45
 8005304:	d114      	bne.n	8005330 <_strtod_l+0x198>
 8005306:	b91d      	cbnz	r5, 8005310 <_strtod_l+0x178>
 8005308:	9a08      	ldr	r2, [sp, #32]
 800530a:	4302      	orrs	r2, r0
 800530c:	d096      	beq.n	800523c <_strtod_l+0xa4>
 800530e:	2500      	movs	r5, #0
 8005310:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005312:	1c62      	adds	r2, r4, #1
 8005314:	9219      	str	r2, [sp, #100]	@ 0x64
 8005316:	7862      	ldrb	r2, [r4, #1]
 8005318:	2a2b      	cmp	r2, #43	@ 0x2b
 800531a:	d07a      	beq.n	8005412 <_strtod_l+0x27a>
 800531c:	2a2d      	cmp	r2, #45	@ 0x2d
 800531e:	d07e      	beq.n	800541e <_strtod_l+0x286>
 8005320:	f04f 0c00 	mov.w	ip, #0
 8005324:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005328:	2909      	cmp	r1, #9
 800532a:	f240 8085 	bls.w	8005438 <_strtod_l+0x2a0>
 800532e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005330:	f04f 0800 	mov.w	r8, #0
 8005334:	e0a5      	b.n	8005482 <_strtod_l+0x2ea>
 8005336:	2300      	movs	r3, #0
 8005338:	e7c8      	b.n	80052cc <_strtod_l+0x134>
 800533a:	f1b9 0f08 	cmp.w	r9, #8
 800533e:	bfd8      	it	le
 8005340:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005342:	f100 0001 	add.w	r0, r0, #1
 8005346:	bfd6      	itet	le
 8005348:	fb02 3301 	mlale	r3, r2, r1, r3
 800534c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005350:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005352:	f109 0901 	add.w	r9, r9, #1
 8005356:	9019      	str	r0, [sp, #100]	@ 0x64
 8005358:	e7bf      	b.n	80052da <_strtod_l+0x142>
 800535a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005360:	785a      	ldrb	r2, [r3, #1]
 8005362:	f1b9 0f00 	cmp.w	r9, #0
 8005366:	d03b      	beq.n	80053e0 <_strtod_l+0x248>
 8005368:	464d      	mov	r5, r9
 800536a:	900a      	str	r0, [sp, #40]	@ 0x28
 800536c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005370:	2b09      	cmp	r3, #9
 8005372:	d912      	bls.n	800539a <_strtod_l+0x202>
 8005374:	2301      	movs	r3, #1
 8005376:	e7c2      	b.n	80052fe <_strtod_l+0x166>
 8005378:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800537a:	3001      	adds	r0, #1
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005380:	785a      	ldrb	r2, [r3, #1]
 8005382:	2a30      	cmp	r2, #48	@ 0x30
 8005384:	d0f8      	beq.n	8005378 <_strtod_l+0x1e0>
 8005386:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800538a:	2b08      	cmp	r3, #8
 800538c:	f200 84c8 	bhi.w	8005d20 <_strtod_l+0xb88>
 8005390:	900a      	str	r0, [sp, #40]	@ 0x28
 8005392:	2000      	movs	r0, #0
 8005394:	4605      	mov	r5, r0
 8005396:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005398:	930c      	str	r3, [sp, #48]	@ 0x30
 800539a:	3a30      	subs	r2, #48	@ 0x30
 800539c:	f100 0301 	add.w	r3, r0, #1
 80053a0:	d018      	beq.n	80053d4 <_strtod_l+0x23c>
 80053a2:	462e      	mov	r6, r5
 80053a4:	f04f 0e0a 	mov.w	lr, #10
 80053a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80053aa:	4419      	add	r1, r3
 80053ac:	910a      	str	r1, [sp, #40]	@ 0x28
 80053ae:	1c71      	adds	r1, r6, #1
 80053b0:	eba1 0c05 	sub.w	ip, r1, r5
 80053b4:	4563      	cmp	r3, ip
 80053b6:	dc15      	bgt.n	80053e4 <_strtod_l+0x24c>
 80053b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80053bc:	182b      	adds	r3, r5, r0
 80053be:	2b08      	cmp	r3, #8
 80053c0:	f105 0501 	add.w	r5, r5, #1
 80053c4:	4405      	add	r5, r0
 80053c6:	dc1a      	bgt.n	80053fe <_strtod_l+0x266>
 80053c8:	230a      	movs	r3, #10
 80053ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80053cc:	fb03 2301 	mla	r3, r3, r1, r2
 80053d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053d2:	2300      	movs	r3, #0
 80053d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80053d6:	4618      	mov	r0, r3
 80053d8:	1c51      	adds	r1, r2, #1
 80053da:	9119      	str	r1, [sp, #100]	@ 0x64
 80053dc:	7852      	ldrb	r2, [r2, #1]
 80053de:	e7c5      	b.n	800536c <_strtod_l+0x1d4>
 80053e0:	4648      	mov	r0, r9
 80053e2:	e7ce      	b.n	8005382 <_strtod_l+0x1ea>
 80053e4:	2e08      	cmp	r6, #8
 80053e6:	dc05      	bgt.n	80053f4 <_strtod_l+0x25c>
 80053e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80053ea:	fb0e f606 	mul.w	r6, lr, r6
 80053ee:	960b      	str	r6, [sp, #44]	@ 0x2c
 80053f0:	460e      	mov	r6, r1
 80053f2:	e7dc      	b.n	80053ae <_strtod_l+0x216>
 80053f4:	2910      	cmp	r1, #16
 80053f6:	bfd8      	it	le
 80053f8:	fb0e f707 	mulle.w	r7, lr, r7
 80053fc:	e7f8      	b.n	80053f0 <_strtod_l+0x258>
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	bfdc      	itt	le
 8005402:	230a      	movle	r3, #10
 8005404:	fb03 2707 	mlale	r7, r3, r7, r2
 8005408:	e7e3      	b.n	80053d2 <_strtod_l+0x23a>
 800540a:	2300      	movs	r3, #0
 800540c:	930a      	str	r3, [sp, #40]	@ 0x28
 800540e:	2301      	movs	r3, #1
 8005410:	e77a      	b.n	8005308 <_strtod_l+0x170>
 8005412:	f04f 0c00 	mov.w	ip, #0
 8005416:	1ca2      	adds	r2, r4, #2
 8005418:	9219      	str	r2, [sp, #100]	@ 0x64
 800541a:	78a2      	ldrb	r2, [r4, #2]
 800541c:	e782      	b.n	8005324 <_strtod_l+0x18c>
 800541e:	f04f 0c01 	mov.w	ip, #1
 8005422:	e7f8      	b.n	8005416 <_strtod_l+0x27e>
 8005424:	080070fc 	.word	0x080070fc
 8005428:	7ff00000 	.word	0x7ff00000
 800542c:	08006f31 	.word	0x08006f31
 8005430:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005432:	1c51      	adds	r1, r2, #1
 8005434:	9119      	str	r1, [sp, #100]	@ 0x64
 8005436:	7852      	ldrb	r2, [r2, #1]
 8005438:	2a30      	cmp	r2, #48	@ 0x30
 800543a:	d0f9      	beq.n	8005430 <_strtod_l+0x298>
 800543c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005440:	2908      	cmp	r1, #8
 8005442:	f63f af75 	bhi.w	8005330 <_strtod_l+0x198>
 8005446:	f04f 080a 	mov.w	r8, #10
 800544a:	3a30      	subs	r2, #48	@ 0x30
 800544c:	9209      	str	r2, [sp, #36]	@ 0x24
 800544e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005450:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005452:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005454:	1c56      	adds	r6, r2, #1
 8005456:	9619      	str	r6, [sp, #100]	@ 0x64
 8005458:	7852      	ldrb	r2, [r2, #1]
 800545a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800545e:	f1be 0f09 	cmp.w	lr, #9
 8005462:	d939      	bls.n	80054d8 <_strtod_l+0x340>
 8005464:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005466:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800546a:	1a76      	subs	r6, r6, r1
 800546c:	2e08      	cmp	r6, #8
 800546e:	dc03      	bgt.n	8005478 <_strtod_l+0x2e0>
 8005470:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005472:	4588      	cmp	r8, r1
 8005474:	bfa8      	it	ge
 8005476:	4688      	movge	r8, r1
 8005478:	f1bc 0f00 	cmp.w	ip, #0
 800547c:	d001      	beq.n	8005482 <_strtod_l+0x2ea>
 800547e:	f1c8 0800 	rsb	r8, r8, #0
 8005482:	2d00      	cmp	r5, #0
 8005484:	d14e      	bne.n	8005524 <_strtod_l+0x38c>
 8005486:	9908      	ldr	r1, [sp, #32]
 8005488:	4308      	orrs	r0, r1
 800548a:	f47f aebe 	bne.w	800520a <_strtod_l+0x72>
 800548e:	2b00      	cmp	r3, #0
 8005490:	f47f aed4 	bne.w	800523c <_strtod_l+0xa4>
 8005494:	2a69      	cmp	r2, #105	@ 0x69
 8005496:	d028      	beq.n	80054ea <_strtod_l+0x352>
 8005498:	dc25      	bgt.n	80054e6 <_strtod_l+0x34e>
 800549a:	2a49      	cmp	r2, #73	@ 0x49
 800549c:	d025      	beq.n	80054ea <_strtod_l+0x352>
 800549e:	2a4e      	cmp	r2, #78	@ 0x4e
 80054a0:	f47f aecc 	bne.w	800523c <_strtod_l+0xa4>
 80054a4:	4999      	ldr	r1, [pc, #612]	@ (800570c <_strtod_l+0x574>)
 80054a6:	a819      	add	r0, sp, #100	@ 0x64
 80054a8:	f001 f9ec 	bl	8006884 <__match>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	f43f aec5 	beq.w	800523c <_strtod_l+0xa4>
 80054b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b28      	cmp	r3, #40	@ 0x28
 80054b8:	d12e      	bne.n	8005518 <_strtod_l+0x380>
 80054ba:	4995      	ldr	r1, [pc, #596]	@ (8005710 <_strtod_l+0x578>)
 80054bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80054be:	a819      	add	r0, sp, #100	@ 0x64
 80054c0:	f001 f9f4 	bl	80068ac <__hexnan>
 80054c4:	2805      	cmp	r0, #5
 80054c6:	d127      	bne.n	8005518 <_strtod_l+0x380>
 80054c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80054ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80054ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80054d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80054d6:	e698      	b.n	800520a <_strtod_l+0x72>
 80054d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80054da:	fb08 2101 	mla	r1, r8, r1, r2
 80054de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80054e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80054e4:	e7b5      	b.n	8005452 <_strtod_l+0x2ba>
 80054e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80054e8:	e7da      	b.n	80054a0 <_strtod_l+0x308>
 80054ea:	498a      	ldr	r1, [pc, #552]	@ (8005714 <_strtod_l+0x57c>)
 80054ec:	a819      	add	r0, sp, #100	@ 0x64
 80054ee:	f001 f9c9 	bl	8006884 <__match>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	f43f aea2 	beq.w	800523c <_strtod_l+0xa4>
 80054f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054fa:	4987      	ldr	r1, [pc, #540]	@ (8005718 <_strtod_l+0x580>)
 80054fc:	3b01      	subs	r3, #1
 80054fe:	a819      	add	r0, sp, #100	@ 0x64
 8005500:	9319      	str	r3, [sp, #100]	@ 0x64
 8005502:	f001 f9bf 	bl	8006884 <__match>
 8005506:	b910      	cbnz	r0, 800550e <_strtod_l+0x376>
 8005508:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800550a:	3301      	adds	r3, #1
 800550c:	9319      	str	r3, [sp, #100]	@ 0x64
 800550e:	f04f 0a00 	mov.w	sl, #0
 8005512:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800571c <_strtod_l+0x584>
 8005516:	e678      	b.n	800520a <_strtod_l+0x72>
 8005518:	4881      	ldr	r0, [pc, #516]	@ (8005720 <_strtod_l+0x588>)
 800551a:	f000 fef1 	bl	8006300 <nan>
 800551e:	4682      	mov	sl, r0
 8005520:	468b      	mov	fp, r1
 8005522:	e672      	b.n	800520a <_strtod_l+0x72>
 8005524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005526:	f1b9 0f00 	cmp.w	r9, #0
 800552a:	bf08      	it	eq
 800552c:	46a9      	moveq	r9, r5
 800552e:	eba8 0303 	sub.w	r3, r8, r3
 8005532:	2d10      	cmp	r5, #16
 8005534:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005536:	462c      	mov	r4, r5
 8005538:	9309      	str	r3, [sp, #36]	@ 0x24
 800553a:	bfa8      	it	ge
 800553c:	2410      	movge	r4, #16
 800553e:	f7fa ff51 	bl	80003e4 <__aeabi_ui2d>
 8005542:	2d09      	cmp	r5, #9
 8005544:	4682      	mov	sl, r0
 8005546:	468b      	mov	fp, r1
 8005548:	dc11      	bgt.n	800556e <_strtod_l+0x3d6>
 800554a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	f43f ae5c 	beq.w	800520a <_strtod_l+0x72>
 8005552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005554:	dd76      	ble.n	8005644 <_strtod_l+0x4ac>
 8005556:	2b16      	cmp	r3, #22
 8005558:	dc5d      	bgt.n	8005616 <_strtod_l+0x47e>
 800555a:	4972      	ldr	r1, [pc, #456]	@ (8005724 <_strtod_l+0x58c>)
 800555c:	4652      	mov	r2, sl
 800555e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005562:	465b      	mov	r3, fp
 8005564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005568:	f7fa ffb6 	bl	80004d8 <__aeabi_dmul>
 800556c:	e7d7      	b.n	800551e <_strtod_l+0x386>
 800556e:	4b6d      	ldr	r3, [pc, #436]	@ (8005724 <_strtod_l+0x58c>)
 8005570:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005574:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005578:	f7fa ffae 	bl	80004d8 <__aeabi_dmul>
 800557c:	4682      	mov	sl, r0
 800557e:	4638      	mov	r0, r7
 8005580:	468b      	mov	fp, r1
 8005582:	f7fa ff2f 	bl	80003e4 <__aeabi_ui2d>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4650      	mov	r0, sl
 800558c:	4659      	mov	r1, fp
 800558e:	f7fa fded 	bl	800016c <__adddf3>
 8005592:	2d0f      	cmp	r5, #15
 8005594:	4682      	mov	sl, r0
 8005596:	468b      	mov	fp, r1
 8005598:	ddd7      	ble.n	800554a <_strtod_l+0x3b2>
 800559a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800559c:	1b2c      	subs	r4, r5, r4
 800559e:	441c      	add	r4, r3
 80055a0:	2c00      	cmp	r4, #0
 80055a2:	f340 8093 	ble.w	80056cc <_strtod_l+0x534>
 80055a6:	f014 030f 	ands.w	r3, r4, #15
 80055aa:	d00a      	beq.n	80055c2 <_strtod_l+0x42a>
 80055ac:	495d      	ldr	r1, [pc, #372]	@ (8005724 <_strtod_l+0x58c>)
 80055ae:	4652      	mov	r2, sl
 80055b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80055b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055b8:	465b      	mov	r3, fp
 80055ba:	f7fa ff8d 	bl	80004d8 <__aeabi_dmul>
 80055be:	4682      	mov	sl, r0
 80055c0:	468b      	mov	fp, r1
 80055c2:	f034 040f 	bics.w	r4, r4, #15
 80055c6:	d073      	beq.n	80056b0 <_strtod_l+0x518>
 80055c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80055cc:	dd49      	ble.n	8005662 <_strtod_l+0x4ca>
 80055ce:	2400      	movs	r4, #0
 80055d0:	46a0      	mov	r8, r4
 80055d2:	46a1      	mov	r9, r4
 80055d4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80055d6:	2322      	movs	r3, #34	@ 0x22
 80055d8:	f04f 0a00 	mov.w	sl, #0
 80055dc:	9a05      	ldr	r2, [sp, #20]
 80055de:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800571c <_strtod_l+0x584>
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f43f ae0f 	beq.w	800520a <_strtod_l+0x72>
 80055ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80055ee:	9805      	ldr	r0, [sp, #20]
 80055f0:	f7ff f950 	bl	8004894 <_Bfree>
 80055f4:	4649      	mov	r1, r9
 80055f6:	9805      	ldr	r0, [sp, #20]
 80055f8:	f7ff f94c 	bl	8004894 <_Bfree>
 80055fc:	4641      	mov	r1, r8
 80055fe:	9805      	ldr	r0, [sp, #20]
 8005600:	f7ff f948 	bl	8004894 <_Bfree>
 8005604:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005606:	9805      	ldr	r0, [sp, #20]
 8005608:	f7ff f944 	bl	8004894 <_Bfree>
 800560c:	4621      	mov	r1, r4
 800560e:	9805      	ldr	r0, [sp, #20]
 8005610:	f7ff f940 	bl	8004894 <_Bfree>
 8005614:	e5f9      	b.n	800520a <_strtod_l+0x72>
 8005616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005618:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800561c:	4293      	cmp	r3, r2
 800561e:	dbbc      	blt.n	800559a <_strtod_l+0x402>
 8005620:	4c40      	ldr	r4, [pc, #256]	@ (8005724 <_strtod_l+0x58c>)
 8005622:	f1c5 050f 	rsb	r5, r5, #15
 8005626:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800562a:	4652      	mov	r2, sl
 800562c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005630:	465b      	mov	r3, fp
 8005632:	f7fa ff51 	bl	80004d8 <__aeabi_dmul>
 8005636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005638:	1b5d      	subs	r5, r3, r5
 800563a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800563e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005642:	e791      	b.n	8005568 <_strtod_l+0x3d0>
 8005644:	3316      	adds	r3, #22
 8005646:	dba8      	blt.n	800559a <_strtod_l+0x402>
 8005648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800564a:	4650      	mov	r0, sl
 800564c:	eba3 0808 	sub.w	r8, r3, r8
 8005650:	4b34      	ldr	r3, [pc, #208]	@ (8005724 <_strtod_l+0x58c>)
 8005652:	4659      	mov	r1, fp
 8005654:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005658:	e9d8 2300 	ldrd	r2, r3, [r8]
 800565c:	f7fb f866 	bl	800072c <__aeabi_ddiv>
 8005660:	e75d      	b.n	800551e <_strtod_l+0x386>
 8005662:	2300      	movs	r3, #0
 8005664:	4650      	mov	r0, sl
 8005666:	4659      	mov	r1, fp
 8005668:	461e      	mov	r6, r3
 800566a:	4f2f      	ldr	r7, [pc, #188]	@ (8005728 <_strtod_l+0x590>)
 800566c:	1124      	asrs	r4, r4, #4
 800566e:	2c01      	cmp	r4, #1
 8005670:	dc21      	bgt.n	80056b6 <_strtod_l+0x51e>
 8005672:	b10b      	cbz	r3, 8005678 <_strtod_l+0x4e0>
 8005674:	4682      	mov	sl, r0
 8005676:	468b      	mov	fp, r1
 8005678:	492b      	ldr	r1, [pc, #172]	@ (8005728 <_strtod_l+0x590>)
 800567a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800567e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005682:	4652      	mov	r2, sl
 8005684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005688:	465b      	mov	r3, fp
 800568a:	f7fa ff25 	bl	80004d8 <__aeabi_dmul>
 800568e:	4b23      	ldr	r3, [pc, #140]	@ (800571c <_strtod_l+0x584>)
 8005690:	460a      	mov	r2, r1
 8005692:	400b      	ands	r3, r1
 8005694:	4925      	ldr	r1, [pc, #148]	@ (800572c <_strtod_l+0x594>)
 8005696:	4682      	mov	sl, r0
 8005698:	428b      	cmp	r3, r1
 800569a:	d898      	bhi.n	80055ce <_strtod_l+0x436>
 800569c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80056a0:	428b      	cmp	r3, r1
 80056a2:	bf86      	itte	hi
 80056a4:	f04f 3aff 	movhi.w	sl, #4294967295
 80056a8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8005730 <_strtod_l+0x598>
 80056ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80056b0:	2300      	movs	r3, #0
 80056b2:	9308      	str	r3, [sp, #32]
 80056b4:	e076      	b.n	80057a4 <_strtod_l+0x60c>
 80056b6:	07e2      	lsls	r2, r4, #31
 80056b8:	d504      	bpl.n	80056c4 <_strtod_l+0x52c>
 80056ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056be:	f7fa ff0b 	bl	80004d8 <__aeabi_dmul>
 80056c2:	2301      	movs	r3, #1
 80056c4:	3601      	adds	r6, #1
 80056c6:	1064      	asrs	r4, r4, #1
 80056c8:	3708      	adds	r7, #8
 80056ca:	e7d0      	b.n	800566e <_strtod_l+0x4d6>
 80056cc:	d0f0      	beq.n	80056b0 <_strtod_l+0x518>
 80056ce:	4264      	negs	r4, r4
 80056d0:	f014 020f 	ands.w	r2, r4, #15
 80056d4:	d00a      	beq.n	80056ec <_strtod_l+0x554>
 80056d6:	4b13      	ldr	r3, [pc, #76]	@ (8005724 <_strtod_l+0x58c>)
 80056d8:	4650      	mov	r0, sl
 80056da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056de:	4659      	mov	r1, fp
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f7fb f822 	bl	800072c <__aeabi_ddiv>
 80056e8:	4682      	mov	sl, r0
 80056ea:	468b      	mov	fp, r1
 80056ec:	1124      	asrs	r4, r4, #4
 80056ee:	d0df      	beq.n	80056b0 <_strtod_l+0x518>
 80056f0:	2c1f      	cmp	r4, #31
 80056f2:	dd1f      	ble.n	8005734 <_strtod_l+0x59c>
 80056f4:	2400      	movs	r4, #0
 80056f6:	46a0      	mov	r8, r4
 80056f8:	46a1      	mov	r9, r4
 80056fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80056fc:	2322      	movs	r3, #34	@ 0x22
 80056fe:	9a05      	ldr	r2, [sp, #20]
 8005700:	f04f 0a00 	mov.w	sl, #0
 8005704:	f04f 0b00 	mov.w	fp, #0
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	e76b      	b.n	80055e4 <_strtod_l+0x44c>
 800570c:	08006e1f 	.word	0x08006e1f
 8005710:	080070e8 	.word	0x080070e8
 8005714:	08006e17 	.word	0x08006e17
 8005718:	08006e4e 	.word	0x08006e4e
 800571c:	7ff00000 	.word	0x7ff00000
 8005720:	08006f87 	.word	0x08006f87
 8005724:	08007020 	.word	0x08007020
 8005728:	08006ff8 	.word	0x08006ff8
 800572c:	7ca00000 	.word	0x7ca00000
 8005730:	7fefffff 	.word	0x7fefffff
 8005734:	f014 0310 	ands.w	r3, r4, #16
 8005738:	bf18      	it	ne
 800573a:	236a      	movne	r3, #106	@ 0x6a
 800573c:	4650      	mov	r0, sl
 800573e:	9308      	str	r3, [sp, #32]
 8005740:	4659      	mov	r1, fp
 8005742:	2300      	movs	r3, #0
 8005744:	4e77      	ldr	r6, [pc, #476]	@ (8005924 <_strtod_l+0x78c>)
 8005746:	07e7      	lsls	r7, r4, #31
 8005748:	d504      	bpl.n	8005754 <_strtod_l+0x5bc>
 800574a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800574e:	f7fa fec3 	bl	80004d8 <__aeabi_dmul>
 8005752:	2301      	movs	r3, #1
 8005754:	1064      	asrs	r4, r4, #1
 8005756:	f106 0608 	add.w	r6, r6, #8
 800575a:	d1f4      	bne.n	8005746 <_strtod_l+0x5ae>
 800575c:	b10b      	cbz	r3, 8005762 <_strtod_l+0x5ca>
 800575e:	4682      	mov	sl, r0
 8005760:	468b      	mov	fp, r1
 8005762:	9b08      	ldr	r3, [sp, #32]
 8005764:	b1b3      	cbz	r3, 8005794 <_strtod_l+0x5fc>
 8005766:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800576a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800576e:	2b00      	cmp	r3, #0
 8005770:	4659      	mov	r1, fp
 8005772:	dd0f      	ble.n	8005794 <_strtod_l+0x5fc>
 8005774:	2b1f      	cmp	r3, #31
 8005776:	dd58      	ble.n	800582a <_strtod_l+0x692>
 8005778:	2b34      	cmp	r3, #52	@ 0x34
 800577a:	bfd8      	it	le
 800577c:	f04f 33ff 	movle.w	r3, #4294967295
 8005780:	f04f 0a00 	mov.w	sl, #0
 8005784:	bfcf      	iteee	gt
 8005786:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800578a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800578e:	4093      	lslle	r3, r2
 8005790:	ea03 0b01 	andle.w	fp, r3, r1
 8005794:	2200      	movs	r2, #0
 8005796:	2300      	movs	r3, #0
 8005798:	4650      	mov	r0, sl
 800579a:	4659      	mov	r1, fp
 800579c:	f7fb f904 	bl	80009a8 <__aeabi_dcmpeq>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d1a7      	bne.n	80056f4 <_strtod_l+0x55c>
 80057a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057a6:	464a      	mov	r2, r9
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80057ac:	462b      	mov	r3, r5
 80057ae:	9805      	ldr	r0, [sp, #20]
 80057b0:	f7ff f8d8 	bl	8004964 <__s2b>
 80057b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80057b6:	2800      	cmp	r0, #0
 80057b8:	f43f af09 	beq.w	80055ce <_strtod_l+0x436>
 80057bc:	2400      	movs	r4, #0
 80057be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057c2:	2a00      	cmp	r2, #0
 80057c4:	eba3 0308 	sub.w	r3, r3, r8
 80057c8:	bfa8      	it	ge
 80057ca:	2300      	movge	r3, #0
 80057cc:	46a0      	mov	r8, r4
 80057ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80057d0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80057d4:	9316      	str	r3, [sp, #88]	@ 0x58
 80057d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057d8:	9805      	ldr	r0, [sp, #20]
 80057da:	6859      	ldr	r1, [r3, #4]
 80057dc:	f7ff f81a 	bl	8004814 <_Balloc>
 80057e0:	4681      	mov	r9, r0
 80057e2:	2800      	cmp	r0, #0
 80057e4:	f43f aef7 	beq.w	80055d6 <_strtod_l+0x43e>
 80057e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057ea:	300c      	adds	r0, #12
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	f103 010c 	add.w	r1, r3, #12
 80057f2:	3202      	adds	r2, #2
 80057f4:	0092      	lsls	r2, r2, #2
 80057f6:	f000 fd75 	bl	80062e4 <memcpy>
 80057fa:	ab1c      	add	r3, sp, #112	@ 0x70
 80057fc:	9301      	str	r3, [sp, #4]
 80057fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	4652      	mov	r2, sl
 8005804:	465b      	mov	r3, fp
 8005806:	9805      	ldr	r0, [sp, #20]
 8005808:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800580c:	f7ff fbd6 	bl	8004fbc <__d2b>
 8005810:	901a      	str	r0, [sp, #104]	@ 0x68
 8005812:	2800      	cmp	r0, #0
 8005814:	f43f aedf 	beq.w	80055d6 <_strtod_l+0x43e>
 8005818:	2101      	movs	r1, #1
 800581a:	9805      	ldr	r0, [sp, #20]
 800581c:	f7ff f938 	bl	8004a90 <__i2b>
 8005820:	4680      	mov	r8, r0
 8005822:	b948      	cbnz	r0, 8005838 <_strtod_l+0x6a0>
 8005824:	f04f 0800 	mov.w	r8, #0
 8005828:	e6d5      	b.n	80055d6 <_strtod_l+0x43e>
 800582a:	f04f 32ff 	mov.w	r2, #4294967295
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	ea03 0a0a 	and.w	sl, r3, sl
 8005836:	e7ad      	b.n	8005794 <_strtod_l+0x5fc>
 8005838:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800583a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800583c:	2d00      	cmp	r5, #0
 800583e:	bfab      	itete	ge
 8005840:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005842:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005844:	18ef      	addge	r7, r5, r3
 8005846:	1b5e      	sublt	r6, r3, r5
 8005848:	9b08      	ldr	r3, [sp, #32]
 800584a:	bfa8      	it	ge
 800584c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800584e:	eba5 0503 	sub.w	r5, r5, r3
 8005852:	4415      	add	r5, r2
 8005854:	4b34      	ldr	r3, [pc, #208]	@ (8005928 <_strtod_l+0x790>)
 8005856:	f105 35ff 	add.w	r5, r5, #4294967295
 800585a:	bfb8      	it	lt
 800585c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800585e:	429d      	cmp	r5, r3
 8005860:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005864:	da50      	bge.n	8005908 <_strtod_l+0x770>
 8005866:	1b5b      	subs	r3, r3, r5
 8005868:	2b1f      	cmp	r3, #31
 800586a:	f04f 0101 	mov.w	r1, #1
 800586e:	eba2 0203 	sub.w	r2, r2, r3
 8005872:	dc3d      	bgt.n	80058f0 <_strtod_l+0x758>
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	9313      	str	r3, [sp, #76]	@ 0x4c
 800587a:	2300      	movs	r3, #0
 800587c:	9310      	str	r3, [sp, #64]	@ 0x40
 800587e:	18bd      	adds	r5, r7, r2
 8005880:	9b08      	ldr	r3, [sp, #32]
 8005882:	42af      	cmp	r7, r5
 8005884:	4416      	add	r6, r2
 8005886:	441e      	add	r6, r3
 8005888:	463b      	mov	r3, r7
 800588a:	bfa8      	it	ge
 800588c:	462b      	movge	r3, r5
 800588e:	42b3      	cmp	r3, r6
 8005890:	bfa8      	it	ge
 8005892:	4633      	movge	r3, r6
 8005894:	2b00      	cmp	r3, #0
 8005896:	bfc2      	ittt	gt
 8005898:	1aed      	subgt	r5, r5, r3
 800589a:	1af6      	subgt	r6, r6, r3
 800589c:	1aff      	subgt	r7, r7, r3
 800589e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	dd16      	ble.n	80058d2 <_strtod_l+0x73a>
 80058a4:	4641      	mov	r1, r8
 80058a6:	461a      	mov	r2, r3
 80058a8:	9805      	ldr	r0, [sp, #20]
 80058aa:	f7ff f9a9 	bl	8004c00 <__pow5mult>
 80058ae:	4680      	mov	r8, r0
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d0b7      	beq.n	8005824 <_strtod_l+0x68c>
 80058b4:	4601      	mov	r1, r0
 80058b6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80058b8:	9805      	ldr	r0, [sp, #20]
 80058ba:	f7ff f8ff 	bl	8004abc <__multiply>
 80058be:	900a      	str	r0, [sp, #40]	@ 0x28
 80058c0:	2800      	cmp	r0, #0
 80058c2:	f43f ae88 	beq.w	80055d6 <_strtod_l+0x43e>
 80058c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80058c8:	9805      	ldr	r0, [sp, #20]
 80058ca:	f7fe ffe3 	bl	8004894 <_Bfree>
 80058ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80058d2:	2d00      	cmp	r5, #0
 80058d4:	dc1d      	bgt.n	8005912 <_strtod_l+0x77a>
 80058d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	dd27      	ble.n	800592c <_strtod_l+0x794>
 80058dc:	4649      	mov	r1, r9
 80058de:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80058e0:	9805      	ldr	r0, [sp, #20]
 80058e2:	f7ff f98d 	bl	8004c00 <__pow5mult>
 80058e6:	4681      	mov	r9, r0
 80058e8:	bb00      	cbnz	r0, 800592c <_strtod_l+0x794>
 80058ea:	f04f 0900 	mov.w	r9, #0
 80058ee:	e672      	b.n	80055d6 <_strtod_l+0x43e>
 80058f0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80058f4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80058f8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80058fc:	35e2      	adds	r5, #226	@ 0xe2
 80058fe:	fa01 f305 	lsl.w	r3, r1, r5
 8005902:	9310      	str	r3, [sp, #64]	@ 0x40
 8005904:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005906:	e7ba      	b.n	800587e <_strtod_l+0x6e6>
 8005908:	2300      	movs	r3, #0
 800590a:	9310      	str	r3, [sp, #64]	@ 0x40
 800590c:	2301      	movs	r3, #1
 800590e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005910:	e7b5      	b.n	800587e <_strtod_l+0x6e6>
 8005912:	462a      	mov	r2, r5
 8005914:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005916:	9805      	ldr	r0, [sp, #20]
 8005918:	f7ff f9cc 	bl	8004cb4 <__lshift>
 800591c:	901a      	str	r0, [sp, #104]	@ 0x68
 800591e:	2800      	cmp	r0, #0
 8005920:	d1d9      	bne.n	80058d6 <_strtod_l+0x73e>
 8005922:	e658      	b.n	80055d6 <_strtod_l+0x43e>
 8005924:	08007110 	.word	0x08007110
 8005928:	fffffc02 	.word	0xfffffc02
 800592c:	2e00      	cmp	r6, #0
 800592e:	dd07      	ble.n	8005940 <_strtod_l+0x7a8>
 8005930:	4649      	mov	r1, r9
 8005932:	4632      	mov	r2, r6
 8005934:	9805      	ldr	r0, [sp, #20]
 8005936:	f7ff f9bd 	bl	8004cb4 <__lshift>
 800593a:	4681      	mov	r9, r0
 800593c:	2800      	cmp	r0, #0
 800593e:	d0d4      	beq.n	80058ea <_strtod_l+0x752>
 8005940:	2f00      	cmp	r7, #0
 8005942:	dd08      	ble.n	8005956 <_strtod_l+0x7be>
 8005944:	4641      	mov	r1, r8
 8005946:	463a      	mov	r2, r7
 8005948:	9805      	ldr	r0, [sp, #20]
 800594a:	f7ff f9b3 	bl	8004cb4 <__lshift>
 800594e:	4680      	mov	r8, r0
 8005950:	2800      	cmp	r0, #0
 8005952:	f43f ae40 	beq.w	80055d6 <_strtod_l+0x43e>
 8005956:	464a      	mov	r2, r9
 8005958:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800595a:	9805      	ldr	r0, [sp, #20]
 800595c:	f7ff fa32 	bl	8004dc4 <__mdiff>
 8005960:	4604      	mov	r4, r0
 8005962:	2800      	cmp	r0, #0
 8005964:	f43f ae37 	beq.w	80055d6 <_strtod_l+0x43e>
 8005968:	68c3      	ldr	r3, [r0, #12]
 800596a:	4641      	mov	r1, r8
 800596c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800596e:	2300      	movs	r3, #0
 8005970:	60c3      	str	r3, [r0, #12]
 8005972:	f7ff fa0b 	bl	8004d8c <__mcmp>
 8005976:	2800      	cmp	r0, #0
 8005978:	da3d      	bge.n	80059f6 <_strtod_l+0x85e>
 800597a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800597c:	ea53 030a 	orrs.w	r3, r3, sl
 8005980:	d163      	bne.n	8005a4a <_strtod_l+0x8b2>
 8005982:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005986:	2b00      	cmp	r3, #0
 8005988:	d15f      	bne.n	8005a4a <_strtod_l+0x8b2>
 800598a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800598e:	0d1b      	lsrs	r3, r3, #20
 8005990:	051b      	lsls	r3, r3, #20
 8005992:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005996:	d958      	bls.n	8005a4a <_strtod_l+0x8b2>
 8005998:	6963      	ldr	r3, [r4, #20]
 800599a:	b913      	cbnz	r3, 80059a2 <_strtod_l+0x80a>
 800599c:	6923      	ldr	r3, [r4, #16]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	dd53      	ble.n	8005a4a <_strtod_l+0x8b2>
 80059a2:	4621      	mov	r1, r4
 80059a4:	2201      	movs	r2, #1
 80059a6:	9805      	ldr	r0, [sp, #20]
 80059a8:	f7ff f984 	bl	8004cb4 <__lshift>
 80059ac:	4641      	mov	r1, r8
 80059ae:	4604      	mov	r4, r0
 80059b0:	f7ff f9ec 	bl	8004d8c <__mcmp>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	dd48      	ble.n	8005a4a <_strtod_l+0x8b2>
 80059b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80059bc:	9a08      	ldr	r2, [sp, #32]
 80059be:	0d1b      	lsrs	r3, r3, #20
 80059c0:	051b      	lsls	r3, r3, #20
 80059c2:	2a00      	cmp	r2, #0
 80059c4:	d062      	beq.n	8005a8c <_strtod_l+0x8f4>
 80059c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80059ca:	d85f      	bhi.n	8005a8c <_strtod_l+0x8f4>
 80059cc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80059d0:	f67f ae94 	bls.w	80056fc <_strtod_l+0x564>
 80059d4:	4650      	mov	r0, sl
 80059d6:	4659      	mov	r1, fp
 80059d8:	4ba3      	ldr	r3, [pc, #652]	@ (8005c68 <_strtod_l+0xad0>)
 80059da:	2200      	movs	r2, #0
 80059dc:	f7fa fd7c 	bl	80004d8 <__aeabi_dmul>
 80059e0:	4ba2      	ldr	r3, [pc, #648]	@ (8005c6c <_strtod_l+0xad4>)
 80059e2:	4682      	mov	sl, r0
 80059e4:	400b      	ands	r3, r1
 80059e6:	468b      	mov	fp, r1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f47f adff 	bne.w	80055ec <_strtod_l+0x454>
 80059ee:	2322      	movs	r3, #34	@ 0x22
 80059f0:	9a05      	ldr	r2, [sp, #20]
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	e5fa      	b.n	80055ec <_strtod_l+0x454>
 80059f6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80059fa:	d165      	bne.n	8005ac8 <_strtod_l+0x930>
 80059fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80059fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a02:	b35a      	cbz	r2, 8005a5c <_strtod_l+0x8c4>
 8005a04:	4a9a      	ldr	r2, [pc, #616]	@ (8005c70 <_strtod_l+0xad8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d12b      	bne.n	8005a62 <_strtod_l+0x8ca>
 8005a0a:	9b08      	ldr	r3, [sp, #32]
 8005a0c:	4651      	mov	r1, sl
 8005a0e:	b303      	cbz	r3, 8005a52 <_strtod_l+0x8ba>
 8005a10:	465a      	mov	r2, fp
 8005a12:	4b96      	ldr	r3, [pc, #600]	@ (8005c6c <_strtod_l+0xad4>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1e:	d81b      	bhi.n	8005a58 <_strtod_l+0x8c0>
 8005a20:	0d1b      	lsrs	r3, r3, #20
 8005a22:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	4299      	cmp	r1, r3
 8005a2c:	d119      	bne.n	8005a62 <_strtod_l+0x8ca>
 8005a2e:	4b91      	ldr	r3, [pc, #580]	@ (8005c74 <_strtod_l+0xadc>)
 8005a30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d102      	bne.n	8005a3c <_strtod_l+0x8a4>
 8005a36:	3101      	adds	r1, #1
 8005a38:	f43f adcd 	beq.w	80055d6 <_strtod_l+0x43e>
 8005a3c:	f04f 0a00 	mov.w	sl, #0
 8005a40:	4b8a      	ldr	r3, [pc, #552]	@ (8005c6c <_strtod_l+0xad4>)
 8005a42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a44:	401a      	ands	r2, r3
 8005a46:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005a4a:	9b08      	ldr	r3, [sp, #32]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1c1      	bne.n	80059d4 <_strtod_l+0x83c>
 8005a50:	e5cc      	b.n	80055ec <_strtod_l+0x454>
 8005a52:	f04f 33ff 	mov.w	r3, #4294967295
 8005a56:	e7e8      	b.n	8005a2a <_strtod_l+0x892>
 8005a58:	4613      	mov	r3, r2
 8005a5a:	e7e6      	b.n	8005a2a <_strtod_l+0x892>
 8005a5c:	ea53 030a 	orrs.w	r3, r3, sl
 8005a60:	d0aa      	beq.n	80059b8 <_strtod_l+0x820>
 8005a62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a64:	b1db      	cbz	r3, 8005a9e <_strtod_l+0x906>
 8005a66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a68:	4213      	tst	r3, r2
 8005a6a:	d0ee      	beq.n	8005a4a <_strtod_l+0x8b2>
 8005a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a6e:	4650      	mov	r0, sl
 8005a70:	4659      	mov	r1, fp
 8005a72:	9a08      	ldr	r2, [sp, #32]
 8005a74:	b1bb      	cbz	r3, 8005aa6 <_strtod_l+0x90e>
 8005a76:	f7ff fb6d 	bl	8005154 <sulp>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a82:	f7fa fb73 	bl	800016c <__adddf3>
 8005a86:	4682      	mov	sl, r0
 8005a88:	468b      	mov	fp, r1
 8005a8a:	e7de      	b.n	8005a4a <_strtod_l+0x8b2>
 8005a8c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005a90:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005a94:	f04f 3aff 	mov.w	sl, #4294967295
 8005a98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005a9c:	e7d5      	b.n	8005a4a <_strtod_l+0x8b2>
 8005a9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005aa0:	ea13 0f0a 	tst.w	r3, sl
 8005aa4:	e7e1      	b.n	8005a6a <_strtod_l+0x8d2>
 8005aa6:	f7ff fb55 	bl	8005154 <sulp>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ab2:	f7fa fb59 	bl	8000168 <__aeabi_dsub>
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4682      	mov	sl, r0
 8005abc:	468b      	mov	fp, r1
 8005abe:	f7fa ff73 	bl	80009a8 <__aeabi_dcmpeq>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d0c1      	beq.n	8005a4a <_strtod_l+0x8b2>
 8005ac6:	e619      	b.n	80056fc <_strtod_l+0x564>
 8005ac8:	4641      	mov	r1, r8
 8005aca:	4620      	mov	r0, r4
 8005acc:	f7ff face 	bl	800506c <__ratio>
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005ad6:	4606      	mov	r6, r0
 8005ad8:	460f      	mov	r7, r1
 8005ada:	f7fa ff79 	bl	80009d0 <__aeabi_dcmple>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d06d      	beq.n	8005bbe <_strtod_l+0xa26>
 8005ae2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d178      	bne.n	8005bda <_strtod_l+0xa42>
 8005ae8:	f1ba 0f00 	cmp.w	sl, #0
 8005aec:	d156      	bne.n	8005b9c <_strtod_l+0xa04>
 8005aee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d158      	bne.n	8005baa <_strtod_l+0xa12>
 8005af8:	2200      	movs	r2, #0
 8005afa:	4630      	mov	r0, r6
 8005afc:	4639      	mov	r1, r7
 8005afe:	4b5e      	ldr	r3, [pc, #376]	@ (8005c78 <_strtod_l+0xae0>)
 8005b00:	f7fa ff5c 	bl	80009bc <__aeabi_dcmplt>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d157      	bne.n	8005bb8 <_strtod_l+0xa20>
 8005b08:	4630      	mov	r0, r6
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8005c7c <_strtod_l+0xae4>)
 8005b10:	f7fa fce2 	bl	80004d8 <__aeabi_dmul>
 8005b14:	4606      	mov	r6, r0
 8005b16:	460f      	mov	r7, r1
 8005b18:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005b1c:	9606      	str	r6, [sp, #24]
 8005b1e:	9307      	str	r3, [sp, #28]
 8005b20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b24:	4d51      	ldr	r5, [pc, #324]	@ (8005c6c <_strtod_l+0xad4>)
 8005b26:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005b2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b2c:	401d      	ands	r5, r3
 8005b2e:	4b54      	ldr	r3, [pc, #336]	@ (8005c80 <_strtod_l+0xae8>)
 8005b30:	429d      	cmp	r5, r3
 8005b32:	f040 80ab 	bne.w	8005c8c <_strtod_l+0xaf4>
 8005b36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b38:	4650      	mov	r0, sl
 8005b3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005b3e:	4659      	mov	r1, fp
 8005b40:	f7ff f9d4 	bl	8004eec <__ulp>
 8005b44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b48:	f7fa fcc6 	bl	80004d8 <__aeabi_dmul>
 8005b4c:	4652      	mov	r2, sl
 8005b4e:	465b      	mov	r3, fp
 8005b50:	f7fa fb0c 	bl	800016c <__adddf3>
 8005b54:	460b      	mov	r3, r1
 8005b56:	4945      	ldr	r1, [pc, #276]	@ (8005c6c <_strtod_l+0xad4>)
 8005b58:	4a4a      	ldr	r2, [pc, #296]	@ (8005c84 <_strtod_l+0xaec>)
 8005b5a:	4019      	ands	r1, r3
 8005b5c:	4291      	cmp	r1, r2
 8005b5e:	4682      	mov	sl, r0
 8005b60:	d942      	bls.n	8005be8 <_strtod_l+0xa50>
 8005b62:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b64:	4b43      	ldr	r3, [pc, #268]	@ (8005c74 <_strtod_l+0xadc>)
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d103      	bne.n	8005b72 <_strtod_l+0x9da>
 8005b6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	f43f ad32 	beq.w	80055d6 <_strtod_l+0x43e>
 8005b72:	f04f 3aff 	mov.w	sl, #4294967295
 8005b76:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8005c74 <_strtod_l+0xadc>
 8005b7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b7c:	9805      	ldr	r0, [sp, #20]
 8005b7e:	f7fe fe89 	bl	8004894 <_Bfree>
 8005b82:	4649      	mov	r1, r9
 8005b84:	9805      	ldr	r0, [sp, #20]
 8005b86:	f7fe fe85 	bl	8004894 <_Bfree>
 8005b8a:	4641      	mov	r1, r8
 8005b8c:	9805      	ldr	r0, [sp, #20]
 8005b8e:	f7fe fe81 	bl	8004894 <_Bfree>
 8005b92:	4621      	mov	r1, r4
 8005b94:	9805      	ldr	r0, [sp, #20]
 8005b96:	f7fe fe7d 	bl	8004894 <_Bfree>
 8005b9a:	e61c      	b.n	80057d6 <_strtod_l+0x63e>
 8005b9c:	f1ba 0f01 	cmp.w	sl, #1
 8005ba0:	d103      	bne.n	8005baa <_strtod_l+0xa12>
 8005ba2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f43f ada9 	beq.w	80056fc <_strtod_l+0x564>
 8005baa:	2200      	movs	r2, #0
 8005bac:	4b36      	ldr	r3, [pc, #216]	@ (8005c88 <_strtod_l+0xaf0>)
 8005bae:	2600      	movs	r6, #0
 8005bb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005bb4:	4f30      	ldr	r7, [pc, #192]	@ (8005c78 <_strtod_l+0xae0>)
 8005bb6:	e7b3      	b.n	8005b20 <_strtod_l+0x988>
 8005bb8:	2600      	movs	r6, #0
 8005bba:	4f30      	ldr	r7, [pc, #192]	@ (8005c7c <_strtod_l+0xae4>)
 8005bbc:	e7ac      	b.n	8005b18 <_strtod_l+0x980>
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8005c7c <_strtod_l+0xae4>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f7fa fc87 	bl	80004d8 <__aeabi_dmul>
 8005bca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bcc:	4606      	mov	r6, r0
 8005bce:	460f      	mov	r7, r1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0a1      	beq.n	8005b18 <_strtod_l+0x980>
 8005bd4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005bd8:	e7a2      	b.n	8005b20 <_strtod_l+0x988>
 8005bda:	2200      	movs	r2, #0
 8005bdc:	4b26      	ldr	r3, [pc, #152]	@ (8005c78 <_strtod_l+0xae0>)
 8005bde:	4616      	mov	r6, r2
 8005be0:	461f      	mov	r7, r3
 8005be2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005be6:	e79b      	b.n	8005b20 <_strtod_l+0x988>
 8005be8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005bec:	9b08      	ldr	r3, [sp, #32]
 8005bee:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1c1      	bne.n	8005b7a <_strtod_l+0x9e2>
 8005bf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005bfa:	0d1b      	lsrs	r3, r3, #20
 8005bfc:	051b      	lsls	r3, r3, #20
 8005bfe:	429d      	cmp	r5, r3
 8005c00:	d1bb      	bne.n	8005b7a <_strtod_l+0x9e2>
 8005c02:	4630      	mov	r0, r6
 8005c04:	4639      	mov	r1, r7
 8005c06:	f7fa ffaf 	bl	8000b68 <__aeabi_d2lz>
 8005c0a:	f7fa fc37 	bl	800047c <__aeabi_l2d>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4630      	mov	r0, r6
 8005c14:	4639      	mov	r1, r7
 8005c16:	f7fa faa7 	bl	8000168 <__aeabi_dsub>
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005c22:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005c26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c28:	ea46 060a 	orr.w	r6, r6, sl
 8005c2c:	431e      	orrs	r6, r3
 8005c2e:	d06a      	beq.n	8005d06 <_strtod_l+0xb6e>
 8005c30:	a309      	add	r3, pc, #36	@ (adr r3, 8005c58 <_strtod_l+0xac0>)
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	f7fa fec1 	bl	80009bc <__aeabi_dcmplt>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	f47f acd6 	bne.w	80055ec <_strtod_l+0x454>
 8005c40:	a307      	add	r3, pc, #28	@ (adr r3, 8005c60 <_strtod_l+0xac8>)
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c4a:	f7fa fed5 	bl	80009f8 <__aeabi_dcmpgt>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d093      	beq.n	8005b7a <_strtod_l+0x9e2>
 8005c52:	e4cb      	b.n	80055ec <_strtod_l+0x454>
 8005c54:	f3af 8000 	nop.w
 8005c58:	94a03595 	.word	0x94a03595
 8005c5c:	3fdfffff 	.word	0x3fdfffff
 8005c60:	35afe535 	.word	0x35afe535
 8005c64:	3fe00000 	.word	0x3fe00000
 8005c68:	39500000 	.word	0x39500000
 8005c6c:	7ff00000 	.word	0x7ff00000
 8005c70:	000fffff 	.word	0x000fffff
 8005c74:	7fefffff 	.word	0x7fefffff
 8005c78:	3ff00000 	.word	0x3ff00000
 8005c7c:	3fe00000 	.word	0x3fe00000
 8005c80:	7fe00000 	.word	0x7fe00000
 8005c84:	7c9fffff 	.word	0x7c9fffff
 8005c88:	bff00000 	.word	0xbff00000
 8005c8c:	9b08      	ldr	r3, [sp, #32]
 8005c8e:	b323      	cbz	r3, 8005cda <_strtod_l+0xb42>
 8005c90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005c94:	d821      	bhi.n	8005cda <_strtod_l+0xb42>
 8005c96:	a328      	add	r3, pc, #160	@ (adr r3, 8005d38 <_strtod_l+0xba0>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	f7fa fe96 	bl	80009d0 <__aeabi_dcmple>
 8005ca4:	b1a0      	cbz	r0, 8005cd0 <_strtod_l+0xb38>
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7fa feed 	bl	8000a88 <__aeabi_d2uiz>
 8005cae:	2801      	cmp	r0, #1
 8005cb0:	bf38      	it	cc
 8005cb2:	2001      	movcc	r0, #1
 8005cb4:	f7fa fb96 	bl	80003e4 <__aeabi_ui2d>
 8005cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cba:	4606      	mov	r6, r0
 8005cbc:	460f      	mov	r7, r1
 8005cbe:	b9fb      	cbnz	r3, 8005d00 <_strtod_l+0xb68>
 8005cc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cc4:	9014      	str	r0, [sp, #80]	@ 0x50
 8005cc6:	9315      	str	r3, [sp, #84]	@ 0x54
 8005cc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005ccc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005cd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005cd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005cd6:	1b5b      	subs	r3, r3, r5
 8005cd8:	9311      	str	r3, [sp, #68]	@ 0x44
 8005cda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005ce2:	f7ff f903 	bl	8004eec <__ulp>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4650      	mov	r0, sl
 8005cec:	4659      	mov	r1, fp
 8005cee:	f7fa fbf3 	bl	80004d8 <__aeabi_dmul>
 8005cf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005cf6:	f7fa fa39 	bl	800016c <__adddf3>
 8005cfa:	4682      	mov	sl, r0
 8005cfc:	468b      	mov	fp, r1
 8005cfe:	e775      	b.n	8005bec <_strtod_l+0xa54>
 8005d00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005d04:	e7e0      	b.n	8005cc8 <_strtod_l+0xb30>
 8005d06:	a30e      	add	r3, pc, #56	@ (adr r3, 8005d40 <_strtod_l+0xba8>)
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f7fa fe56 	bl	80009bc <__aeabi_dcmplt>
 8005d10:	e79d      	b.n	8005c4e <_strtod_l+0xab6>
 8005d12:	2300      	movs	r3, #0
 8005d14:	930e      	str	r3, [sp, #56]	@ 0x38
 8005d16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d18:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	f7ff ba79 	b.w	8005212 <_strtod_l+0x7a>
 8005d20:	2a65      	cmp	r2, #101	@ 0x65
 8005d22:	f43f ab72 	beq.w	800540a <_strtod_l+0x272>
 8005d26:	2a45      	cmp	r2, #69	@ 0x45
 8005d28:	f43f ab6f 	beq.w	800540a <_strtod_l+0x272>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f7ff bbaa 	b.w	8005486 <_strtod_l+0x2ee>
 8005d32:	bf00      	nop
 8005d34:	f3af 8000 	nop.w
 8005d38:	ffc00000 	.word	0xffc00000
 8005d3c:	41dfffff 	.word	0x41dfffff
 8005d40:	94a03595 	.word	0x94a03595
 8005d44:	3fcfffff 	.word	0x3fcfffff

08005d48 <_strtod_r>:
 8005d48:	4b01      	ldr	r3, [pc, #4]	@ (8005d50 <_strtod_r+0x8>)
 8005d4a:	f7ff ba25 	b.w	8005198 <_strtod_l>
 8005d4e:	bf00      	nop
 8005d50:	20000068 	.word	0x20000068

08005d54 <_strtol_l.isra.0>:
 8005d54:	2b24      	cmp	r3, #36	@ 0x24
 8005d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5a:	4686      	mov	lr, r0
 8005d5c:	4690      	mov	r8, r2
 8005d5e:	d801      	bhi.n	8005d64 <_strtol_l.isra.0+0x10>
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d106      	bne.n	8005d72 <_strtol_l.isra.0+0x1e>
 8005d64:	f7fd fdbc 	bl	80038e0 <__errno>
 8005d68:	2316      	movs	r3, #22
 8005d6a:	6003      	str	r3, [r0, #0]
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d72:	460d      	mov	r5, r1
 8005d74:	4833      	ldr	r0, [pc, #204]	@ (8005e44 <_strtol_l.isra.0+0xf0>)
 8005d76:	462a      	mov	r2, r5
 8005d78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d7c:	5d06      	ldrb	r6, [r0, r4]
 8005d7e:	f016 0608 	ands.w	r6, r6, #8
 8005d82:	d1f8      	bne.n	8005d76 <_strtol_l.isra.0+0x22>
 8005d84:	2c2d      	cmp	r4, #45	@ 0x2d
 8005d86:	d110      	bne.n	8005daa <_strtol_l.isra.0+0x56>
 8005d88:	2601      	movs	r6, #1
 8005d8a:	782c      	ldrb	r4, [r5, #0]
 8005d8c:	1c95      	adds	r5, r2, #2
 8005d8e:	f033 0210 	bics.w	r2, r3, #16
 8005d92:	d115      	bne.n	8005dc0 <_strtol_l.isra.0+0x6c>
 8005d94:	2c30      	cmp	r4, #48	@ 0x30
 8005d96:	d10d      	bne.n	8005db4 <_strtol_l.isra.0+0x60>
 8005d98:	782a      	ldrb	r2, [r5, #0]
 8005d9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005d9e:	2a58      	cmp	r2, #88	@ 0x58
 8005da0:	d108      	bne.n	8005db4 <_strtol_l.isra.0+0x60>
 8005da2:	786c      	ldrb	r4, [r5, #1]
 8005da4:	3502      	adds	r5, #2
 8005da6:	2310      	movs	r3, #16
 8005da8:	e00a      	b.n	8005dc0 <_strtol_l.isra.0+0x6c>
 8005daa:	2c2b      	cmp	r4, #43	@ 0x2b
 8005dac:	bf04      	itt	eq
 8005dae:	782c      	ldrbeq	r4, [r5, #0]
 8005db0:	1c95      	addeq	r5, r2, #2
 8005db2:	e7ec      	b.n	8005d8e <_strtol_l.isra.0+0x3a>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f6      	bne.n	8005da6 <_strtol_l.isra.0+0x52>
 8005db8:	2c30      	cmp	r4, #48	@ 0x30
 8005dba:	bf14      	ite	ne
 8005dbc:	230a      	movne	r3, #10
 8005dbe:	2308      	moveq	r3, #8
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005dc6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005dca:	fbbc f9f3 	udiv	r9, ip, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005dd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005dd8:	2f09      	cmp	r7, #9
 8005dda:	d80f      	bhi.n	8005dfc <_strtol_l.isra.0+0xa8>
 8005ddc:	463c      	mov	r4, r7
 8005dde:	42a3      	cmp	r3, r4
 8005de0:	dd1b      	ble.n	8005e1a <_strtol_l.isra.0+0xc6>
 8005de2:	1c57      	adds	r7, r2, #1
 8005de4:	d007      	beq.n	8005df6 <_strtol_l.isra.0+0xa2>
 8005de6:	4581      	cmp	r9, r0
 8005de8:	d314      	bcc.n	8005e14 <_strtol_l.isra.0+0xc0>
 8005dea:	d101      	bne.n	8005df0 <_strtol_l.isra.0+0x9c>
 8005dec:	45a2      	cmp	sl, r4
 8005dee:	db11      	blt.n	8005e14 <_strtol_l.isra.0+0xc0>
 8005df0:	2201      	movs	r2, #1
 8005df2:	fb00 4003 	mla	r0, r0, r3, r4
 8005df6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dfa:	e7eb      	b.n	8005dd4 <_strtol_l.isra.0+0x80>
 8005dfc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005e00:	2f19      	cmp	r7, #25
 8005e02:	d801      	bhi.n	8005e08 <_strtol_l.isra.0+0xb4>
 8005e04:	3c37      	subs	r4, #55	@ 0x37
 8005e06:	e7ea      	b.n	8005dde <_strtol_l.isra.0+0x8a>
 8005e08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005e0c:	2f19      	cmp	r7, #25
 8005e0e:	d804      	bhi.n	8005e1a <_strtol_l.isra.0+0xc6>
 8005e10:	3c57      	subs	r4, #87	@ 0x57
 8005e12:	e7e4      	b.n	8005dde <_strtol_l.isra.0+0x8a>
 8005e14:	f04f 32ff 	mov.w	r2, #4294967295
 8005e18:	e7ed      	b.n	8005df6 <_strtol_l.isra.0+0xa2>
 8005e1a:	1c53      	adds	r3, r2, #1
 8005e1c:	d108      	bne.n	8005e30 <_strtol_l.isra.0+0xdc>
 8005e1e:	2322      	movs	r3, #34	@ 0x22
 8005e20:	4660      	mov	r0, ip
 8005e22:	f8ce 3000 	str.w	r3, [lr]
 8005e26:	f1b8 0f00 	cmp.w	r8, #0
 8005e2a:	d0a0      	beq.n	8005d6e <_strtol_l.isra.0+0x1a>
 8005e2c:	1e69      	subs	r1, r5, #1
 8005e2e:	e006      	b.n	8005e3e <_strtol_l.isra.0+0xea>
 8005e30:	b106      	cbz	r6, 8005e34 <_strtol_l.isra.0+0xe0>
 8005e32:	4240      	negs	r0, r0
 8005e34:	f1b8 0f00 	cmp.w	r8, #0
 8005e38:	d099      	beq.n	8005d6e <_strtol_l.isra.0+0x1a>
 8005e3a:	2a00      	cmp	r2, #0
 8005e3c:	d1f6      	bne.n	8005e2c <_strtol_l.isra.0+0xd8>
 8005e3e:	f8c8 1000 	str.w	r1, [r8]
 8005e42:	e794      	b.n	8005d6e <_strtol_l.isra.0+0x1a>
 8005e44:	08007139 	.word	0x08007139

08005e48 <_strtol_r>:
 8005e48:	f7ff bf84 	b.w	8005d54 <_strtol_l.isra.0>

08005e4c <__ssputs_r>:
 8005e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	461f      	mov	r7, r3
 8005e52:	688e      	ldr	r6, [r1, #8]
 8005e54:	4682      	mov	sl, r0
 8005e56:	42be      	cmp	r6, r7
 8005e58:	460c      	mov	r4, r1
 8005e5a:	4690      	mov	r8, r2
 8005e5c:	680b      	ldr	r3, [r1, #0]
 8005e5e:	d82d      	bhi.n	8005ebc <__ssputs_r+0x70>
 8005e60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e68:	d026      	beq.n	8005eb8 <__ssputs_r+0x6c>
 8005e6a:	6965      	ldr	r5, [r4, #20]
 8005e6c:	6909      	ldr	r1, [r1, #16]
 8005e6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e72:	eba3 0901 	sub.w	r9, r3, r1
 8005e76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e7a:	1c7b      	adds	r3, r7, #1
 8005e7c:	444b      	add	r3, r9
 8005e7e:	106d      	asrs	r5, r5, #1
 8005e80:	429d      	cmp	r5, r3
 8005e82:	bf38      	it	cc
 8005e84:	461d      	movcc	r5, r3
 8005e86:	0553      	lsls	r3, r2, #21
 8005e88:	d527      	bpl.n	8005eda <__ssputs_r+0x8e>
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	f7fe fc36 	bl	80046fc <_malloc_r>
 8005e90:	4606      	mov	r6, r0
 8005e92:	b360      	cbz	r0, 8005eee <__ssputs_r+0xa2>
 8005e94:	464a      	mov	r2, r9
 8005e96:	6921      	ldr	r1, [r4, #16]
 8005e98:	f000 fa24 	bl	80062e4 <memcpy>
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	6126      	str	r6, [r4, #16]
 8005eaa:	444e      	add	r6, r9
 8005eac:	6026      	str	r6, [r4, #0]
 8005eae:	463e      	mov	r6, r7
 8005eb0:	6165      	str	r5, [r4, #20]
 8005eb2:	eba5 0509 	sub.w	r5, r5, r9
 8005eb6:	60a5      	str	r5, [r4, #8]
 8005eb8:	42be      	cmp	r6, r7
 8005eba:	d900      	bls.n	8005ebe <__ssputs_r+0x72>
 8005ebc:	463e      	mov	r6, r7
 8005ebe:	4632      	mov	r2, r6
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	6820      	ldr	r0, [r4, #0]
 8005ec4:	f000 f9af 	bl	8006226 <memmove>
 8005ec8:	2000      	movs	r0, #0
 8005eca:	68a3      	ldr	r3, [r4, #8]
 8005ecc:	1b9b      	subs	r3, r3, r6
 8005ece:	60a3      	str	r3, [r4, #8]
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	4433      	add	r3, r6
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eda:	462a      	mov	r2, r5
 8005edc:	f000 fd93 	bl	8006a06 <_realloc_r>
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d1e0      	bne.n	8005ea8 <__ssputs_r+0x5c>
 8005ee6:	4650      	mov	r0, sl
 8005ee8:	6921      	ldr	r1, [r4, #16]
 8005eea:	f7fe fb95 	bl	8004618 <_free_r>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	f8ca 3000 	str.w	r3, [sl]
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8005efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005efe:	81a3      	strh	r3, [r4, #12]
 8005f00:	e7e9      	b.n	8005ed6 <__ssputs_r+0x8a>
	...

08005f04 <_svfiprintf_r>:
 8005f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f08:	4698      	mov	r8, r3
 8005f0a:	898b      	ldrh	r3, [r1, #12]
 8005f0c:	4607      	mov	r7, r0
 8005f0e:	061b      	lsls	r3, r3, #24
 8005f10:	460d      	mov	r5, r1
 8005f12:	4614      	mov	r4, r2
 8005f14:	b09d      	sub	sp, #116	@ 0x74
 8005f16:	d510      	bpl.n	8005f3a <_svfiprintf_r+0x36>
 8005f18:	690b      	ldr	r3, [r1, #16]
 8005f1a:	b973      	cbnz	r3, 8005f3a <_svfiprintf_r+0x36>
 8005f1c:	2140      	movs	r1, #64	@ 0x40
 8005f1e:	f7fe fbed 	bl	80046fc <_malloc_r>
 8005f22:	6028      	str	r0, [r5, #0]
 8005f24:	6128      	str	r0, [r5, #16]
 8005f26:	b930      	cbnz	r0, 8005f36 <_svfiprintf_r+0x32>
 8005f28:	230c      	movs	r3, #12
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f30:	b01d      	add	sp, #116	@ 0x74
 8005f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f36:	2340      	movs	r3, #64	@ 0x40
 8005f38:	616b      	str	r3, [r5, #20]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f3e:	2320      	movs	r3, #32
 8005f40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f44:	2330      	movs	r3, #48	@ 0x30
 8005f46:	f04f 0901 	mov.w	r9, #1
 8005f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f4e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80060e8 <_svfiprintf_r+0x1e4>
 8005f52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f56:	4623      	mov	r3, r4
 8005f58:	469a      	mov	sl, r3
 8005f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f5e:	b10a      	cbz	r2, 8005f64 <_svfiprintf_r+0x60>
 8005f60:	2a25      	cmp	r2, #37	@ 0x25
 8005f62:	d1f9      	bne.n	8005f58 <_svfiprintf_r+0x54>
 8005f64:	ebba 0b04 	subs.w	fp, sl, r4
 8005f68:	d00b      	beq.n	8005f82 <_svfiprintf_r+0x7e>
 8005f6a:	465b      	mov	r3, fp
 8005f6c:	4622      	mov	r2, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4638      	mov	r0, r7
 8005f72:	f7ff ff6b 	bl	8005e4c <__ssputs_r>
 8005f76:	3001      	adds	r0, #1
 8005f78:	f000 80a7 	beq.w	80060ca <_svfiprintf_r+0x1c6>
 8005f7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f7e:	445a      	add	r2, fp
 8005f80:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f82:	f89a 3000 	ldrb.w	r3, [sl]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 809f 	beq.w	80060ca <_svfiprintf_r+0x1c6>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f96:	f10a 0a01 	add.w	sl, sl, #1
 8005f9a:	9304      	str	r3, [sp, #16]
 8005f9c:	9307      	str	r3, [sp, #28]
 8005f9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fa2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fa4:	4654      	mov	r4, sl
 8005fa6:	2205      	movs	r2, #5
 8005fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fac:	484e      	ldr	r0, [pc, #312]	@ (80060e8 <_svfiprintf_r+0x1e4>)
 8005fae:	f7fd fcc4 	bl	800393a <memchr>
 8005fb2:	9a04      	ldr	r2, [sp, #16]
 8005fb4:	b9d8      	cbnz	r0, 8005fee <_svfiprintf_r+0xea>
 8005fb6:	06d0      	lsls	r0, r2, #27
 8005fb8:	bf44      	itt	mi
 8005fba:	2320      	movmi	r3, #32
 8005fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fc0:	0711      	lsls	r1, r2, #28
 8005fc2:	bf44      	itt	mi
 8005fc4:	232b      	movmi	r3, #43	@ 0x2b
 8005fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fca:	f89a 3000 	ldrb.w	r3, [sl]
 8005fce:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fd0:	d015      	beq.n	8005ffe <_svfiprintf_r+0xfa>
 8005fd2:	4654      	mov	r4, sl
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	f04f 0c0a 	mov.w	ip, #10
 8005fda:	9a07      	ldr	r2, [sp, #28]
 8005fdc:	4621      	mov	r1, r4
 8005fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fe2:	3b30      	subs	r3, #48	@ 0x30
 8005fe4:	2b09      	cmp	r3, #9
 8005fe6:	d94b      	bls.n	8006080 <_svfiprintf_r+0x17c>
 8005fe8:	b1b0      	cbz	r0, 8006018 <_svfiprintf_r+0x114>
 8005fea:	9207      	str	r2, [sp, #28]
 8005fec:	e014      	b.n	8006018 <_svfiprintf_r+0x114>
 8005fee:	eba0 0308 	sub.w	r3, r0, r8
 8005ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	46a2      	mov	sl, r4
 8005ffa:	9304      	str	r3, [sp, #16]
 8005ffc:	e7d2      	b.n	8005fa4 <_svfiprintf_r+0xa0>
 8005ffe:	9b03      	ldr	r3, [sp, #12]
 8006000:	1d19      	adds	r1, r3, #4
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	9103      	str	r1, [sp, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	bfbb      	ittet	lt
 800600a:	425b      	neglt	r3, r3
 800600c:	f042 0202 	orrlt.w	r2, r2, #2
 8006010:	9307      	strge	r3, [sp, #28]
 8006012:	9307      	strlt	r3, [sp, #28]
 8006014:	bfb8      	it	lt
 8006016:	9204      	strlt	r2, [sp, #16]
 8006018:	7823      	ldrb	r3, [r4, #0]
 800601a:	2b2e      	cmp	r3, #46	@ 0x2e
 800601c:	d10a      	bne.n	8006034 <_svfiprintf_r+0x130>
 800601e:	7863      	ldrb	r3, [r4, #1]
 8006020:	2b2a      	cmp	r3, #42	@ 0x2a
 8006022:	d132      	bne.n	800608a <_svfiprintf_r+0x186>
 8006024:	9b03      	ldr	r3, [sp, #12]
 8006026:	3402      	adds	r4, #2
 8006028:	1d1a      	adds	r2, r3, #4
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	9203      	str	r2, [sp, #12]
 800602e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006032:	9305      	str	r3, [sp, #20]
 8006034:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80060ec <_svfiprintf_r+0x1e8>
 8006038:	2203      	movs	r2, #3
 800603a:	4650      	mov	r0, sl
 800603c:	7821      	ldrb	r1, [r4, #0]
 800603e:	f7fd fc7c 	bl	800393a <memchr>
 8006042:	b138      	cbz	r0, 8006054 <_svfiprintf_r+0x150>
 8006044:	2240      	movs	r2, #64	@ 0x40
 8006046:	9b04      	ldr	r3, [sp, #16]
 8006048:	eba0 000a 	sub.w	r0, r0, sl
 800604c:	4082      	lsls	r2, r0
 800604e:	4313      	orrs	r3, r2
 8006050:	3401      	adds	r4, #1
 8006052:	9304      	str	r3, [sp, #16]
 8006054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006058:	2206      	movs	r2, #6
 800605a:	4825      	ldr	r0, [pc, #148]	@ (80060f0 <_svfiprintf_r+0x1ec>)
 800605c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006060:	f7fd fc6b 	bl	800393a <memchr>
 8006064:	2800      	cmp	r0, #0
 8006066:	d036      	beq.n	80060d6 <_svfiprintf_r+0x1d2>
 8006068:	4b22      	ldr	r3, [pc, #136]	@ (80060f4 <_svfiprintf_r+0x1f0>)
 800606a:	bb1b      	cbnz	r3, 80060b4 <_svfiprintf_r+0x1b0>
 800606c:	9b03      	ldr	r3, [sp, #12]
 800606e:	3307      	adds	r3, #7
 8006070:	f023 0307 	bic.w	r3, r3, #7
 8006074:	3308      	adds	r3, #8
 8006076:	9303      	str	r3, [sp, #12]
 8006078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800607a:	4433      	add	r3, r6
 800607c:	9309      	str	r3, [sp, #36]	@ 0x24
 800607e:	e76a      	b.n	8005f56 <_svfiprintf_r+0x52>
 8006080:	460c      	mov	r4, r1
 8006082:	2001      	movs	r0, #1
 8006084:	fb0c 3202 	mla	r2, ip, r2, r3
 8006088:	e7a8      	b.n	8005fdc <_svfiprintf_r+0xd8>
 800608a:	2300      	movs	r3, #0
 800608c:	f04f 0c0a 	mov.w	ip, #10
 8006090:	4619      	mov	r1, r3
 8006092:	3401      	adds	r4, #1
 8006094:	9305      	str	r3, [sp, #20]
 8006096:	4620      	mov	r0, r4
 8006098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800609c:	3a30      	subs	r2, #48	@ 0x30
 800609e:	2a09      	cmp	r2, #9
 80060a0:	d903      	bls.n	80060aa <_svfiprintf_r+0x1a6>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0c6      	beq.n	8006034 <_svfiprintf_r+0x130>
 80060a6:	9105      	str	r1, [sp, #20]
 80060a8:	e7c4      	b.n	8006034 <_svfiprintf_r+0x130>
 80060aa:	4604      	mov	r4, r0
 80060ac:	2301      	movs	r3, #1
 80060ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80060b2:	e7f0      	b.n	8006096 <_svfiprintf_r+0x192>
 80060b4:	ab03      	add	r3, sp, #12
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	462a      	mov	r2, r5
 80060ba:	4638      	mov	r0, r7
 80060bc:	4b0e      	ldr	r3, [pc, #56]	@ (80060f8 <_svfiprintf_r+0x1f4>)
 80060be:	a904      	add	r1, sp, #16
 80060c0:	f7fc fb18 	bl	80026f4 <_printf_float>
 80060c4:	1c42      	adds	r2, r0, #1
 80060c6:	4606      	mov	r6, r0
 80060c8:	d1d6      	bne.n	8006078 <_svfiprintf_r+0x174>
 80060ca:	89ab      	ldrh	r3, [r5, #12]
 80060cc:	065b      	lsls	r3, r3, #25
 80060ce:	f53f af2d 	bmi.w	8005f2c <_svfiprintf_r+0x28>
 80060d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060d4:	e72c      	b.n	8005f30 <_svfiprintf_r+0x2c>
 80060d6:	ab03      	add	r3, sp, #12
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	462a      	mov	r2, r5
 80060dc:	4638      	mov	r0, r7
 80060de:	4b06      	ldr	r3, [pc, #24]	@ (80060f8 <_svfiprintf_r+0x1f4>)
 80060e0:	a904      	add	r1, sp, #16
 80060e2:	f7fc fda5 	bl	8002c30 <_printf_i>
 80060e6:	e7ed      	b.n	80060c4 <_svfiprintf_r+0x1c0>
 80060e8:	08006f33 	.word	0x08006f33
 80060ec:	08006f39 	.word	0x08006f39
 80060f0:	08006f3d 	.word	0x08006f3d
 80060f4:	080026f5 	.word	0x080026f5
 80060f8:	08005e4d 	.word	0x08005e4d

080060fc <__swhatbuf_r>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	460c      	mov	r4, r1
 8006100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006104:	4615      	mov	r5, r2
 8006106:	2900      	cmp	r1, #0
 8006108:	461e      	mov	r6, r3
 800610a:	b096      	sub	sp, #88	@ 0x58
 800610c:	da0c      	bge.n	8006128 <__swhatbuf_r+0x2c>
 800610e:	89a3      	ldrh	r3, [r4, #12]
 8006110:	2100      	movs	r1, #0
 8006112:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006116:	bf14      	ite	ne
 8006118:	2340      	movne	r3, #64	@ 0x40
 800611a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800611e:	2000      	movs	r0, #0
 8006120:	6031      	str	r1, [r6, #0]
 8006122:	602b      	str	r3, [r5, #0]
 8006124:	b016      	add	sp, #88	@ 0x58
 8006126:	bd70      	pop	{r4, r5, r6, pc}
 8006128:	466a      	mov	r2, sp
 800612a:	f000 f8a9 	bl	8006280 <_fstat_r>
 800612e:	2800      	cmp	r0, #0
 8006130:	dbed      	blt.n	800610e <__swhatbuf_r+0x12>
 8006132:	9901      	ldr	r1, [sp, #4]
 8006134:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006138:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800613c:	4259      	negs	r1, r3
 800613e:	4159      	adcs	r1, r3
 8006140:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006144:	e7eb      	b.n	800611e <__swhatbuf_r+0x22>

08006146 <__smakebuf_r>:
 8006146:	898b      	ldrh	r3, [r1, #12]
 8006148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800614a:	079d      	lsls	r5, r3, #30
 800614c:	4606      	mov	r6, r0
 800614e:	460c      	mov	r4, r1
 8006150:	d507      	bpl.n	8006162 <__smakebuf_r+0x1c>
 8006152:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006156:	6023      	str	r3, [r4, #0]
 8006158:	6123      	str	r3, [r4, #16]
 800615a:	2301      	movs	r3, #1
 800615c:	6163      	str	r3, [r4, #20]
 800615e:	b003      	add	sp, #12
 8006160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006162:	466a      	mov	r2, sp
 8006164:	ab01      	add	r3, sp, #4
 8006166:	f7ff ffc9 	bl	80060fc <__swhatbuf_r>
 800616a:	9f00      	ldr	r7, [sp, #0]
 800616c:	4605      	mov	r5, r0
 800616e:	4639      	mov	r1, r7
 8006170:	4630      	mov	r0, r6
 8006172:	f7fe fac3 	bl	80046fc <_malloc_r>
 8006176:	b948      	cbnz	r0, 800618c <__smakebuf_r+0x46>
 8006178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800617c:	059a      	lsls	r2, r3, #22
 800617e:	d4ee      	bmi.n	800615e <__smakebuf_r+0x18>
 8006180:	f023 0303 	bic.w	r3, r3, #3
 8006184:	f043 0302 	orr.w	r3, r3, #2
 8006188:	81a3      	strh	r3, [r4, #12]
 800618a:	e7e2      	b.n	8006152 <__smakebuf_r+0xc>
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	9b01      	ldr	r3, [sp, #4]
 800619a:	6020      	str	r0, [r4, #0]
 800619c:	b15b      	cbz	r3, 80061b6 <__smakebuf_r+0x70>
 800619e:	4630      	mov	r0, r6
 80061a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061a4:	f000 f87e 	bl	80062a4 <_isatty_r>
 80061a8:	b128      	cbz	r0, 80061b6 <__smakebuf_r+0x70>
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	f023 0303 	bic.w	r3, r3, #3
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	81a3      	strh	r3, [r4, #12]
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	431d      	orrs	r5, r3
 80061ba:	81a5      	strh	r5, [r4, #12]
 80061bc:	e7cf      	b.n	800615e <__smakebuf_r+0x18>

080061be <_putc_r>:
 80061be:	b570      	push	{r4, r5, r6, lr}
 80061c0:	460d      	mov	r5, r1
 80061c2:	4614      	mov	r4, r2
 80061c4:	4606      	mov	r6, r0
 80061c6:	b118      	cbz	r0, 80061d0 <_putc_r+0x12>
 80061c8:	6a03      	ldr	r3, [r0, #32]
 80061ca:	b90b      	cbnz	r3, 80061d0 <_putc_r+0x12>
 80061cc:	f7fd f9a0 	bl	8003510 <__sinit>
 80061d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061d2:	07d8      	lsls	r0, r3, #31
 80061d4:	d405      	bmi.n	80061e2 <_putc_r+0x24>
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	0599      	lsls	r1, r3, #22
 80061da:	d402      	bmi.n	80061e2 <_putc_r+0x24>
 80061dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061de:	f7fd fbaa 	bl	8003936 <__retarget_lock_acquire_recursive>
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	60a3      	str	r3, [r4, #8]
 80061ea:	da05      	bge.n	80061f8 <_putc_r+0x3a>
 80061ec:	69a2      	ldr	r2, [r4, #24]
 80061ee:	4293      	cmp	r3, r2
 80061f0:	db12      	blt.n	8006218 <_putc_r+0x5a>
 80061f2:	b2eb      	uxtb	r3, r5
 80061f4:	2b0a      	cmp	r3, #10
 80061f6:	d00f      	beq.n	8006218 <_putc_r+0x5a>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	6022      	str	r2, [r4, #0]
 80061fe:	701d      	strb	r5, [r3, #0]
 8006200:	b2ed      	uxtb	r5, r5
 8006202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006204:	07da      	lsls	r2, r3, #31
 8006206:	d405      	bmi.n	8006214 <_putc_r+0x56>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	059b      	lsls	r3, r3, #22
 800620c:	d402      	bmi.n	8006214 <_putc_r+0x56>
 800620e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006210:	f7fd fb92 	bl	8003938 <__retarget_lock_release_recursive>
 8006214:	4628      	mov	r0, r5
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	4629      	mov	r1, r5
 800621a:	4622      	mov	r2, r4
 800621c:	4630      	mov	r0, r6
 800621e:	f7fd fa78 	bl	8003712 <__swbuf_r>
 8006222:	4605      	mov	r5, r0
 8006224:	e7ed      	b.n	8006202 <_putc_r+0x44>

08006226 <memmove>:
 8006226:	4288      	cmp	r0, r1
 8006228:	b510      	push	{r4, lr}
 800622a:	eb01 0402 	add.w	r4, r1, r2
 800622e:	d902      	bls.n	8006236 <memmove+0x10>
 8006230:	4284      	cmp	r4, r0
 8006232:	4623      	mov	r3, r4
 8006234:	d807      	bhi.n	8006246 <memmove+0x20>
 8006236:	1e43      	subs	r3, r0, #1
 8006238:	42a1      	cmp	r1, r4
 800623a:	d008      	beq.n	800624e <memmove+0x28>
 800623c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006240:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006244:	e7f8      	b.n	8006238 <memmove+0x12>
 8006246:	4601      	mov	r1, r0
 8006248:	4402      	add	r2, r0
 800624a:	428a      	cmp	r2, r1
 800624c:	d100      	bne.n	8006250 <memmove+0x2a>
 800624e:	bd10      	pop	{r4, pc}
 8006250:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006254:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006258:	e7f7      	b.n	800624a <memmove+0x24>

0800625a <strncmp>:
 800625a:	b510      	push	{r4, lr}
 800625c:	b16a      	cbz	r2, 800627a <strncmp+0x20>
 800625e:	3901      	subs	r1, #1
 8006260:	1884      	adds	r4, r0, r2
 8006262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006266:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800626a:	429a      	cmp	r2, r3
 800626c:	d103      	bne.n	8006276 <strncmp+0x1c>
 800626e:	42a0      	cmp	r0, r4
 8006270:	d001      	beq.n	8006276 <strncmp+0x1c>
 8006272:	2a00      	cmp	r2, #0
 8006274:	d1f5      	bne.n	8006262 <strncmp+0x8>
 8006276:	1ad0      	subs	r0, r2, r3
 8006278:	bd10      	pop	{r4, pc}
 800627a:	4610      	mov	r0, r2
 800627c:	e7fc      	b.n	8006278 <strncmp+0x1e>
	...

08006280 <_fstat_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	2300      	movs	r3, #0
 8006284:	4d06      	ldr	r5, [pc, #24]	@ (80062a0 <_fstat_r+0x20>)
 8006286:	4604      	mov	r4, r0
 8006288:	4608      	mov	r0, r1
 800628a:	4611      	mov	r1, r2
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	f7fa feed 	bl	800106c <_fstat>
 8006292:	1c43      	adds	r3, r0, #1
 8006294:	d102      	bne.n	800629c <_fstat_r+0x1c>
 8006296:	682b      	ldr	r3, [r5, #0]
 8006298:	b103      	cbz	r3, 800629c <_fstat_r+0x1c>
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	bd38      	pop	{r3, r4, r5, pc}
 800629e:	bf00      	nop
 80062a0:	2000037c 	.word	0x2000037c

080062a4 <_isatty_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	2300      	movs	r3, #0
 80062a8:	4d05      	ldr	r5, [pc, #20]	@ (80062c0 <_isatty_r+0x1c>)
 80062aa:	4604      	mov	r4, r0
 80062ac:	4608      	mov	r0, r1
 80062ae:	602b      	str	r3, [r5, #0]
 80062b0:	f7fa feeb 	bl	800108a <_isatty>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d102      	bne.n	80062be <_isatty_r+0x1a>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	b103      	cbz	r3, 80062be <_isatty_r+0x1a>
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	2000037c 	.word	0x2000037c

080062c4 <_sbrk_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	2300      	movs	r3, #0
 80062c8:	4d05      	ldr	r5, [pc, #20]	@ (80062e0 <_sbrk_r+0x1c>)
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	f7fa fef2 	bl	80010b8 <_sbrk>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_sbrk_r+0x1a>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	b103      	cbz	r3, 80062de <_sbrk_r+0x1a>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	2000037c 	.word	0x2000037c

080062e4 <memcpy>:
 80062e4:	440a      	add	r2, r1
 80062e6:	4291      	cmp	r1, r2
 80062e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062ec:	d100      	bne.n	80062f0 <memcpy+0xc>
 80062ee:	4770      	bx	lr
 80062f0:	b510      	push	{r4, lr}
 80062f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062f6:	4291      	cmp	r1, r2
 80062f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062fc:	d1f9      	bne.n	80062f2 <memcpy+0xe>
 80062fe:	bd10      	pop	{r4, pc}

08006300 <nan>:
 8006300:	2000      	movs	r0, #0
 8006302:	4901      	ldr	r1, [pc, #4]	@ (8006308 <nan+0x8>)
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	7ff80000 	.word	0x7ff80000

0800630c <__assert_func>:
 800630c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800630e:	4614      	mov	r4, r2
 8006310:	461a      	mov	r2, r3
 8006312:	4b09      	ldr	r3, [pc, #36]	@ (8006338 <__assert_func+0x2c>)
 8006314:	4605      	mov	r5, r0
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68d8      	ldr	r0, [r3, #12]
 800631a:	b14c      	cbz	r4, 8006330 <__assert_func+0x24>
 800631c:	4b07      	ldr	r3, [pc, #28]	@ (800633c <__assert_func+0x30>)
 800631e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006322:	9100      	str	r1, [sp, #0]
 8006324:	462b      	mov	r3, r5
 8006326:	4906      	ldr	r1, [pc, #24]	@ (8006340 <__assert_func+0x34>)
 8006328:	f000 fba8 	bl	8006a7c <fiprintf>
 800632c:	f000 fbb8 	bl	8006aa0 <abort>
 8006330:	4b04      	ldr	r3, [pc, #16]	@ (8006344 <__assert_func+0x38>)
 8006332:	461c      	mov	r4, r3
 8006334:	e7f3      	b.n	800631e <__assert_func+0x12>
 8006336:	bf00      	nop
 8006338:	20000018 	.word	0x20000018
 800633c:	08006f4c 	.word	0x08006f4c
 8006340:	08006f59 	.word	0x08006f59
 8006344:	08006f87 	.word	0x08006f87

08006348 <_calloc_r>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	fba1 5402 	umull	r5, r4, r1, r2
 800634e:	b934      	cbnz	r4, 800635e <_calloc_r+0x16>
 8006350:	4629      	mov	r1, r5
 8006352:	f7fe f9d3 	bl	80046fc <_malloc_r>
 8006356:	4606      	mov	r6, r0
 8006358:	b928      	cbnz	r0, 8006366 <_calloc_r+0x1e>
 800635a:	4630      	mov	r0, r6
 800635c:	bd70      	pop	{r4, r5, r6, pc}
 800635e:	220c      	movs	r2, #12
 8006360:	2600      	movs	r6, #0
 8006362:	6002      	str	r2, [r0, #0]
 8006364:	e7f9      	b.n	800635a <_calloc_r+0x12>
 8006366:	462a      	mov	r2, r5
 8006368:	4621      	mov	r1, r4
 800636a:	f7fd fa67 	bl	800383c <memset>
 800636e:	e7f4      	b.n	800635a <_calloc_r+0x12>

08006370 <rshift>:
 8006370:	6903      	ldr	r3, [r0, #16]
 8006372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006376:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800637a:	f100 0414 	add.w	r4, r0, #20
 800637e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006382:	dd46      	ble.n	8006412 <rshift+0xa2>
 8006384:	f011 011f 	ands.w	r1, r1, #31
 8006388:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800638c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006390:	d10c      	bne.n	80063ac <rshift+0x3c>
 8006392:	4629      	mov	r1, r5
 8006394:	f100 0710 	add.w	r7, r0, #16
 8006398:	42b1      	cmp	r1, r6
 800639a:	d335      	bcc.n	8006408 <rshift+0x98>
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	1eea      	subs	r2, r5, #3
 80063a2:	4296      	cmp	r6, r2
 80063a4:	bf38      	it	cc
 80063a6:	2300      	movcc	r3, #0
 80063a8:	4423      	add	r3, r4
 80063aa:	e015      	b.n	80063d8 <rshift+0x68>
 80063ac:	46a1      	mov	r9, r4
 80063ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80063b2:	f1c1 0820 	rsb	r8, r1, #32
 80063b6:	40cf      	lsrs	r7, r1
 80063b8:	f105 0e04 	add.w	lr, r5, #4
 80063bc:	4576      	cmp	r6, lr
 80063be:	46f4      	mov	ip, lr
 80063c0:	d816      	bhi.n	80063f0 <rshift+0x80>
 80063c2:	1a9a      	subs	r2, r3, r2
 80063c4:	0092      	lsls	r2, r2, #2
 80063c6:	3a04      	subs	r2, #4
 80063c8:	3501      	adds	r5, #1
 80063ca:	42ae      	cmp	r6, r5
 80063cc:	bf38      	it	cc
 80063ce:	2200      	movcc	r2, #0
 80063d0:	18a3      	adds	r3, r4, r2
 80063d2:	50a7      	str	r7, [r4, r2]
 80063d4:	b107      	cbz	r7, 80063d8 <rshift+0x68>
 80063d6:	3304      	adds	r3, #4
 80063d8:	42a3      	cmp	r3, r4
 80063da:	eba3 0204 	sub.w	r2, r3, r4
 80063de:	bf08      	it	eq
 80063e0:	2300      	moveq	r3, #0
 80063e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80063e6:	6102      	str	r2, [r0, #16]
 80063e8:	bf08      	it	eq
 80063ea:	6143      	streq	r3, [r0, #20]
 80063ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063f0:	f8dc c000 	ldr.w	ip, [ip]
 80063f4:	fa0c fc08 	lsl.w	ip, ip, r8
 80063f8:	ea4c 0707 	orr.w	r7, ip, r7
 80063fc:	f849 7b04 	str.w	r7, [r9], #4
 8006400:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006404:	40cf      	lsrs	r7, r1
 8006406:	e7d9      	b.n	80063bc <rshift+0x4c>
 8006408:	f851 cb04 	ldr.w	ip, [r1], #4
 800640c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006410:	e7c2      	b.n	8006398 <rshift+0x28>
 8006412:	4623      	mov	r3, r4
 8006414:	e7e0      	b.n	80063d8 <rshift+0x68>

08006416 <__hexdig_fun>:
 8006416:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800641a:	2b09      	cmp	r3, #9
 800641c:	d802      	bhi.n	8006424 <__hexdig_fun+0xe>
 800641e:	3820      	subs	r0, #32
 8006420:	b2c0      	uxtb	r0, r0
 8006422:	4770      	bx	lr
 8006424:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006428:	2b05      	cmp	r3, #5
 800642a:	d801      	bhi.n	8006430 <__hexdig_fun+0x1a>
 800642c:	3847      	subs	r0, #71	@ 0x47
 800642e:	e7f7      	b.n	8006420 <__hexdig_fun+0xa>
 8006430:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006434:	2b05      	cmp	r3, #5
 8006436:	d801      	bhi.n	800643c <__hexdig_fun+0x26>
 8006438:	3827      	subs	r0, #39	@ 0x27
 800643a:	e7f1      	b.n	8006420 <__hexdig_fun+0xa>
 800643c:	2000      	movs	r0, #0
 800643e:	4770      	bx	lr

08006440 <__gethex>:
 8006440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	468a      	mov	sl, r1
 8006446:	4690      	mov	r8, r2
 8006448:	b085      	sub	sp, #20
 800644a:	9302      	str	r3, [sp, #8]
 800644c:	680b      	ldr	r3, [r1, #0]
 800644e:	9001      	str	r0, [sp, #4]
 8006450:	1c9c      	adds	r4, r3, #2
 8006452:	46a1      	mov	r9, r4
 8006454:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006458:	2830      	cmp	r0, #48	@ 0x30
 800645a:	d0fa      	beq.n	8006452 <__gethex+0x12>
 800645c:	eba9 0303 	sub.w	r3, r9, r3
 8006460:	f1a3 0b02 	sub.w	fp, r3, #2
 8006464:	f7ff ffd7 	bl	8006416 <__hexdig_fun>
 8006468:	4605      	mov	r5, r0
 800646a:	2800      	cmp	r0, #0
 800646c:	d168      	bne.n	8006540 <__gethex+0x100>
 800646e:	2201      	movs	r2, #1
 8006470:	4648      	mov	r0, r9
 8006472:	499f      	ldr	r1, [pc, #636]	@ (80066f0 <__gethex+0x2b0>)
 8006474:	f7ff fef1 	bl	800625a <strncmp>
 8006478:	4607      	mov	r7, r0
 800647a:	2800      	cmp	r0, #0
 800647c:	d167      	bne.n	800654e <__gethex+0x10e>
 800647e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006482:	4626      	mov	r6, r4
 8006484:	f7ff ffc7 	bl	8006416 <__hexdig_fun>
 8006488:	2800      	cmp	r0, #0
 800648a:	d062      	beq.n	8006552 <__gethex+0x112>
 800648c:	4623      	mov	r3, r4
 800648e:	7818      	ldrb	r0, [r3, #0]
 8006490:	4699      	mov	r9, r3
 8006492:	2830      	cmp	r0, #48	@ 0x30
 8006494:	f103 0301 	add.w	r3, r3, #1
 8006498:	d0f9      	beq.n	800648e <__gethex+0x4e>
 800649a:	f7ff ffbc 	bl	8006416 <__hexdig_fun>
 800649e:	fab0 f580 	clz	r5, r0
 80064a2:	f04f 0b01 	mov.w	fp, #1
 80064a6:	096d      	lsrs	r5, r5, #5
 80064a8:	464a      	mov	r2, r9
 80064aa:	4616      	mov	r6, r2
 80064ac:	7830      	ldrb	r0, [r6, #0]
 80064ae:	3201      	adds	r2, #1
 80064b0:	f7ff ffb1 	bl	8006416 <__hexdig_fun>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d1f8      	bne.n	80064aa <__gethex+0x6a>
 80064b8:	2201      	movs	r2, #1
 80064ba:	4630      	mov	r0, r6
 80064bc:	498c      	ldr	r1, [pc, #560]	@ (80066f0 <__gethex+0x2b0>)
 80064be:	f7ff fecc 	bl	800625a <strncmp>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d13f      	bne.n	8006546 <__gethex+0x106>
 80064c6:	b944      	cbnz	r4, 80064da <__gethex+0x9a>
 80064c8:	1c74      	adds	r4, r6, #1
 80064ca:	4622      	mov	r2, r4
 80064cc:	4616      	mov	r6, r2
 80064ce:	7830      	ldrb	r0, [r6, #0]
 80064d0:	3201      	adds	r2, #1
 80064d2:	f7ff ffa0 	bl	8006416 <__hexdig_fun>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d1f8      	bne.n	80064cc <__gethex+0x8c>
 80064da:	1ba4      	subs	r4, r4, r6
 80064dc:	00a7      	lsls	r7, r4, #2
 80064de:	7833      	ldrb	r3, [r6, #0]
 80064e0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80064e4:	2b50      	cmp	r3, #80	@ 0x50
 80064e6:	d13e      	bne.n	8006566 <__gethex+0x126>
 80064e8:	7873      	ldrb	r3, [r6, #1]
 80064ea:	2b2b      	cmp	r3, #43	@ 0x2b
 80064ec:	d033      	beq.n	8006556 <__gethex+0x116>
 80064ee:	2b2d      	cmp	r3, #45	@ 0x2d
 80064f0:	d034      	beq.n	800655c <__gethex+0x11c>
 80064f2:	2400      	movs	r4, #0
 80064f4:	1c71      	adds	r1, r6, #1
 80064f6:	7808      	ldrb	r0, [r1, #0]
 80064f8:	f7ff ff8d 	bl	8006416 <__hexdig_fun>
 80064fc:	1e43      	subs	r3, r0, #1
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b18      	cmp	r3, #24
 8006502:	d830      	bhi.n	8006566 <__gethex+0x126>
 8006504:	f1a0 0210 	sub.w	r2, r0, #16
 8006508:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800650c:	f7ff ff83 	bl	8006416 <__hexdig_fun>
 8006510:	f100 3cff 	add.w	ip, r0, #4294967295
 8006514:	fa5f fc8c 	uxtb.w	ip, ip
 8006518:	f1bc 0f18 	cmp.w	ip, #24
 800651c:	f04f 030a 	mov.w	r3, #10
 8006520:	d91e      	bls.n	8006560 <__gethex+0x120>
 8006522:	b104      	cbz	r4, 8006526 <__gethex+0xe6>
 8006524:	4252      	negs	r2, r2
 8006526:	4417      	add	r7, r2
 8006528:	f8ca 1000 	str.w	r1, [sl]
 800652c:	b1ed      	cbz	r5, 800656a <__gethex+0x12a>
 800652e:	f1bb 0f00 	cmp.w	fp, #0
 8006532:	bf0c      	ite	eq
 8006534:	2506      	moveq	r5, #6
 8006536:	2500      	movne	r5, #0
 8006538:	4628      	mov	r0, r5
 800653a:	b005      	add	sp, #20
 800653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006540:	2500      	movs	r5, #0
 8006542:	462c      	mov	r4, r5
 8006544:	e7b0      	b.n	80064a8 <__gethex+0x68>
 8006546:	2c00      	cmp	r4, #0
 8006548:	d1c7      	bne.n	80064da <__gethex+0x9a>
 800654a:	4627      	mov	r7, r4
 800654c:	e7c7      	b.n	80064de <__gethex+0x9e>
 800654e:	464e      	mov	r6, r9
 8006550:	462f      	mov	r7, r5
 8006552:	2501      	movs	r5, #1
 8006554:	e7c3      	b.n	80064de <__gethex+0x9e>
 8006556:	2400      	movs	r4, #0
 8006558:	1cb1      	adds	r1, r6, #2
 800655a:	e7cc      	b.n	80064f6 <__gethex+0xb6>
 800655c:	2401      	movs	r4, #1
 800655e:	e7fb      	b.n	8006558 <__gethex+0x118>
 8006560:	fb03 0002 	mla	r0, r3, r2, r0
 8006564:	e7ce      	b.n	8006504 <__gethex+0xc4>
 8006566:	4631      	mov	r1, r6
 8006568:	e7de      	b.n	8006528 <__gethex+0xe8>
 800656a:	4629      	mov	r1, r5
 800656c:	eba6 0309 	sub.w	r3, r6, r9
 8006570:	3b01      	subs	r3, #1
 8006572:	2b07      	cmp	r3, #7
 8006574:	dc0a      	bgt.n	800658c <__gethex+0x14c>
 8006576:	9801      	ldr	r0, [sp, #4]
 8006578:	f7fe f94c 	bl	8004814 <_Balloc>
 800657c:	4604      	mov	r4, r0
 800657e:	b940      	cbnz	r0, 8006592 <__gethex+0x152>
 8006580:	4602      	mov	r2, r0
 8006582:	21e4      	movs	r1, #228	@ 0xe4
 8006584:	4b5b      	ldr	r3, [pc, #364]	@ (80066f4 <__gethex+0x2b4>)
 8006586:	485c      	ldr	r0, [pc, #368]	@ (80066f8 <__gethex+0x2b8>)
 8006588:	f7ff fec0 	bl	800630c <__assert_func>
 800658c:	3101      	adds	r1, #1
 800658e:	105b      	asrs	r3, r3, #1
 8006590:	e7ef      	b.n	8006572 <__gethex+0x132>
 8006592:	2300      	movs	r3, #0
 8006594:	f100 0a14 	add.w	sl, r0, #20
 8006598:	4655      	mov	r5, sl
 800659a:	469b      	mov	fp, r3
 800659c:	45b1      	cmp	r9, r6
 800659e:	d337      	bcc.n	8006610 <__gethex+0x1d0>
 80065a0:	f845 bb04 	str.w	fp, [r5], #4
 80065a4:	eba5 050a 	sub.w	r5, r5, sl
 80065a8:	10ad      	asrs	r5, r5, #2
 80065aa:	6125      	str	r5, [r4, #16]
 80065ac:	4658      	mov	r0, fp
 80065ae:	f7fe fa23 	bl	80049f8 <__hi0bits>
 80065b2:	016d      	lsls	r5, r5, #5
 80065b4:	f8d8 6000 	ldr.w	r6, [r8]
 80065b8:	1a2d      	subs	r5, r5, r0
 80065ba:	42b5      	cmp	r5, r6
 80065bc:	dd54      	ble.n	8006668 <__gethex+0x228>
 80065be:	1bad      	subs	r5, r5, r6
 80065c0:	4629      	mov	r1, r5
 80065c2:	4620      	mov	r0, r4
 80065c4:	f7fe fda5 	bl	8005112 <__any_on>
 80065c8:	4681      	mov	r9, r0
 80065ca:	b178      	cbz	r0, 80065ec <__gethex+0x1ac>
 80065cc:	f04f 0901 	mov.w	r9, #1
 80065d0:	1e6b      	subs	r3, r5, #1
 80065d2:	1159      	asrs	r1, r3, #5
 80065d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80065d8:	f003 021f 	and.w	r2, r3, #31
 80065dc:	fa09 f202 	lsl.w	r2, r9, r2
 80065e0:	420a      	tst	r2, r1
 80065e2:	d003      	beq.n	80065ec <__gethex+0x1ac>
 80065e4:	454b      	cmp	r3, r9
 80065e6:	dc36      	bgt.n	8006656 <__gethex+0x216>
 80065e8:	f04f 0902 	mov.w	r9, #2
 80065ec:	4629      	mov	r1, r5
 80065ee:	4620      	mov	r0, r4
 80065f0:	f7ff febe 	bl	8006370 <rshift>
 80065f4:	442f      	add	r7, r5
 80065f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065fa:	42bb      	cmp	r3, r7
 80065fc:	da42      	bge.n	8006684 <__gethex+0x244>
 80065fe:	4621      	mov	r1, r4
 8006600:	9801      	ldr	r0, [sp, #4]
 8006602:	f7fe f947 	bl	8004894 <_Bfree>
 8006606:	2300      	movs	r3, #0
 8006608:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800660a:	25a3      	movs	r5, #163	@ 0xa3
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e793      	b.n	8006538 <__gethex+0xf8>
 8006610:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006614:	2a2e      	cmp	r2, #46	@ 0x2e
 8006616:	d012      	beq.n	800663e <__gethex+0x1fe>
 8006618:	2b20      	cmp	r3, #32
 800661a:	d104      	bne.n	8006626 <__gethex+0x1e6>
 800661c:	f845 bb04 	str.w	fp, [r5], #4
 8006620:	f04f 0b00 	mov.w	fp, #0
 8006624:	465b      	mov	r3, fp
 8006626:	7830      	ldrb	r0, [r6, #0]
 8006628:	9303      	str	r3, [sp, #12]
 800662a:	f7ff fef4 	bl	8006416 <__hexdig_fun>
 800662e:	9b03      	ldr	r3, [sp, #12]
 8006630:	f000 000f 	and.w	r0, r0, #15
 8006634:	4098      	lsls	r0, r3
 8006636:	ea4b 0b00 	orr.w	fp, fp, r0
 800663a:	3304      	adds	r3, #4
 800663c:	e7ae      	b.n	800659c <__gethex+0x15c>
 800663e:	45b1      	cmp	r9, r6
 8006640:	d8ea      	bhi.n	8006618 <__gethex+0x1d8>
 8006642:	2201      	movs	r2, #1
 8006644:	4630      	mov	r0, r6
 8006646:	492a      	ldr	r1, [pc, #168]	@ (80066f0 <__gethex+0x2b0>)
 8006648:	9303      	str	r3, [sp, #12]
 800664a:	f7ff fe06 	bl	800625a <strncmp>
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	2800      	cmp	r0, #0
 8006652:	d1e1      	bne.n	8006618 <__gethex+0x1d8>
 8006654:	e7a2      	b.n	800659c <__gethex+0x15c>
 8006656:	4620      	mov	r0, r4
 8006658:	1ea9      	subs	r1, r5, #2
 800665a:	f7fe fd5a 	bl	8005112 <__any_on>
 800665e:	2800      	cmp	r0, #0
 8006660:	d0c2      	beq.n	80065e8 <__gethex+0x1a8>
 8006662:	f04f 0903 	mov.w	r9, #3
 8006666:	e7c1      	b.n	80065ec <__gethex+0x1ac>
 8006668:	da09      	bge.n	800667e <__gethex+0x23e>
 800666a:	1b75      	subs	r5, r6, r5
 800666c:	4621      	mov	r1, r4
 800666e:	462a      	mov	r2, r5
 8006670:	9801      	ldr	r0, [sp, #4]
 8006672:	f7fe fb1f 	bl	8004cb4 <__lshift>
 8006676:	4604      	mov	r4, r0
 8006678:	1b7f      	subs	r7, r7, r5
 800667a:	f100 0a14 	add.w	sl, r0, #20
 800667e:	f04f 0900 	mov.w	r9, #0
 8006682:	e7b8      	b.n	80065f6 <__gethex+0x1b6>
 8006684:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006688:	42bd      	cmp	r5, r7
 800668a:	dd6f      	ble.n	800676c <__gethex+0x32c>
 800668c:	1bed      	subs	r5, r5, r7
 800668e:	42ae      	cmp	r6, r5
 8006690:	dc34      	bgt.n	80066fc <__gethex+0x2bc>
 8006692:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d022      	beq.n	80066e0 <__gethex+0x2a0>
 800669a:	2b03      	cmp	r3, #3
 800669c:	d024      	beq.n	80066e8 <__gethex+0x2a8>
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d115      	bne.n	80066ce <__gethex+0x28e>
 80066a2:	42ae      	cmp	r6, r5
 80066a4:	d113      	bne.n	80066ce <__gethex+0x28e>
 80066a6:	2e01      	cmp	r6, #1
 80066a8:	d10b      	bne.n	80066c2 <__gethex+0x282>
 80066aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80066ae:	9a02      	ldr	r2, [sp, #8]
 80066b0:	2562      	movs	r5, #98	@ 0x62
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	2301      	movs	r3, #1
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	f8ca 3000 	str.w	r3, [sl]
 80066bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066be:	601c      	str	r4, [r3, #0]
 80066c0:	e73a      	b.n	8006538 <__gethex+0xf8>
 80066c2:	4620      	mov	r0, r4
 80066c4:	1e71      	subs	r1, r6, #1
 80066c6:	f7fe fd24 	bl	8005112 <__any_on>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	d1ed      	bne.n	80066aa <__gethex+0x26a>
 80066ce:	4621      	mov	r1, r4
 80066d0:	9801      	ldr	r0, [sp, #4]
 80066d2:	f7fe f8df 	bl	8004894 <_Bfree>
 80066d6:	2300      	movs	r3, #0
 80066d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066da:	2550      	movs	r5, #80	@ 0x50
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e72b      	b.n	8006538 <__gethex+0xf8>
 80066e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1f3      	bne.n	80066ce <__gethex+0x28e>
 80066e6:	e7e0      	b.n	80066aa <__gethex+0x26a>
 80066e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1dd      	bne.n	80066aa <__gethex+0x26a>
 80066ee:	e7ee      	b.n	80066ce <__gethex+0x28e>
 80066f0:	08006f31 	.word	0x08006f31
 80066f4:	08006ec7 	.word	0x08006ec7
 80066f8:	08006f88 	.word	0x08006f88
 80066fc:	1e6f      	subs	r7, r5, #1
 80066fe:	f1b9 0f00 	cmp.w	r9, #0
 8006702:	d130      	bne.n	8006766 <__gethex+0x326>
 8006704:	b127      	cbz	r7, 8006710 <__gethex+0x2d0>
 8006706:	4639      	mov	r1, r7
 8006708:	4620      	mov	r0, r4
 800670a:	f7fe fd02 	bl	8005112 <__any_on>
 800670e:	4681      	mov	r9, r0
 8006710:	2301      	movs	r3, #1
 8006712:	4629      	mov	r1, r5
 8006714:	1b76      	subs	r6, r6, r5
 8006716:	2502      	movs	r5, #2
 8006718:	117a      	asrs	r2, r7, #5
 800671a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800671e:	f007 071f 	and.w	r7, r7, #31
 8006722:	40bb      	lsls	r3, r7
 8006724:	4213      	tst	r3, r2
 8006726:	4620      	mov	r0, r4
 8006728:	bf18      	it	ne
 800672a:	f049 0902 	orrne.w	r9, r9, #2
 800672e:	f7ff fe1f 	bl	8006370 <rshift>
 8006732:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006736:	f1b9 0f00 	cmp.w	r9, #0
 800673a:	d047      	beq.n	80067cc <__gethex+0x38c>
 800673c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d015      	beq.n	8006770 <__gethex+0x330>
 8006744:	2b03      	cmp	r3, #3
 8006746:	d017      	beq.n	8006778 <__gethex+0x338>
 8006748:	2b01      	cmp	r3, #1
 800674a:	d109      	bne.n	8006760 <__gethex+0x320>
 800674c:	f019 0f02 	tst.w	r9, #2
 8006750:	d006      	beq.n	8006760 <__gethex+0x320>
 8006752:	f8da 3000 	ldr.w	r3, [sl]
 8006756:	ea49 0903 	orr.w	r9, r9, r3
 800675a:	f019 0f01 	tst.w	r9, #1
 800675e:	d10e      	bne.n	800677e <__gethex+0x33e>
 8006760:	f045 0510 	orr.w	r5, r5, #16
 8006764:	e032      	b.n	80067cc <__gethex+0x38c>
 8006766:	f04f 0901 	mov.w	r9, #1
 800676a:	e7d1      	b.n	8006710 <__gethex+0x2d0>
 800676c:	2501      	movs	r5, #1
 800676e:	e7e2      	b.n	8006736 <__gethex+0x2f6>
 8006770:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006772:	f1c3 0301 	rsb	r3, r3, #1
 8006776:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0f0      	beq.n	8006760 <__gethex+0x320>
 800677e:	f04f 0c00 	mov.w	ip, #0
 8006782:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006786:	f104 0314 	add.w	r3, r4, #20
 800678a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800678e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006792:	4618      	mov	r0, r3
 8006794:	f853 2b04 	ldr.w	r2, [r3], #4
 8006798:	f1b2 3fff 	cmp.w	r2, #4294967295
 800679c:	d01b      	beq.n	80067d6 <__gethex+0x396>
 800679e:	3201      	adds	r2, #1
 80067a0:	6002      	str	r2, [r0, #0]
 80067a2:	2d02      	cmp	r5, #2
 80067a4:	f104 0314 	add.w	r3, r4, #20
 80067a8:	d13c      	bne.n	8006824 <__gethex+0x3e4>
 80067aa:	f8d8 2000 	ldr.w	r2, [r8]
 80067ae:	3a01      	subs	r2, #1
 80067b0:	42b2      	cmp	r2, r6
 80067b2:	d109      	bne.n	80067c8 <__gethex+0x388>
 80067b4:	2201      	movs	r2, #1
 80067b6:	1171      	asrs	r1, r6, #5
 80067b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067bc:	f006 061f 	and.w	r6, r6, #31
 80067c0:	fa02 f606 	lsl.w	r6, r2, r6
 80067c4:	421e      	tst	r6, r3
 80067c6:	d13a      	bne.n	800683e <__gethex+0x3fe>
 80067c8:	f045 0520 	orr.w	r5, r5, #32
 80067cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067ce:	601c      	str	r4, [r3, #0]
 80067d0:	9b02      	ldr	r3, [sp, #8]
 80067d2:	601f      	str	r7, [r3, #0]
 80067d4:	e6b0      	b.n	8006538 <__gethex+0xf8>
 80067d6:	4299      	cmp	r1, r3
 80067d8:	f843 cc04 	str.w	ip, [r3, #-4]
 80067dc:	d8d9      	bhi.n	8006792 <__gethex+0x352>
 80067de:	68a3      	ldr	r3, [r4, #8]
 80067e0:	459b      	cmp	fp, r3
 80067e2:	db17      	blt.n	8006814 <__gethex+0x3d4>
 80067e4:	6861      	ldr	r1, [r4, #4]
 80067e6:	9801      	ldr	r0, [sp, #4]
 80067e8:	3101      	adds	r1, #1
 80067ea:	f7fe f813 	bl	8004814 <_Balloc>
 80067ee:	4681      	mov	r9, r0
 80067f0:	b918      	cbnz	r0, 80067fa <__gethex+0x3ba>
 80067f2:	4602      	mov	r2, r0
 80067f4:	2184      	movs	r1, #132	@ 0x84
 80067f6:	4b19      	ldr	r3, [pc, #100]	@ (800685c <__gethex+0x41c>)
 80067f8:	e6c5      	b.n	8006586 <__gethex+0x146>
 80067fa:	6922      	ldr	r2, [r4, #16]
 80067fc:	f104 010c 	add.w	r1, r4, #12
 8006800:	3202      	adds	r2, #2
 8006802:	0092      	lsls	r2, r2, #2
 8006804:	300c      	adds	r0, #12
 8006806:	f7ff fd6d 	bl	80062e4 <memcpy>
 800680a:	4621      	mov	r1, r4
 800680c:	9801      	ldr	r0, [sp, #4]
 800680e:	f7fe f841 	bl	8004894 <_Bfree>
 8006812:	464c      	mov	r4, r9
 8006814:	6923      	ldr	r3, [r4, #16]
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	6122      	str	r2, [r4, #16]
 800681a:	2201      	movs	r2, #1
 800681c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006820:	615a      	str	r2, [r3, #20]
 8006822:	e7be      	b.n	80067a2 <__gethex+0x362>
 8006824:	6922      	ldr	r2, [r4, #16]
 8006826:	455a      	cmp	r2, fp
 8006828:	dd0b      	ble.n	8006842 <__gethex+0x402>
 800682a:	2101      	movs	r1, #1
 800682c:	4620      	mov	r0, r4
 800682e:	f7ff fd9f 	bl	8006370 <rshift>
 8006832:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006836:	3701      	adds	r7, #1
 8006838:	42bb      	cmp	r3, r7
 800683a:	f6ff aee0 	blt.w	80065fe <__gethex+0x1be>
 800683e:	2501      	movs	r5, #1
 8006840:	e7c2      	b.n	80067c8 <__gethex+0x388>
 8006842:	f016 061f 	ands.w	r6, r6, #31
 8006846:	d0fa      	beq.n	800683e <__gethex+0x3fe>
 8006848:	4453      	add	r3, sl
 800684a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800684e:	f7fe f8d3 	bl	80049f8 <__hi0bits>
 8006852:	f1c6 0620 	rsb	r6, r6, #32
 8006856:	42b0      	cmp	r0, r6
 8006858:	dbe7      	blt.n	800682a <__gethex+0x3ea>
 800685a:	e7f0      	b.n	800683e <__gethex+0x3fe>
 800685c:	08006ec7 	.word	0x08006ec7

08006860 <L_shift>:
 8006860:	f1c2 0208 	rsb	r2, r2, #8
 8006864:	0092      	lsls	r2, r2, #2
 8006866:	b570      	push	{r4, r5, r6, lr}
 8006868:	f1c2 0620 	rsb	r6, r2, #32
 800686c:	6843      	ldr	r3, [r0, #4]
 800686e:	6804      	ldr	r4, [r0, #0]
 8006870:	fa03 f506 	lsl.w	r5, r3, r6
 8006874:	432c      	orrs	r4, r5
 8006876:	40d3      	lsrs	r3, r2
 8006878:	6004      	str	r4, [r0, #0]
 800687a:	f840 3f04 	str.w	r3, [r0, #4]!
 800687e:	4288      	cmp	r0, r1
 8006880:	d3f4      	bcc.n	800686c <L_shift+0xc>
 8006882:	bd70      	pop	{r4, r5, r6, pc}

08006884 <__match>:
 8006884:	b530      	push	{r4, r5, lr}
 8006886:	6803      	ldr	r3, [r0, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800688e:	b914      	cbnz	r4, 8006896 <__match+0x12>
 8006890:	6003      	str	r3, [r0, #0]
 8006892:	2001      	movs	r0, #1
 8006894:	bd30      	pop	{r4, r5, pc}
 8006896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800689a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800689e:	2d19      	cmp	r5, #25
 80068a0:	bf98      	it	ls
 80068a2:	3220      	addls	r2, #32
 80068a4:	42a2      	cmp	r2, r4
 80068a6:	d0f0      	beq.n	800688a <__match+0x6>
 80068a8:	2000      	movs	r0, #0
 80068aa:	e7f3      	b.n	8006894 <__match+0x10>

080068ac <__hexnan>:
 80068ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b0:	2500      	movs	r5, #0
 80068b2:	680b      	ldr	r3, [r1, #0]
 80068b4:	4682      	mov	sl, r0
 80068b6:	115e      	asrs	r6, r3, #5
 80068b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80068bc:	f013 031f 	ands.w	r3, r3, #31
 80068c0:	bf18      	it	ne
 80068c2:	3604      	addne	r6, #4
 80068c4:	1f37      	subs	r7, r6, #4
 80068c6:	4690      	mov	r8, r2
 80068c8:	46b9      	mov	r9, r7
 80068ca:	463c      	mov	r4, r7
 80068cc:	46ab      	mov	fp, r5
 80068ce:	b087      	sub	sp, #28
 80068d0:	6801      	ldr	r1, [r0, #0]
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	f846 5c04 	str.w	r5, [r6, #-4]
 80068d8:	9502      	str	r5, [sp, #8]
 80068da:	784a      	ldrb	r2, [r1, #1]
 80068dc:	1c4b      	adds	r3, r1, #1
 80068de:	9303      	str	r3, [sp, #12]
 80068e0:	b342      	cbz	r2, 8006934 <__hexnan+0x88>
 80068e2:	4610      	mov	r0, r2
 80068e4:	9105      	str	r1, [sp, #20]
 80068e6:	9204      	str	r2, [sp, #16]
 80068e8:	f7ff fd95 	bl	8006416 <__hexdig_fun>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d151      	bne.n	8006994 <__hexnan+0xe8>
 80068f0:	9a04      	ldr	r2, [sp, #16]
 80068f2:	9905      	ldr	r1, [sp, #20]
 80068f4:	2a20      	cmp	r2, #32
 80068f6:	d818      	bhi.n	800692a <__hexnan+0x7e>
 80068f8:	9b02      	ldr	r3, [sp, #8]
 80068fa:	459b      	cmp	fp, r3
 80068fc:	dd13      	ble.n	8006926 <__hexnan+0x7a>
 80068fe:	454c      	cmp	r4, r9
 8006900:	d206      	bcs.n	8006910 <__hexnan+0x64>
 8006902:	2d07      	cmp	r5, #7
 8006904:	dc04      	bgt.n	8006910 <__hexnan+0x64>
 8006906:	462a      	mov	r2, r5
 8006908:	4649      	mov	r1, r9
 800690a:	4620      	mov	r0, r4
 800690c:	f7ff ffa8 	bl	8006860 <L_shift>
 8006910:	4544      	cmp	r4, r8
 8006912:	d952      	bls.n	80069ba <__hexnan+0x10e>
 8006914:	2300      	movs	r3, #0
 8006916:	f1a4 0904 	sub.w	r9, r4, #4
 800691a:	f844 3c04 	str.w	r3, [r4, #-4]
 800691e:	461d      	mov	r5, r3
 8006920:	464c      	mov	r4, r9
 8006922:	f8cd b008 	str.w	fp, [sp, #8]
 8006926:	9903      	ldr	r1, [sp, #12]
 8006928:	e7d7      	b.n	80068da <__hexnan+0x2e>
 800692a:	2a29      	cmp	r2, #41	@ 0x29
 800692c:	d157      	bne.n	80069de <__hexnan+0x132>
 800692e:	3102      	adds	r1, #2
 8006930:	f8ca 1000 	str.w	r1, [sl]
 8006934:	f1bb 0f00 	cmp.w	fp, #0
 8006938:	d051      	beq.n	80069de <__hexnan+0x132>
 800693a:	454c      	cmp	r4, r9
 800693c:	d206      	bcs.n	800694c <__hexnan+0xa0>
 800693e:	2d07      	cmp	r5, #7
 8006940:	dc04      	bgt.n	800694c <__hexnan+0xa0>
 8006942:	462a      	mov	r2, r5
 8006944:	4649      	mov	r1, r9
 8006946:	4620      	mov	r0, r4
 8006948:	f7ff ff8a 	bl	8006860 <L_shift>
 800694c:	4544      	cmp	r4, r8
 800694e:	d936      	bls.n	80069be <__hexnan+0x112>
 8006950:	4623      	mov	r3, r4
 8006952:	f1a8 0204 	sub.w	r2, r8, #4
 8006956:	f853 1b04 	ldr.w	r1, [r3], #4
 800695a:	429f      	cmp	r7, r3
 800695c:	f842 1f04 	str.w	r1, [r2, #4]!
 8006960:	d2f9      	bcs.n	8006956 <__hexnan+0xaa>
 8006962:	1b3b      	subs	r3, r7, r4
 8006964:	f023 0303 	bic.w	r3, r3, #3
 8006968:	3304      	adds	r3, #4
 800696a:	3401      	adds	r4, #1
 800696c:	3e03      	subs	r6, #3
 800696e:	42b4      	cmp	r4, r6
 8006970:	bf88      	it	hi
 8006972:	2304      	movhi	r3, #4
 8006974:	2200      	movs	r2, #0
 8006976:	4443      	add	r3, r8
 8006978:	f843 2b04 	str.w	r2, [r3], #4
 800697c:	429f      	cmp	r7, r3
 800697e:	d2fb      	bcs.n	8006978 <__hexnan+0xcc>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	b91b      	cbnz	r3, 800698c <__hexnan+0xe0>
 8006984:	4547      	cmp	r7, r8
 8006986:	d128      	bne.n	80069da <__hexnan+0x12e>
 8006988:	2301      	movs	r3, #1
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	2005      	movs	r0, #5
 800698e:	b007      	add	sp, #28
 8006990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006994:	3501      	adds	r5, #1
 8006996:	2d08      	cmp	r5, #8
 8006998:	f10b 0b01 	add.w	fp, fp, #1
 800699c:	dd06      	ble.n	80069ac <__hexnan+0x100>
 800699e:	4544      	cmp	r4, r8
 80069a0:	d9c1      	bls.n	8006926 <__hexnan+0x7a>
 80069a2:	2300      	movs	r3, #0
 80069a4:	2501      	movs	r5, #1
 80069a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80069aa:	3c04      	subs	r4, #4
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	f000 000f 	and.w	r0, r0, #15
 80069b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80069b6:	6020      	str	r0, [r4, #0]
 80069b8:	e7b5      	b.n	8006926 <__hexnan+0x7a>
 80069ba:	2508      	movs	r5, #8
 80069bc:	e7b3      	b.n	8006926 <__hexnan+0x7a>
 80069be:	9b01      	ldr	r3, [sp, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0dd      	beq.n	8006980 <__hexnan+0xd4>
 80069c4:	f04f 32ff 	mov.w	r2, #4294967295
 80069c8:	f1c3 0320 	rsb	r3, r3, #32
 80069cc:	40da      	lsrs	r2, r3
 80069ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80069d2:	4013      	ands	r3, r2
 80069d4:	f846 3c04 	str.w	r3, [r6, #-4]
 80069d8:	e7d2      	b.n	8006980 <__hexnan+0xd4>
 80069da:	3f04      	subs	r7, #4
 80069dc:	e7d0      	b.n	8006980 <__hexnan+0xd4>
 80069de:	2004      	movs	r0, #4
 80069e0:	e7d5      	b.n	800698e <__hexnan+0xe2>

080069e2 <__ascii_mbtowc>:
 80069e2:	b082      	sub	sp, #8
 80069e4:	b901      	cbnz	r1, 80069e8 <__ascii_mbtowc+0x6>
 80069e6:	a901      	add	r1, sp, #4
 80069e8:	b142      	cbz	r2, 80069fc <__ascii_mbtowc+0x1a>
 80069ea:	b14b      	cbz	r3, 8006a00 <__ascii_mbtowc+0x1e>
 80069ec:	7813      	ldrb	r3, [r2, #0]
 80069ee:	600b      	str	r3, [r1, #0]
 80069f0:	7812      	ldrb	r2, [r2, #0]
 80069f2:	1e10      	subs	r0, r2, #0
 80069f4:	bf18      	it	ne
 80069f6:	2001      	movne	r0, #1
 80069f8:	b002      	add	sp, #8
 80069fa:	4770      	bx	lr
 80069fc:	4610      	mov	r0, r2
 80069fe:	e7fb      	b.n	80069f8 <__ascii_mbtowc+0x16>
 8006a00:	f06f 0001 	mvn.w	r0, #1
 8006a04:	e7f8      	b.n	80069f8 <__ascii_mbtowc+0x16>

08006a06 <_realloc_r>:
 8006a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0a:	4607      	mov	r7, r0
 8006a0c:	4614      	mov	r4, r2
 8006a0e:	460d      	mov	r5, r1
 8006a10:	b921      	cbnz	r1, 8006a1c <_realloc_r+0x16>
 8006a12:	4611      	mov	r1, r2
 8006a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	f7fd be70 	b.w	80046fc <_malloc_r>
 8006a1c:	b92a      	cbnz	r2, 8006a2a <_realloc_r+0x24>
 8006a1e:	f7fd fdfb 	bl	8004618 <_free_r>
 8006a22:	4625      	mov	r5, r4
 8006a24:	4628      	mov	r0, r5
 8006a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a2a:	f000 f840 	bl	8006aae <_malloc_usable_size_r>
 8006a2e:	4284      	cmp	r4, r0
 8006a30:	4606      	mov	r6, r0
 8006a32:	d802      	bhi.n	8006a3a <_realloc_r+0x34>
 8006a34:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a38:	d8f4      	bhi.n	8006a24 <_realloc_r+0x1e>
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f7fd fe5d 	bl	80046fc <_malloc_r>
 8006a42:	4680      	mov	r8, r0
 8006a44:	b908      	cbnz	r0, 8006a4a <_realloc_r+0x44>
 8006a46:	4645      	mov	r5, r8
 8006a48:	e7ec      	b.n	8006a24 <_realloc_r+0x1e>
 8006a4a:	42b4      	cmp	r4, r6
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	bf28      	it	cs
 8006a52:	4632      	movcs	r2, r6
 8006a54:	f7ff fc46 	bl	80062e4 <memcpy>
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	f7fd fddc 	bl	8004618 <_free_r>
 8006a60:	e7f1      	b.n	8006a46 <_realloc_r+0x40>

08006a62 <__ascii_wctomb>:
 8006a62:	4603      	mov	r3, r0
 8006a64:	4608      	mov	r0, r1
 8006a66:	b141      	cbz	r1, 8006a7a <__ascii_wctomb+0x18>
 8006a68:	2aff      	cmp	r2, #255	@ 0xff
 8006a6a:	d904      	bls.n	8006a76 <__ascii_wctomb+0x14>
 8006a6c:	228a      	movs	r2, #138	@ 0x8a
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	4770      	bx	lr
 8006a76:	2001      	movs	r0, #1
 8006a78:	700a      	strb	r2, [r1, #0]
 8006a7a:	4770      	bx	lr

08006a7c <fiprintf>:
 8006a7c:	b40e      	push	{r1, r2, r3}
 8006a7e:	b503      	push	{r0, r1, lr}
 8006a80:	4601      	mov	r1, r0
 8006a82:	ab03      	add	r3, sp, #12
 8006a84:	4805      	ldr	r0, [pc, #20]	@ (8006a9c <fiprintf+0x20>)
 8006a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a8a:	6800      	ldr	r0, [r0, #0]
 8006a8c:	9301      	str	r3, [sp, #4]
 8006a8e:	f000 f83d 	bl	8006b0c <_vfiprintf_r>
 8006a92:	b002      	add	sp, #8
 8006a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a98:	b003      	add	sp, #12
 8006a9a:	4770      	bx	lr
 8006a9c:	20000018 	.word	0x20000018

08006aa0 <abort>:
 8006aa0:	2006      	movs	r0, #6
 8006aa2:	b508      	push	{r3, lr}
 8006aa4:	f000 f972 	bl	8006d8c <raise>
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	f7fa fa90 	bl	8000fce <_exit>

08006aae <_malloc_usable_size_r>:
 8006aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ab2:	1f18      	subs	r0, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	bfbc      	itt	lt
 8006ab8:	580b      	ldrlt	r3, [r1, r0]
 8006aba:	18c0      	addlt	r0, r0, r3
 8006abc:	4770      	bx	lr

08006abe <__sfputc_r>:
 8006abe:	6893      	ldr	r3, [r2, #8]
 8006ac0:	b410      	push	{r4}
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	6093      	str	r3, [r2, #8]
 8006ac8:	da07      	bge.n	8006ada <__sfputc_r+0x1c>
 8006aca:	6994      	ldr	r4, [r2, #24]
 8006acc:	42a3      	cmp	r3, r4
 8006ace:	db01      	blt.n	8006ad4 <__sfputc_r+0x16>
 8006ad0:	290a      	cmp	r1, #10
 8006ad2:	d102      	bne.n	8006ada <__sfputc_r+0x1c>
 8006ad4:	bc10      	pop	{r4}
 8006ad6:	f7fc be1c 	b.w	8003712 <__swbuf_r>
 8006ada:	6813      	ldr	r3, [r2, #0]
 8006adc:	1c58      	adds	r0, r3, #1
 8006ade:	6010      	str	r0, [r2, #0]
 8006ae0:	7019      	strb	r1, [r3, #0]
 8006ae2:	4608      	mov	r0, r1
 8006ae4:	bc10      	pop	{r4}
 8006ae6:	4770      	bx	lr

08006ae8 <__sfputs_r>:
 8006ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aea:	4606      	mov	r6, r0
 8006aec:	460f      	mov	r7, r1
 8006aee:	4614      	mov	r4, r2
 8006af0:	18d5      	adds	r5, r2, r3
 8006af2:	42ac      	cmp	r4, r5
 8006af4:	d101      	bne.n	8006afa <__sfputs_r+0x12>
 8006af6:	2000      	movs	r0, #0
 8006af8:	e007      	b.n	8006b0a <__sfputs_r+0x22>
 8006afa:	463a      	mov	r2, r7
 8006afc:	4630      	mov	r0, r6
 8006afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b02:	f7ff ffdc 	bl	8006abe <__sfputc_r>
 8006b06:	1c43      	adds	r3, r0, #1
 8006b08:	d1f3      	bne.n	8006af2 <__sfputs_r+0xa>
 8006b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b0c <_vfiprintf_r>:
 8006b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	460d      	mov	r5, r1
 8006b12:	4614      	mov	r4, r2
 8006b14:	4698      	mov	r8, r3
 8006b16:	4606      	mov	r6, r0
 8006b18:	b09d      	sub	sp, #116	@ 0x74
 8006b1a:	b118      	cbz	r0, 8006b24 <_vfiprintf_r+0x18>
 8006b1c:	6a03      	ldr	r3, [r0, #32]
 8006b1e:	b90b      	cbnz	r3, 8006b24 <_vfiprintf_r+0x18>
 8006b20:	f7fc fcf6 	bl	8003510 <__sinit>
 8006b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b26:	07d9      	lsls	r1, r3, #31
 8006b28:	d405      	bmi.n	8006b36 <_vfiprintf_r+0x2a>
 8006b2a:	89ab      	ldrh	r3, [r5, #12]
 8006b2c:	059a      	lsls	r2, r3, #22
 8006b2e:	d402      	bmi.n	8006b36 <_vfiprintf_r+0x2a>
 8006b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b32:	f7fc ff00 	bl	8003936 <__retarget_lock_acquire_recursive>
 8006b36:	89ab      	ldrh	r3, [r5, #12]
 8006b38:	071b      	lsls	r3, r3, #28
 8006b3a:	d501      	bpl.n	8006b40 <_vfiprintf_r+0x34>
 8006b3c:	692b      	ldr	r3, [r5, #16]
 8006b3e:	b99b      	cbnz	r3, 8006b68 <_vfiprintf_r+0x5c>
 8006b40:	4629      	mov	r1, r5
 8006b42:	4630      	mov	r0, r6
 8006b44:	f7fc fe24 	bl	8003790 <__swsetup_r>
 8006b48:	b170      	cbz	r0, 8006b68 <_vfiprintf_r+0x5c>
 8006b4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b4c:	07dc      	lsls	r4, r3, #31
 8006b4e:	d504      	bpl.n	8006b5a <_vfiprintf_r+0x4e>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	b01d      	add	sp, #116	@ 0x74
 8006b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5a:	89ab      	ldrh	r3, [r5, #12]
 8006b5c:	0598      	lsls	r0, r3, #22
 8006b5e:	d4f7      	bmi.n	8006b50 <_vfiprintf_r+0x44>
 8006b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b62:	f7fc fee9 	bl	8003938 <__retarget_lock_release_recursive>
 8006b66:	e7f3      	b.n	8006b50 <_vfiprintf_r+0x44>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b6c:	2320      	movs	r3, #32
 8006b6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b72:	2330      	movs	r3, #48	@ 0x30
 8006b74:	f04f 0901 	mov.w	r9, #1
 8006b78:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b7c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006d28 <_vfiprintf_r+0x21c>
 8006b80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b84:	4623      	mov	r3, r4
 8006b86:	469a      	mov	sl, r3
 8006b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b8c:	b10a      	cbz	r2, 8006b92 <_vfiprintf_r+0x86>
 8006b8e:	2a25      	cmp	r2, #37	@ 0x25
 8006b90:	d1f9      	bne.n	8006b86 <_vfiprintf_r+0x7a>
 8006b92:	ebba 0b04 	subs.w	fp, sl, r4
 8006b96:	d00b      	beq.n	8006bb0 <_vfiprintf_r+0xa4>
 8006b98:	465b      	mov	r3, fp
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7ff ffa2 	bl	8006ae8 <__sfputs_r>
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	f000 80a7 	beq.w	8006cf8 <_vfiprintf_r+0x1ec>
 8006baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bac:	445a      	add	r2, fp
 8006bae:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 809f 	beq.w	8006cf8 <_vfiprintf_r+0x1ec>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bc4:	f10a 0a01 	add.w	sl, sl, #1
 8006bc8:	9304      	str	r3, [sp, #16]
 8006bca:	9307      	str	r3, [sp, #28]
 8006bcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bd2:	4654      	mov	r4, sl
 8006bd4:	2205      	movs	r2, #5
 8006bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bda:	4853      	ldr	r0, [pc, #332]	@ (8006d28 <_vfiprintf_r+0x21c>)
 8006bdc:	f7fc fead 	bl	800393a <memchr>
 8006be0:	9a04      	ldr	r2, [sp, #16]
 8006be2:	b9d8      	cbnz	r0, 8006c1c <_vfiprintf_r+0x110>
 8006be4:	06d1      	lsls	r1, r2, #27
 8006be6:	bf44      	itt	mi
 8006be8:	2320      	movmi	r3, #32
 8006bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bee:	0713      	lsls	r3, r2, #28
 8006bf0:	bf44      	itt	mi
 8006bf2:	232b      	movmi	r3, #43	@ 0x2b
 8006bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8006bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bfe:	d015      	beq.n	8006c2c <_vfiprintf_r+0x120>
 8006c00:	4654      	mov	r4, sl
 8006c02:	2000      	movs	r0, #0
 8006c04:	f04f 0c0a 	mov.w	ip, #10
 8006c08:	9a07      	ldr	r2, [sp, #28]
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c10:	3b30      	subs	r3, #48	@ 0x30
 8006c12:	2b09      	cmp	r3, #9
 8006c14:	d94b      	bls.n	8006cae <_vfiprintf_r+0x1a2>
 8006c16:	b1b0      	cbz	r0, 8006c46 <_vfiprintf_r+0x13a>
 8006c18:	9207      	str	r2, [sp, #28]
 8006c1a:	e014      	b.n	8006c46 <_vfiprintf_r+0x13a>
 8006c1c:	eba0 0308 	sub.w	r3, r0, r8
 8006c20:	fa09 f303 	lsl.w	r3, r9, r3
 8006c24:	4313      	orrs	r3, r2
 8006c26:	46a2      	mov	sl, r4
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	e7d2      	b.n	8006bd2 <_vfiprintf_r+0xc6>
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	1d19      	adds	r1, r3, #4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	9103      	str	r1, [sp, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	bfbb      	ittet	lt
 8006c38:	425b      	neglt	r3, r3
 8006c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8006c3e:	9307      	strge	r3, [sp, #28]
 8006c40:	9307      	strlt	r3, [sp, #28]
 8006c42:	bfb8      	it	lt
 8006c44:	9204      	strlt	r2, [sp, #16]
 8006c46:	7823      	ldrb	r3, [r4, #0]
 8006c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c4a:	d10a      	bne.n	8006c62 <_vfiprintf_r+0x156>
 8006c4c:	7863      	ldrb	r3, [r4, #1]
 8006c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c50:	d132      	bne.n	8006cb8 <_vfiprintf_r+0x1ac>
 8006c52:	9b03      	ldr	r3, [sp, #12]
 8006c54:	3402      	adds	r4, #2
 8006c56:	1d1a      	adds	r2, r3, #4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	9203      	str	r2, [sp, #12]
 8006c5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c60:	9305      	str	r3, [sp, #20]
 8006c62:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006d2c <_vfiprintf_r+0x220>
 8006c66:	2203      	movs	r2, #3
 8006c68:	4650      	mov	r0, sl
 8006c6a:	7821      	ldrb	r1, [r4, #0]
 8006c6c:	f7fc fe65 	bl	800393a <memchr>
 8006c70:	b138      	cbz	r0, 8006c82 <_vfiprintf_r+0x176>
 8006c72:	2240      	movs	r2, #64	@ 0x40
 8006c74:	9b04      	ldr	r3, [sp, #16]
 8006c76:	eba0 000a 	sub.w	r0, r0, sl
 8006c7a:	4082      	lsls	r2, r0
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	3401      	adds	r4, #1
 8006c80:	9304      	str	r3, [sp, #16]
 8006c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c86:	2206      	movs	r2, #6
 8006c88:	4829      	ldr	r0, [pc, #164]	@ (8006d30 <_vfiprintf_r+0x224>)
 8006c8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c8e:	f7fc fe54 	bl	800393a <memchr>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d03f      	beq.n	8006d16 <_vfiprintf_r+0x20a>
 8006c96:	4b27      	ldr	r3, [pc, #156]	@ (8006d34 <_vfiprintf_r+0x228>)
 8006c98:	bb1b      	cbnz	r3, 8006ce2 <_vfiprintf_r+0x1d6>
 8006c9a:	9b03      	ldr	r3, [sp, #12]
 8006c9c:	3307      	adds	r3, #7
 8006c9e:	f023 0307 	bic.w	r3, r3, #7
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	9303      	str	r3, [sp, #12]
 8006ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca8:	443b      	add	r3, r7
 8006caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cac:	e76a      	b.n	8006b84 <_vfiprintf_r+0x78>
 8006cae:	460c      	mov	r4, r1
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cb6:	e7a8      	b.n	8006c0a <_vfiprintf_r+0xfe>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f04f 0c0a 	mov.w	ip, #10
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	3401      	adds	r4, #1
 8006cc2:	9305      	str	r3, [sp, #20]
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cca:	3a30      	subs	r2, #48	@ 0x30
 8006ccc:	2a09      	cmp	r2, #9
 8006cce:	d903      	bls.n	8006cd8 <_vfiprintf_r+0x1cc>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0c6      	beq.n	8006c62 <_vfiprintf_r+0x156>
 8006cd4:	9105      	str	r1, [sp, #20]
 8006cd6:	e7c4      	b.n	8006c62 <_vfiprintf_r+0x156>
 8006cd8:	4604      	mov	r4, r0
 8006cda:	2301      	movs	r3, #1
 8006cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ce0:	e7f0      	b.n	8006cc4 <_vfiprintf_r+0x1b8>
 8006ce2:	ab03      	add	r3, sp, #12
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	462a      	mov	r2, r5
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4b13      	ldr	r3, [pc, #76]	@ (8006d38 <_vfiprintf_r+0x22c>)
 8006cec:	a904      	add	r1, sp, #16
 8006cee:	f7fb fd01 	bl	80026f4 <_printf_float>
 8006cf2:	4607      	mov	r7, r0
 8006cf4:	1c78      	adds	r0, r7, #1
 8006cf6:	d1d6      	bne.n	8006ca6 <_vfiprintf_r+0x19a>
 8006cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cfa:	07d9      	lsls	r1, r3, #31
 8006cfc:	d405      	bmi.n	8006d0a <_vfiprintf_r+0x1fe>
 8006cfe:	89ab      	ldrh	r3, [r5, #12]
 8006d00:	059a      	lsls	r2, r3, #22
 8006d02:	d402      	bmi.n	8006d0a <_vfiprintf_r+0x1fe>
 8006d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d06:	f7fc fe17 	bl	8003938 <__retarget_lock_release_recursive>
 8006d0a:	89ab      	ldrh	r3, [r5, #12]
 8006d0c:	065b      	lsls	r3, r3, #25
 8006d0e:	f53f af1f 	bmi.w	8006b50 <_vfiprintf_r+0x44>
 8006d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d14:	e71e      	b.n	8006b54 <_vfiprintf_r+0x48>
 8006d16:	ab03      	add	r3, sp, #12
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	462a      	mov	r2, r5
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <_vfiprintf_r+0x22c>)
 8006d20:	a904      	add	r1, sp, #16
 8006d22:	f7fb ff85 	bl	8002c30 <_printf_i>
 8006d26:	e7e4      	b.n	8006cf2 <_vfiprintf_r+0x1e6>
 8006d28:	08006f33 	.word	0x08006f33
 8006d2c:	08006f39 	.word	0x08006f39
 8006d30:	08006f3d 	.word	0x08006f3d
 8006d34:	080026f5 	.word	0x080026f5
 8006d38:	08006ae9 	.word	0x08006ae9

08006d3c <_raise_r>:
 8006d3c:	291f      	cmp	r1, #31
 8006d3e:	b538      	push	{r3, r4, r5, lr}
 8006d40:	4605      	mov	r5, r0
 8006d42:	460c      	mov	r4, r1
 8006d44:	d904      	bls.n	8006d50 <_raise_r+0x14>
 8006d46:	2316      	movs	r3, #22
 8006d48:	6003      	str	r3, [r0, #0]
 8006d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006d52:	b112      	cbz	r2, 8006d5a <_raise_r+0x1e>
 8006d54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d58:	b94b      	cbnz	r3, 8006d6e <_raise_r+0x32>
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f000 f830 	bl	8006dc0 <_getpid_r>
 8006d60:	4622      	mov	r2, r4
 8006d62:	4601      	mov	r1, r0
 8006d64:	4628      	mov	r0, r5
 8006d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d6a:	f000 b817 	b.w	8006d9c <_kill_r>
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d00a      	beq.n	8006d88 <_raise_r+0x4c>
 8006d72:	1c59      	adds	r1, r3, #1
 8006d74:	d103      	bne.n	8006d7e <_raise_r+0x42>
 8006d76:	2316      	movs	r3, #22
 8006d78:	6003      	str	r3, [r0, #0]
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	e7e7      	b.n	8006d4e <_raise_r+0x12>
 8006d7e:	2100      	movs	r1, #0
 8006d80:	4620      	mov	r0, r4
 8006d82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006d86:	4798      	blx	r3
 8006d88:	2000      	movs	r0, #0
 8006d8a:	e7e0      	b.n	8006d4e <_raise_r+0x12>

08006d8c <raise>:
 8006d8c:	4b02      	ldr	r3, [pc, #8]	@ (8006d98 <raise+0xc>)
 8006d8e:	4601      	mov	r1, r0
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	f7ff bfd3 	b.w	8006d3c <_raise_r>
 8006d96:	bf00      	nop
 8006d98:	20000018 	.word	0x20000018

08006d9c <_kill_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	2300      	movs	r3, #0
 8006da0:	4d06      	ldr	r5, [pc, #24]	@ (8006dbc <_kill_r+0x20>)
 8006da2:	4604      	mov	r4, r0
 8006da4:	4608      	mov	r0, r1
 8006da6:	4611      	mov	r1, r2
 8006da8:	602b      	str	r3, [r5, #0]
 8006daa:	f7fa f900 	bl	8000fae <_kill>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	d102      	bne.n	8006db8 <_kill_r+0x1c>
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	b103      	cbz	r3, 8006db8 <_kill_r+0x1c>
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	bd38      	pop	{r3, r4, r5, pc}
 8006dba:	bf00      	nop
 8006dbc:	2000037c 	.word	0x2000037c

08006dc0 <_getpid_r>:
 8006dc0:	f7fa b8ee 	b.w	8000fa0 <_getpid>

08006dc4 <_init>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	bf00      	nop
 8006dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dca:	bc08      	pop	{r3}
 8006dcc:	469e      	mov	lr, r3
 8006dce:	4770      	bx	lr

08006dd0 <_fini>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	bf00      	nop
 8006dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd6:	bc08      	pop	{r3}
 8006dd8:	469e      	mov	lr, r3
 8006dda:	4770      	bx	lr
