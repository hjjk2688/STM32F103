
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004124  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004230  08004230  00005230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080042f4  080042f4  0000606c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080042f4  080042f4  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042f4  080042f4  000052f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042f8  080042f8  000052f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080042fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000006c  08004368  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004368  00006270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2db  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df6  00000000  00000000  00012370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00014168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e9  00000000  00000000  00014e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018737  00000000  00000000  00015801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd39  00000000  00000000  0002df38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c305  00000000  00000000  0003bc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb4  00000000  00000000  000c7fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000cbc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004218 	.word	0x08004218

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08004218 	.word	0x08004218

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f002 fa65 	bl	8002632 <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f002 fa5e 	bl	8002632 <HAL_UART_Transmit>

  return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08004230 	.word	0x08004230
 8000184:	200000d0 	.word	0x200000d0

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 fbba 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f862 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f96e 	bl	8000474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000198:	f000 f942 	bl	8000420 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800019c:	f000 f89e 	bl	80002dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001a0:	2100      	movs	r1, #0
 80001a2:	4825      	ldr	r0, [pc, #148]	@ (8000238 <main+0xb0>)
 80001a4:	f001 fc6a 	bl	8001a7c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pos_tilt);
 80001a8:	4b24      	ldr	r3, [pc, #144]	@ (800023c <main+0xb4>)
 80001aa:	781a      	ldrb	r2, [r3, #0]
 80001ac:	4b22      	ldr	r3, [pc, #136]	@ (8000238 <main+0xb0>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	635a      	str	r2, [r3, #52]	@ 0x34
	printf("Servo Control Ready\r\n");
 80001b2:	4823      	ldr	r0, [pc, #140]	@ (8000240 <main+0xb8>)
 80001b4:	f003 f9c4 	bl	8003540 <puts>
	printf("Commands: w(up), s(down), a(left), d(right), i(center)\r\n");
 80001b8:	4822      	ldr	r0, [pc, #136]	@ (8000244 <main+0xbc>)
 80001ba:	f003 f9c1 	bl	8003540 <puts>
//			count++;
//
//		} else {
//			break;
//		}
		if(HAL_UART_Receive(&huart2, &ch, sizeof(ch), 10) == HAL_OK){
 80001be:	230a      	movs	r3, #10
 80001c0:	2201      	movs	r2, #1
 80001c2:	4921      	ldr	r1, [pc, #132]	@ (8000248 <main+0xc0>)
 80001c4:	4821      	ldr	r0, [pc, #132]	@ (800024c <main+0xc4>)
 80001c6:	f002 fabf 	bl	8002748 <HAL_UART_Receive>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d1f6      	bne.n	80001be <main+0x36>
			if(ch=='w'){
 80001d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000248 <main+0xc0>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b77      	cmp	r3, #119	@ 0x77
 80001d6:	d111      	bne.n	80001fc <main+0x74>
				printf("up\n\r");
 80001d8:	481d      	ldr	r0, [pc, #116]	@ (8000250 <main+0xc8>)
 80001da:	f003 f949 	bl	8003470 <iprintf>
				if(pos_tilt + STEP <= MAX){
 80001de:	4b17      	ldr	r3, [pc, #92]	@ (800023c <main+0xb4>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b7c      	cmp	r3, #124	@ 0x7c
 80001e4:	d806      	bhi.n	80001f4 <main+0x6c>
					pos_tilt = pos_tilt + STEP;
 80001e6:	4b15      	ldr	r3, [pc, #84]	@ (800023c <main+0xb4>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	3301      	adds	r3, #1
 80001ec:	b2da      	uxtb	r2, r3
 80001ee:	4b13      	ldr	r3, [pc, #76]	@ (800023c <main+0xb4>)
 80001f0:	701a      	strb	r2, [r3, #0]
 80001f2:	e018      	b.n	8000226 <main+0x9e>

				}
				else{
					pos_tilt = MAX;
 80001f4:	4b11      	ldr	r3, [pc, #68]	@ (800023c <main+0xb4>)
 80001f6:	227d      	movs	r2, #125	@ 0x7d
 80001f8:	701a      	strb	r2, [r3, #0]
 80001fa:	e014      	b.n	8000226 <main+0x9e>
				}

			}
			else if(ch == 's'){
 80001fc:	4b12      	ldr	r3, [pc, #72]	@ (8000248 <main+0xc0>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b73      	cmp	r3, #115	@ 0x73
 8000202:	d110      	bne.n	8000226 <main+0x9e>
				printf("Down \n");
 8000204:	4813      	ldr	r0, [pc, #76]	@ (8000254 <main+0xcc>)
 8000206:	f003 f99b 	bl	8003540 <puts>
				if(pos_tilt + STEP >= MIN){
 800020a:	4b0c      	ldr	r3, [pc, #48]	@ (800023c <main+0xb4>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	2b17      	cmp	r3, #23
 8000210:	d906      	bls.n	8000220 <main+0x98>
					pos_tilt = pos_tilt - STEP;
 8000212:	4b0a      	ldr	r3, [pc, #40]	@ (800023c <main+0xb4>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	3b01      	subs	r3, #1
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4b08      	ldr	r3, [pc, #32]	@ (800023c <main+0xb4>)
 800021c:	701a      	strb	r2, [r3, #0]
 800021e:	e002      	b.n	8000226 <main+0x9e>

				}
				else{
					pos_tilt = MIN;
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <main+0xb4>)
 8000222:	2219      	movs	r2, #25
 8000224:	701a      	strb	r2, [r3, #0]
				}
			}

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pos_tilt);
 8000226:	4b05      	ldr	r3, [pc, #20]	@ (800023c <main+0xb4>)
 8000228:	781a      	ldrb	r2, [r3, #0]
 800022a:	4b03      	ldr	r3, [pc, #12]	@ (8000238 <main+0xb0>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	635a      	str	r2, [r3, #52]	@ 0x34
			//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pos_pan);

			HAL_Delay(50);
 8000230:	2032      	movs	r0, #50	@ 0x32
 8000232:	f000 fbc9 	bl	80009c8 <HAL_Delay>
		if(HAL_UART_Receive(&huart2, &ch, sizeof(ch), 10) == HAL_OK){
 8000236:	e7c2      	b.n	80001be <main+0x36>
 8000238:	20000088 	.word	0x20000088
 800023c:	20000000 	.word	0x20000000
 8000240:	08004234 	.word	0x08004234
 8000244:	0800424c 	.word	0x0800424c
 8000248:	20000118 	.word	0x20000118
 800024c:	200000d0 	.word	0x200000d0
 8000250:	08004284 	.word	0x08004284
 8000254:	0800428c 	.word	0x0800428c

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	@ 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	@ 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f003 fa4a 	bl	8003700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	2310      	movs	r3, #16
 8000284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	2302      	movs	r3, #2
 8000288:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800028a:	2300      	movs	r3, #0
 800028c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800028e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4618      	mov	r0, r3
 800029a:	f000 ff37 	bl	800110c <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002a4:	f000 f954 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 f9a4 	bl	8001610 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ce:	f000 f93f 	bl	8000550 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	@ 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b096      	sub	sp, #88	@ 0x58
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]
 800030a:	615a      	str	r2, [r3, #20]
 800030c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2220      	movs	r2, #32
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f003 f9f3 	bl	8003700 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800031a:	4b3f      	ldr	r3, [pc, #252]	@ (8000418 <MX_TIM1_Init+0x13c>)
 800031c:	4a3f      	ldr	r2, [pc, #252]	@ (800041c <MX_TIM1_Init+0x140>)
 800031e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1280-1;
 8000320:	4b3d      	ldr	r3, [pc, #244]	@ (8000418 <MX_TIM1_Init+0x13c>)
 8000322:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 8000326:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000328:	4b3b      	ldr	r3, [pc, #236]	@ (8000418 <MX_TIM1_Init+0x13c>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800032e:	4b3a      	ldr	r3, [pc, #232]	@ (8000418 <MX_TIM1_Init+0x13c>)
 8000330:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000334:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000336:	4b38      	ldr	r3, [pc, #224]	@ (8000418 <MX_TIM1_Init+0x13c>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800033c:	4b36      	ldr	r3, [pc, #216]	@ (8000418 <MX_TIM1_Init+0x13c>)
 800033e:	2200      	movs	r2, #0
 8000340:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000342:	4b35      	ldr	r3, [pc, #212]	@ (8000418 <MX_TIM1_Init+0x13c>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000348:	4833      	ldr	r0, [pc, #204]	@ (8000418 <MX_TIM1_Init+0x13c>)
 800034a:	f001 faef 	bl	800192c <HAL_TIM_Base_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000354:	f000 f8fc 	bl	8000550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800035c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800035e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000362:	4619      	mov	r1, r3
 8000364:	482c      	ldr	r0, [pc, #176]	@ (8000418 <MX_TIM1_Init+0x13c>)
 8000366:	f001 fced 	bl	8001d44 <HAL_TIM_ConfigClockSource>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000370:	f000 f8ee 	bl	8000550 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000374:	4828      	ldr	r0, [pc, #160]	@ (8000418 <MX_TIM1_Init+0x13c>)
 8000376:	f001 fb28 	bl	80019ca <HAL_TIM_PWM_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000380:	f000 f8e6 	bl	8000550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000384:	2300      	movs	r3, #0
 8000386:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000388:	2300      	movs	r3, #0
 800038a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800038c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000390:	4619      	mov	r1, r3
 8000392:	4821      	ldr	r0, [pc, #132]	@ (8000418 <MX_TIM1_Init+0x13c>)
 8000394:	f002 f84e 	bl	8002434 <HAL_TIMEx_MasterConfigSynchronization>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800039e:	f000 f8d7 	bl	8000550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a2:	2360      	movs	r3, #96	@ 0x60
 80003a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003aa:	2300      	movs	r3, #0
 80003ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003ae:	2300      	movs	r3, #0
 80003b0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003b6:	2300      	movs	r3, #0
 80003b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003ba:	2300      	movs	r3, #0
 80003bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003c2:	2200      	movs	r2, #0
 80003c4:	4619      	mov	r1, r3
 80003c6:	4814      	ldr	r0, [pc, #80]	@ (8000418 <MX_TIM1_Init+0x13c>)
 80003c8:	f001 fbfa 	bl	8001bc0 <HAL_TIM_PWM_ConfigChannel>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80003d2:	f000 f8bd 	bl	8000550 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	4619      	mov	r1, r3
 80003f8:	4807      	ldr	r0, [pc, #28]	@ (8000418 <MX_TIM1_Init+0x13c>)
 80003fa:	f002 f879 	bl	80024f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000404:	f000 f8a4 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000408:	4803      	ldr	r0, [pc, #12]	@ (8000418 <MX_TIM1_Init+0x13c>)
 800040a:	f000 f8f7 	bl	80005fc <HAL_TIM_MspPostInit>

}
 800040e:	bf00      	nop
 8000410:	3758      	adds	r7, #88	@ 0x58
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000088 	.word	0x20000088
 800041c:	40012c00 	.word	0x40012c00

08000420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000424:	4b11      	ldr	r3, [pc, #68]	@ (800046c <MX_USART2_UART_Init+0x4c>)
 8000426:	4a12      	ldr	r2, [pc, #72]	@ (8000470 <MX_USART2_UART_Init+0x50>)
 8000428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800042a:	4b10      	ldr	r3, [pc, #64]	@ (800046c <MX_USART2_UART_Init+0x4c>)
 800042c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <MX_USART2_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <MX_USART2_UART_Init+0x4c>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <MX_USART2_UART_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b09      	ldr	r3, [pc, #36]	@ (800046c <MX_USART2_UART_Init+0x4c>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b08      	ldr	r3, [pc, #32]	@ (800046c <MX_USART2_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b06      	ldr	r3, [pc, #24]	@ (800046c <MX_USART2_UART_Init+0x4c>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000456:	4805      	ldr	r0, [pc, #20]	@ (800046c <MX_USART2_UART_Init+0x4c>)
 8000458:	f002 f89b 	bl	8002592 <HAL_UART_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000462:	f000 f875 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200000d0 	.word	0x200000d0
 8000470:	40004400 	.word	0x40004400

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000488:	4b2d      	ldr	r3, [pc, #180]	@ (8000540 <MX_GPIO_Init+0xcc>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a2c      	ldr	r2, [pc, #176]	@ (8000540 <MX_GPIO_Init+0xcc>)
 800048e:	f043 0310 	orr.w	r3, r3, #16
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <MX_GPIO_Init+0xcc>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0310 	and.w	r3, r3, #16
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a0:	4b27      	ldr	r3, [pc, #156]	@ (8000540 <MX_GPIO_Init+0xcc>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a26      	ldr	r2, [pc, #152]	@ (8000540 <MX_GPIO_Init+0xcc>)
 80004a6:	f043 0320 	orr.w	r3, r3, #32
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b24      	ldr	r3, [pc, #144]	@ (8000540 <MX_GPIO_Init+0xcc>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0320 	and.w	r3, r3, #32
 80004b4:	60bb      	str	r3, [r7, #8]
 80004b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <MX_GPIO_Init+0xcc>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a20      	ldr	r2, [pc, #128]	@ (8000540 <MX_GPIO_Init+0xcc>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <MX_GPIO_Init+0xcc>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <MX_GPIO_Init+0xcc>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000540 <MX_GPIO_Init+0xcc>)
 80004d6:	f043 0308 	orr.w	r3, r3, #8
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <MX_GPIO_Init+0xcc>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2120      	movs	r1, #32
 80004ec:	4815      	ldr	r0, [pc, #84]	@ (8000544 <MX_GPIO_Init+0xd0>)
 80004ee:	f000 fdd3 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f8:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <MX_GPIO_Init+0xd4>)
 80004fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	4811      	ldr	r0, [pc, #68]	@ (800054c <MX_GPIO_Init+0xd8>)
 8000508:	f000 fc42 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800050c:	2320      	movs	r3, #32
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2302      	movs	r3, #2
 800051a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	4808      	ldr	r0, [pc, #32]	@ (8000544 <MX_GPIO_Init+0xd0>)
 8000524:	f000 fc34 	bl	8000d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2100      	movs	r1, #0
 800052c:	2028      	movs	r0, #40	@ 0x28
 800052e:	f000 fb46 	bl	8000bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000532:	2028      	movs	r0, #40	@ 0x28
 8000534:	f000 fb5f 	bl	8000bf6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000538:	bf00      	nop
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	40010800 	.word	0x40010800
 8000548:	10110000 	.word	0x10110000
 800054c:	40011000 	.word	0x40011000

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <Error_Handler+0x8>

0800055c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000562:	4b15      	ldr	r3, [pc, #84]	@ (80005b8 <HAL_MspInit+0x5c>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a14      	ldr	r2, [pc, #80]	@ (80005b8 <HAL_MspInit+0x5c>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <HAL_MspInit+0x5c>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <HAL_MspInit+0x5c>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <HAL_MspInit+0x5c>)
 8000580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <HAL_MspInit+0x5c>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000592:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <HAL_MspInit+0x60>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	4a04      	ldr	r2, [pc, #16]	@ (80005bc <HAL_MspInit+0x60>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010000 	.word	0x40010000

080005c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a09      	ldr	r2, [pc, #36]	@ (80005f4 <HAL_TIM_Base_MspInit+0x34>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d10b      	bne.n	80005ea <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005d2:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <HAL_TIM_Base_MspInit+0x38>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a08      	ldr	r2, [pc, #32]	@ (80005f8 <HAL_TIM_Base_MspInit+0x38>)
 80005d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <HAL_TIM_Base_MspInit+0x38>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	40012c00 	.word	0x40012c00
 80005f8:	40021000 	.word	0x40021000

080005fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a10      	ldr	r2, [pc, #64]	@ (8000658 <HAL_TIM_MspPostInit+0x5c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d118      	bne.n	800064e <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <HAL_TIM_MspPostInit+0x60>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <HAL_TIM_MspPostInit+0x60>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <HAL_TIM_MspPostInit+0x60>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000638:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2302      	movs	r3, #2
 8000640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	@ (8000660 <HAL_TIM_MspPostInit+0x64>)
 800064a:	f000 fba1 	bl	8000d90 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40012c00 	.word	0x40012c00
 800065c:	40021000 	.word	0x40021000
 8000660:	40010800 	.word	0x40010800

08000664 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a19      	ldr	r2, [pc, #100]	@ (80006e4 <HAL_UART_MspInit+0x80>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d12b      	bne.n	80006dc <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <HAL_UART_MspInit+0x84>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <HAL_UART_MspInit+0x84>)
 800068a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800068e:	61d3      	str	r3, [r2, #28]
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <HAL_UART_MspInit+0x84>)
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <HAL_UART_MspInit+0x84>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a11      	ldr	r2, [pc, #68]	@ (80006e8 <HAL_UART_MspInit+0x84>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <HAL_UART_MspInit+0x84>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006b4:	230c      	movs	r3, #12
 80006b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4619      	mov	r1, r3
 80006c6:	4809      	ldr	r0, [pc, #36]	@ (80006ec <HAL_UART_MspInit+0x88>)
 80006c8:	f000 fb62 	bl	8000d90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2026      	movs	r0, #38	@ 0x26
 80006d2:	f000 fa74 	bl	8000bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006d6:	2026      	movs	r0, #38	@ 0x26
 80006d8:	f000 fa8d 	bl	8000bf6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40004400 	.word	0x40004400
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010800 	.word	0x40010800

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <NMI_Handler+0x4>

080006f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <MemManage_Handler+0x4>

08000708 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <UsageFault_Handler+0x4>

08000718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f926 	bl	8000990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800074c:	4802      	ldr	r0, [pc, #8]	@ (8000758 <USART2_IRQHandler+0x10>)
 800074e:	f002 f893 	bl	8002878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000d0 	.word	0x200000d0

0800075c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000760:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000764:	f000 fcb0 	bl	80010c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	e00a      	b.n	8000794 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800077e:	f3af 8000 	nop.w
 8000782:	4601      	mov	r1, r0
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	60ba      	str	r2, [r7, #8]
 800078a:	b2ca      	uxtb	r2, r1
 800078c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	3301      	adds	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	429a      	cmp	r2, r3
 800079a:	dbf0      	blt.n	800077e <_read+0x12>
  }

  return len;
 800079c:	687b      	ldr	r3, [r7, #4]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	60f8      	str	r0, [r7, #12]
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	e009      	b.n	80007cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	60ba      	str	r2, [r7, #8]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fcc3 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697a      	ldr	r2, [r7, #20]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	dbf1      	blt.n	80007b8 <_write+0x12>
  }
  return len;
 80007d4:	687b      	ldr	r3, [r7, #4]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <_close>:

int _close(int file)
{
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000804:	605a      	str	r2, [r3, #4]
  return 0;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <_isatty>:

int _isatty(int file)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr

08000826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000826:	b480      	push	{r7}
 8000828:	b085      	sub	sp, #20
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
	...

08000840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000848:	4a14      	ldr	r2, [pc, #80]	@ (800089c <_sbrk+0x5c>)
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <_sbrk+0x60>)
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000854:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <_sbrk+0x64>)
 800085e:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <_sbrk+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	429a      	cmp	r2, r3
 800086e:	d207      	bcs.n	8000880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000870:	f002 ff94 	bl	800379c <__errno>
 8000874:	4603      	mov	r3, r0
 8000876:	220c      	movs	r2, #12
 8000878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	e009      	b.n	8000894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000886:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <_sbrk+0x64>)
 8000890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20005000 	.word	0x20005000
 80008a0:	00000400 	.word	0x00000400
 80008a4:	2000011c 	.word	0x2000011c
 80008a8:	20000270 	.word	0x20000270

080008ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b8:	f7ff fff8 	bl	80008ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008bc:	480b      	ldr	r0, [pc, #44]	@ (80008ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008be:	490c      	ldr	r1, [pc, #48]	@ (80008f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008c0:	4a0c      	ldr	r2, [pc, #48]	@ (80008f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d2:	4a09      	ldr	r2, [pc, #36]	@ (80008f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008d4:	4c09      	ldr	r4, [pc, #36]	@ (80008fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008e2:	f002 ff61 	bl	80037a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff fc4f 	bl	8000188 <main>
  bx lr
 80008ea:	4770      	bx	lr
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80008f4:	080042fc 	.word	0x080042fc
  ldr r2, =_sbss
 80008f8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80008fc:	20000270 	.word	0x20000270

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <HAL_Init+0x28>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a07      	ldr	r2, [pc, #28]	@ (800092c <HAL_Init+0x28>)
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 f947 	bl	8000ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091a:	2000      	movs	r0, #0
 800091c:	f000 f808 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff fe1c 	bl	800055c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40022000 	.word	0x40022000

08000930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <HAL_InitTick+0x54>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_InitTick+0x58>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000946:	fbb3 f3f1 	udiv	r3, r3, r1
 800094a:	fbb2 f3f3 	udiv	r3, r2, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f95f 	bl	8000c12 <HAL_SYSTICK_Config>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e00e      	b.n	800097c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d80a      	bhi.n	800097a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f000 f927 	bl	8000bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000970:	4a06      	ldr	r2, [pc, #24]	@ (800098c <HAL_InitTick+0x5c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	e000      	b.n	800097c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000004 	.word	0x20000004
 8000988:	2000000c 	.word	0x2000000c
 800098c:	20000008 	.word	0x20000008

08000990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <HAL_IncTick+0x1c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <HAL_IncTick+0x20>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a03      	ldr	r2, [pc, #12]	@ (80009b0 <HAL_IncTick+0x20>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	2000000c 	.word	0x2000000c
 80009b0:	20000120 	.word	0x20000120

080009b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b02      	ldr	r3, [pc, #8]	@ (80009c4 <HAL_GetTick+0x10>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000120 	.word	0x20000120

080009c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d0:	f7ff fff0 	bl	80009b4 <HAL_GetTick>
 80009d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e0:	d005      	beq.n	80009ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <HAL_Delay+0x44>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ee:	bf00      	nop
 80009f0:	f7ff ffe0 	bl	80009b4 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8f7      	bhi.n	80009f0 <HAL_Delay+0x28>
  {
  }
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000000c 	.word	0x2000000c

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4906      	ldr	r1, [pc, #24]	@ (8000aa8 <__NVIC_EnableIRQ+0x34>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	@ (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	@ (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	@ 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	@ 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00f      	b.n	8000b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <SysTick_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	210f      	movs	r1, #15
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f7ff ff90 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <SysTick_Config+0x40>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	@ (8000ba4 <SysTick_Config+0x40>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff2d 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff42 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff90 	bl	8000b00 <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5f 	bl	8000aac <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff35 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffa2 	bl	8000b64 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b085      	sub	sp, #20
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d008      	beq.n	8000c54 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2204      	movs	r2, #4
 8000c46:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e020      	b.n	8000c96 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 020e 	bic.w	r2, r2, #14
 8000c62:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 0201 	bic.w	r2, r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c82:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d005      	beq.n	8000cc4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2204      	movs	r2, #4
 8000cbc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e051      	b.n	8000d68 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f022 020e 	bic.w	r2, r2, #14
 8000cd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0201 	bic.w	r2, r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a22      	ldr	r2, [pc, #136]	@ (8000d74 <HAL_DMA_Abort_IT+0xd4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d029      	beq.n	8000d42 <HAL_DMA_Abort_IT+0xa2>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a21      	ldr	r2, [pc, #132]	@ (8000d78 <HAL_DMA_Abort_IT+0xd8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d022      	beq.n	8000d3e <HAL_DMA_Abort_IT+0x9e>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8000d7c <HAL_DMA_Abort_IT+0xdc>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d01a      	beq.n	8000d38 <HAL_DMA_Abort_IT+0x98>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a1e      	ldr	r2, [pc, #120]	@ (8000d80 <HAL_DMA_Abort_IT+0xe0>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d012      	beq.n	8000d32 <HAL_DMA_Abort_IT+0x92>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1c      	ldr	r2, [pc, #112]	@ (8000d84 <HAL_DMA_Abort_IT+0xe4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d00a      	beq.n	8000d2c <HAL_DMA_Abort_IT+0x8c>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000d88 <HAL_DMA_Abort_IT+0xe8>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d102      	bne.n	8000d26 <HAL_DMA_Abort_IT+0x86>
 8000d20:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d24:	e00e      	b.n	8000d44 <HAL_DMA_Abort_IT+0xa4>
 8000d26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d2a:	e00b      	b.n	8000d44 <HAL_DMA_Abort_IT+0xa4>
 8000d2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d30:	e008      	b.n	8000d44 <HAL_DMA_Abort_IT+0xa4>
 8000d32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d36:	e005      	b.n	8000d44 <HAL_DMA_Abort_IT+0xa4>
 8000d38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d3c:	e002      	b.n	8000d44 <HAL_DMA_Abort_IT+0xa4>
 8000d3e:	2310      	movs	r3, #16
 8000d40:	e000      	b.n	8000d44 <HAL_DMA_Abort_IT+0xa4>
 8000d42:	2301      	movs	r3, #1
 8000d44:	4a11      	ldr	r2, [pc, #68]	@ (8000d8c <HAL_DMA_Abort_IT+0xec>)
 8000d46:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	4798      	blx	r3
    } 
  }
  return status;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40020008 	.word	0x40020008
 8000d78:	4002001c 	.word	0x4002001c
 8000d7c:	40020030 	.word	0x40020030
 8000d80:	40020044 	.word	0x40020044
 8000d84:	40020058 	.word	0x40020058
 8000d88:	4002006c 	.word	0x4002006c
 8000d8c:	40020000 	.word	0x40020000

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b08b      	sub	sp, #44	@ 0x2c
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da2:	e169      	b.n	8001078 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000da4:	2201      	movs	r2, #1
 8000da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	69fa      	ldr	r2, [r7, #28]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f040 8158 	bne.w	8001072 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	4a9a      	ldr	r2, [pc, #616]	@ (8001030 <HAL_GPIO_Init+0x2a0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d05e      	beq.n	8000e8a <HAL_GPIO_Init+0xfa>
 8000dcc:	4a98      	ldr	r2, [pc, #608]	@ (8001030 <HAL_GPIO_Init+0x2a0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d875      	bhi.n	8000ebe <HAL_GPIO_Init+0x12e>
 8000dd2:	4a98      	ldr	r2, [pc, #608]	@ (8001034 <HAL_GPIO_Init+0x2a4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d058      	beq.n	8000e8a <HAL_GPIO_Init+0xfa>
 8000dd8:	4a96      	ldr	r2, [pc, #600]	@ (8001034 <HAL_GPIO_Init+0x2a4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d86f      	bhi.n	8000ebe <HAL_GPIO_Init+0x12e>
 8000dde:	4a96      	ldr	r2, [pc, #600]	@ (8001038 <HAL_GPIO_Init+0x2a8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d052      	beq.n	8000e8a <HAL_GPIO_Init+0xfa>
 8000de4:	4a94      	ldr	r2, [pc, #592]	@ (8001038 <HAL_GPIO_Init+0x2a8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d869      	bhi.n	8000ebe <HAL_GPIO_Init+0x12e>
 8000dea:	4a94      	ldr	r2, [pc, #592]	@ (800103c <HAL_GPIO_Init+0x2ac>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d04c      	beq.n	8000e8a <HAL_GPIO_Init+0xfa>
 8000df0:	4a92      	ldr	r2, [pc, #584]	@ (800103c <HAL_GPIO_Init+0x2ac>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d863      	bhi.n	8000ebe <HAL_GPIO_Init+0x12e>
 8000df6:	4a92      	ldr	r2, [pc, #584]	@ (8001040 <HAL_GPIO_Init+0x2b0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d046      	beq.n	8000e8a <HAL_GPIO_Init+0xfa>
 8000dfc:	4a90      	ldr	r2, [pc, #576]	@ (8001040 <HAL_GPIO_Init+0x2b0>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d85d      	bhi.n	8000ebe <HAL_GPIO_Init+0x12e>
 8000e02:	2b12      	cmp	r3, #18
 8000e04:	d82a      	bhi.n	8000e5c <HAL_GPIO_Init+0xcc>
 8000e06:	2b12      	cmp	r3, #18
 8000e08:	d859      	bhi.n	8000ebe <HAL_GPIO_Init+0x12e>
 8000e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e10 <HAL_GPIO_Init+0x80>)
 8000e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e10:	08000e8b 	.word	0x08000e8b
 8000e14:	08000e65 	.word	0x08000e65
 8000e18:	08000e77 	.word	0x08000e77
 8000e1c:	08000eb9 	.word	0x08000eb9
 8000e20:	08000ebf 	.word	0x08000ebf
 8000e24:	08000ebf 	.word	0x08000ebf
 8000e28:	08000ebf 	.word	0x08000ebf
 8000e2c:	08000ebf 	.word	0x08000ebf
 8000e30:	08000ebf 	.word	0x08000ebf
 8000e34:	08000ebf 	.word	0x08000ebf
 8000e38:	08000ebf 	.word	0x08000ebf
 8000e3c:	08000ebf 	.word	0x08000ebf
 8000e40:	08000ebf 	.word	0x08000ebf
 8000e44:	08000ebf 	.word	0x08000ebf
 8000e48:	08000ebf 	.word	0x08000ebf
 8000e4c:	08000ebf 	.word	0x08000ebf
 8000e50:	08000ebf 	.word	0x08000ebf
 8000e54:	08000e6d 	.word	0x08000e6d
 8000e58:	08000e81 	.word	0x08000e81
 8000e5c:	4a79      	ldr	r2, [pc, #484]	@ (8001044 <HAL_GPIO_Init+0x2b4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e62:	e02c      	b.n	8000ebe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	623b      	str	r3, [r7, #32]
          break;
 8000e6a:	e029      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	3304      	adds	r3, #4
 8000e72:	623b      	str	r3, [r7, #32]
          break;
 8000e74:	e024      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	3308      	adds	r3, #8
 8000e7c:	623b      	str	r3, [r7, #32]
          break;
 8000e7e:	e01f      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	330c      	adds	r3, #12
 8000e86:	623b      	str	r3, [r7, #32]
          break;
 8000e88:	e01a      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e92:	2304      	movs	r3, #4
 8000e94:	623b      	str	r3, [r7, #32]
          break;
 8000e96:	e013      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d105      	bne.n	8000eac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	611a      	str	r2, [r3, #16]
          break;
 8000eaa:	e009      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eac:	2308      	movs	r3, #8
 8000eae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	615a      	str	r2, [r3, #20]
          break;
 8000eb6:	e003      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
          break;
 8000ebc:	e000      	b.n	8000ec0 <HAL_GPIO_Init+0x130>
          break;
 8000ebe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2bff      	cmp	r3, #255	@ 0xff
 8000ec4:	d801      	bhi.n	8000eca <HAL_GPIO_Init+0x13a>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	e001      	b.n	8000ece <HAL_GPIO_Init+0x13e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	2bff      	cmp	r3, #255	@ 0xff
 8000ed4:	d802      	bhi.n	8000edc <HAL_GPIO_Init+0x14c>
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	e002      	b.n	8000ee2 <HAL_GPIO_Init+0x152>
 8000edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ede:	3b08      	subs	r3, #8
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	210f      	movs	r1, #15
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	6a39      	ldr	r1, [r7, #32]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	431a      	orrs	r2, r3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 80b1 	beq.w	8001072 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f10:	4b4d      	ldr	r3, [pc, #308]	@ (8001048 <HAL_GPIO_Init+0x2b8>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a4c      	ldr	r2, [pc, #304]	@ (8001048 <HAL_GPIO_Init+0x2b8>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001048 <HAL_GPIO_Init+0x2b8>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f28:	4a48      	ldr	r2, [pc, #288]	@ (800104c <HAL_GPIO_Init+0x2bc>)
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a40      	ldr	r2, [pc, #256]	@ (8001050 <HAL_GPIO_Init+0x2c0>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d013      	beq.n	8000f7c <HAL_GPIO_Init+0x1ec>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a3f      	ldr	r2, [pc, #252]	@ (8001054 <HAL_GPIO_Init+0x2c4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d00d      	beq.n	8000f78 <HAL_GPIO_Init+0x1e8>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a3e      	ldr	r2, [pc, #248]	@ (8001058 <HAL_GPIO_Init+0x2c8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d007      	beq.n	8000f74 <HAL_GPIO_Init+0x1e4>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a3d      	ldr	r2, [pc, #244]	@ (800105c <HAL_GPIO_Init+0x2cc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d101      	bne.n	8000f70 <HAL_GPIO_Init+0x1e0>
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e006      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f70:	2304      	movs	r3, #4
 8000f72:	e004      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f74:	2302      	movs	r3, #2
 8000f76:	e002      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f80:	f002 0203 	and.w	r2, r2, #3
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	4093      	lsls	r3, r2
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f8e:	492f      	ldr	r1, [pc, #188]	@ (800104c <HAL_GPIO_Init+0x2bc>)
 8000f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	492c      	ldr	r1, [pc, #176]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	608b      	str	r3, [r1, #8]
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	4928      	ldr	r1, [pc, #160]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fd0:	4b23      	ldr	r3, [pc, #140]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	4922      	ldr	r1, [pc, #136]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	60cb      	str	r3, [r1, #12]
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fde:	4b20      	ldr	r3, [pc, #128]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	491e      	ldr	r1, [pc, #120]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ff8:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	4918      	ldr	r1, [pc, #96]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001006:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	43db      	mvns	r3, r3
 800100e:	4914      	ldr	r1, [pc, #80]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8001010:	4013      	ands	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d021      	beq.n	8001064 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	490e      	ldr	r1, [pc, #56]	@ (8001060 <HAL_GPIO_Init+0x2d0>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	600b      	str	r3, [r1, #0]
 800102c:	e021      	b.n	8001072 <HAL_GPIO_Init+0x2e2>
 800102e:	bf00      	nop
 8001030:	10320000 	.word	0x10320000
 8001034:	10310000 	.word	0x10310000
 8001038:	10220000 	.word	0x10220000
 800103c:	10210000 	.word	0x10210000
 8001040:	10120000 	.word	0x10120000
 8001044:	10110000 	.word	0x10110000
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000
 8001050:	40010800 	.word	0x40010800
 8001054:	40010c00 	.word	0x40010c00
 8001058:	40011000 	.word	0x40011000
 800105c:	40011400 	.word	0x40011400
 8001060:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <HAL_GPIO_Init+0x304>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	43db      	mvns	r3, r3
 800106c:	4909      	ldr	r1, [pc, #36]	@ (8001094 <HAL_GPIO_Init+0x304>)
 800106e:	4013      	ands	r3, r2
 8001070:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	3301      	adds	r3, #1
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	fa22 f303 	lsr.w	r3, r2, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	f47f ae8e 	bne.w	8000da4 <HAL_GPIO_Init+0x14>
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	372c      	adds	r7, #44	@ 0x2c
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010b4:	e003      	b.n	80010be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	041a      	lsls	r2, r3, #16
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	611a      	str	r2, [r3, #16]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d4:	695a      	ldr	r2, [r3, #20]
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	4013      	ands	r3, r2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d006      	beq.n	80010ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010de:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f806 	bl	80010f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e272      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8087 	beq.w	800123a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800112c:	4b92      	ldr	r3, [pc, #584]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b04      	cmp	r3, #4
 8001136:	d00c      	beq.n	8001152 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001138:	4b8f      	ldr	r3, [pc, #572]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b08      	cmp	r3, #8
 8001142:	d112      	bne.n	800116a <HAL_RCC_OscConfig+0x5e>
 8001144:	4b8c      	ldr	r3, [pc, #560]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800114c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001150:	d10b      	bne.n	800116a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001152:	4b89      	ldr	r3, [pc, #548]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d06c      	beq.n	8001238 <HAL_RCC_OscConfig+0x12c>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d168      	bne.n	8001238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e24c      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x76>
 8001174:	4b80      	ldr	r3, [pc, #512]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a7f      	ldr	r2, [pc, #508]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800117a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e02e      	b.n	80011e0 <HAL_RCC_OscConfig+0xd4>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x98>
 800118a:	4b7b      	ldr	r3, [pc, #492]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a7a      	ldr	r2, [pc, #488]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b78      	ldr	r3, [pc, #480]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a77      	ldr	r2, [pc, #476]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800119c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e01d      	b.n	80011e0 <HAL_RCC_OscConfig+0xd4>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0xbc>
 80011ae:	4b72      	ldr	r3, [pc, #456]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a71      	ldr	r2, [pc, #452]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a6e      	ldr	r2, [pc, #440]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e00b      	b.n	80011e0 <HAL_RCC_OscConfig+0xd4>
 80011c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a6a      	ldr	r2, [pc, #424]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b68      	ldr	r3, [pc, #416]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a67      	ldr	r2, [pc, #412]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d013      	beq.n	8001210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fbe4 	bl	80009b4 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fbe0 	bl	80009b4 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	@ 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e200      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	4b5d      	ldr	r3, [pc, #372]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0xe4>
 800120e:	e014      	b.n	800123a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fbd0 	bl	80009b4 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fbcc 	bl	80009b4 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	@ 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e1ec      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122a:	4b53      	ldr	r3, [pc, #332]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x10c>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d063      	beq.n	800130e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001246:	4b4c      	ldr	r3, [pc, #304]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00b      	beq.n	800126a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001252:	4b49      	ldr	r3, [pc, #292]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b08      	cmp	r3, #8
 800125c:	d11c      	bne.n	8001298 <HAL_RCC_OscConfig+0x18c>
 800125e:	4b46      	ldr	r3, [pc, #280]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d116      	bne.n	8001298 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	4b43      	ldr	r3, [pc, #268]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <HAL_RCC_OscConfig+0x176>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d001      	beq.n	8001282 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e1c0      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001282:	4b3d      	ldr	r3, [pc, #244]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4939      	ldr	r1, [pc, #228]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001296:	e03a      	b.n	800130e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a0:	4b36      	ldr	r3, [pc, #216]	@ (800137c <HAL_RCC_OscConfig+0x270>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a6:	f7ff fb85 	bl	80009b4 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff fb81 	bl	80009b4 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e1a1      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4927      	ldr	r1, [pc, #156]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e015      	b.n	800130e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e2:	4b26      	ldr	r3, [pc, #152]	@ (800137c <HAL_RCC_OscConfig+0x270>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb64 	bl	80009b4 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fb60 	bl	80009b4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e180      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001302:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d03a      	beq.n	8001390 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d019      	beq.n	8001356 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <HAL_RCC_OscConfig+0x274>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001328:	f7ff fb44 	bl	80009b4 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff fb40 	bl	80009b4 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e160      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f000 face 	bl	80018f0 <RCC_Delay>
 8001354:	e01c      	b.n	8001390 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_RCC_OscConfig+0x274>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135c:	f7ff fb2a 	bl	80009b4 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001362:	e00f      	b.n	8001384 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001364:	f7ff fb26 	bl	80009b4 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d908      	bls.n	8001384 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e146      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
 800137c:	42420000 	.word	0x42420000
 8001380:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001384:	4b92      	ldr	r3, [pc, #584]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1e9      	bne.n	8001364 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80a6 	beq.w	80014ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a2:	4b8b      	ldr	r3, [pc, #556]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10d      	bne.n	80013ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b88      	ldr	r3, [pc, #544]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a87      	ldr	r2, [pc, #540]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b85      	ldr	r3, [pc, #532]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b82      	ldr	r3, [pc, #520]	@ (80015d4 <HAL_RCC_OscConfig+0x4c8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d118      	bne.n	8001408 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d6:	4b7f      	ldr	r3, [pc, #508]	@ (80015d4 <HAL_RCC_OscConfig+0x4c8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a7e      	ldr	r2, [pc, #504]	@ (80015d4 <HAL_RCC_OscConfig+0x4c8>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fae7 	bl	80009b4 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ea:	f7ff fae3 	bl	80009b4 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b64      	cmp	r3, #100	@ 0x64
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e103      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fc:	4b75      	ldr	r3, [pc, #468]	@ (80015d4 <HAL_RCC_OscConfig+0x4c8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d106      	bne.n	800141e <HAL_RCC_OscConfig+0x312>
 8001410:	4b6f      	ldr	r3, [pc, #444]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	4a6e      	ldr	r2, [pc, #440]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6213      	str	r3, [r2, #32]
 800141c:	e02d      	b.n	800147a <HAL_RCC_OscConfig+0x36e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x334>
 8001426:	4b6a      	ldr	r3, [pc, #424]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4a69      	ldr	r2, [pc, #420]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6213      	str	r3, [r2, #32]
 8001432:	4b67      	ldr	r3, [pc, #412]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a66      	ldr	r2, [pc, #408]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6213      	str	r3, [r2, #32]
 800143e:	e01c      	b.n	800147a <HAL_RCC_OscConfig+0x36e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b05      	cmp	r3, #5
 8001446:	d10c      	bne.n	8001462 <HAL_RCC_OscConfig+0x356>
 8001448:	4b61      	ldr	r3, [pc, #388]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4a60      	ldr	r2, [pc, #384]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6213      	str	r3, [r2, #32]
 8001454:	4b5e      	ldr	r3, [pc, #376]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4a5d      	ldr	r2, [pc, #372]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6213      	str	r3, [r2, #32]
 8001460:	e00b      	b.n	800147a <HAL_RCC_OscConfig+0x36e>
 8001462:	4b5b      	ldr	r3, [pc, #364]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4a5a      	ldr	r2, [pc, #360]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	6213      	str	r3, [r2, #32]
 800146e:	4b58      	ldr	r3, [pc, #352]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4a57      	ldr	r2, [pc, #348]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	f023 0304 	bic.w	r3, r3, #4
 8001478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d015      	beq.n	80014ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7ff fa97 	bl	80009b4 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fa93 	bl	80009b4 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e0b1      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a0:	4b4b      	ldr	r3, [pc, #300]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0ee      	beq.n	800148a <HAL_RCC_OscConfig+0x37e>
 80014ac:	e014      	b.n	80014d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fa81 	bl	80009b4 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f7ff fa7d 	bl	80009b4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e09b      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014cc:	4b40      	ldr	r3, [pc, #256]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1ee      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d105      	bne.n	80014ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014de:	4b3c      	ldr	r3, [pc, #240]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a3b      	ldr	r2, [pc, #236]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8087 	beq.w	8001602 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f4:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d061      	beq.n	80015c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d146      	bne.n	8001596 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001508:	4b33      	ldr	r3, [pc, #204]	@ (80015d8 <HAL_RCC_OscConfig+0x4cc>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff fa51 	bl	80009b4 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff fa4d 	bl	80009b4 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e06d      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001528:	4b29      	ldr	r3, [pc, #164]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f0      	bne.n	8001516 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800153c:	d108      	bne.n	8001550 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800153e:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4921      	ldr	r1, [pc, #132]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001550:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a19      	ldr	r1, [r3, #32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001560:	430b      	orrs	r3, r1
 8001562:	491b      	ldr	r1, [pc, #108]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_RCC_OscConfig+0x4cc>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fa21 	bl	80009b4 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001576:	f7ff fa1d 	bl	80009b4 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e03d      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x46a>
 8001594:	e035      	b.n	8001602 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <HAL_RCC_OscConfig+0x4cc>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fa0a 	bl	80009b4 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff fa06 	bl	80009b4 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e026      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x498>
 80015c2:	e01e      	b.n	8001602 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d107      	bne.n	80015dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e019      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40007000 	.word	0x40007000
 80015d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_RCC_OscConfig+0x500>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0d0      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b6a      	ldr	r3, [pc, #424]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d910      	bls.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b67      	ldr	r3, [pc, #412]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0207 	bic.w	r2, r3, #7
 800163a:	4965      	ldr	r1, [pc, #404]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b63      	ldr	r3, [pc, #396]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0b8      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d020      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800166c:	4b59      	ldr	r3, [pc, #356]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a58      	ldr	r2, [pc, #352]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001676:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001684:	4b53      	ldr	r3, [pc, #332]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a52      	ldr	r2, [pc, #328]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800168e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001690:	4b50      	ldr	r3, [pc, #320]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	494d      	ldr	r1, [pc, #308]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d040      	beq.n	8001730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b47      	ldr	r3, [pc, #284]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d115      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e07f      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b41      	ldr	r3, [pc, #260]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e073      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016de:	4b3d      	ldr	r3, [pc, #244]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e06b      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ee:	4b39      	ldr	r3, [pc, #228]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f023 0203 	bic.w	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4936      	ldr	r1, [pc, #216]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001700:	f7ff f958 	bl	80009b4 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	e00a      	b.n	800171e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f7ff f954 	bl	80009b4 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e053      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	4b2d      	ldr	r3, [pc, #180]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 020c 	and.w	r2, r3, #12
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	429a      	cmp	r2, r3
 800172e:	d1eb      	bne.n	8001708 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d210      	bcs.n	8001760 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 0207 	bic.w	r2, r3, #7
 8001746:	4922      	ldr	r1, [pc, #136]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e032      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800176c:	4b19      	ldr	r3, [pc, #100]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4916      	ldr	r1, [pc, #88]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d009      	beq.n	800179e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	490e      	ldr	r1, [pc, #56]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800179e:	f000 f821 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80017a2:	4602      	mov	r2, r0
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	490a      	ldr	r1, [pc, #40]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c8>)
 80017b0:	5ccb      	ldrb	r3, [r1, r3]
 80017b2:	fa22 f303 	lsr.w	r3, r2, r3
 80017b6:	4a09      	ldr	r2, [pc, #36]	@ (80017dc <HAL_RCC_ClockConfig+0x1cc>)
 80017b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <HAL_RCC_ClockConfig+0x1d0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f8b6 	bl	8000930 <HAL_InitTick>

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40022000 	.word	0x40022000
 80017d4:	40021000 	.word	0x40021000
 80017d8:	08004294 	.word	0x08004294
 80017dc:	20000004 	.word	0x20000004
 80017e0:	20000008 	.word	0x20000008

080017e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <HAL_RCC_GetSysClockFreq+0x94>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b04      	cmp	r3, #4
 800180c:	d002      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x30>
 800180e:	2b08      	cmp	r3, #8
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x36>
 8001812:	e027      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_RCC_GetSysClockFreq+0x98>)
 8001816:	613b      	str	r3, [r7, #16]
      break;
 8001818:	e027      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	0c9b      	lsrs	r3, r3, #18
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	4a17      	ldr	r2, [pc, #92]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d010      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001832:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <HAL_RCC_GetSysClockFreq+0x94>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	0c5b      	lsrs	r3, r3, #17
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	4a11      	ldr	r2, [pc, #68]	@ (8001884 <HAL_RCC_GetSysClockFreq+0xa0>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <HAL_RCC_GetSysClockFreq+0x98>)
 8001846:	fb03 f202 	mul.w	r2, r3, r2
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e004      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a0c      	ldr	r2, [pc, #48]	@ (8001888 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	613b      	str	r3, [r7, #16]
      break;
 8001862:	e002      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <HAL_RCC_GetSysClockFreq+0x98>)
 8001866:	613b      	str	r3, [r7, #16]
      break;
 8001868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800186a:	693b      	ldr	r3, [r7, #16]
}
 800186c:	4618      	mov	r0, r3
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	007a1200 	.word	0x007a1200
 8001880:	080042ac 	.word	0x080042ac
 8001884:	080042bc 	.word	0x080042bc
 8001888:	003d0900 	.word	0x003d0900

0800188c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001890:	4b02      	ldr	r3, [pc, #8]	@ (800189c <HAL_RCC_GetHCLKFreq+0x10>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018a4:	f7ff fff2 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	4903      	ldr	r1, [pc, #12]	@ (80018c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018b6:	5ccb      	ldrb	r3, [r1, r3]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	080042a4 	.word	0x080042a4

080018c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018cc:	f7ff ffde 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	0adb      	lsrs	r3, r3, #11
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	4903      	ldr	r1, [pc, #12]	@ (80018ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000
 80018ec:	080042a4 	.word	0x080042a4

080018f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <RCC_Delay+0x34>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <RCC_Delay+0x38>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0a5b      	lsrs	r3, r3, #9
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800190c:	bf00      	nop
  }
  while (Delay --);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1e5a      	subs	r2, r3, #1
 8001912:	60fa      	str	r2, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f9      	bne.n	800190c <RCC_Delay+0x1c>
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	20000004 	.word	0x20000004
 8001928:	10624dd3 	.word	0x10624dd3

0800192c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e041      	b.n	80019c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7fe fe34 	bl	80005c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3304      	adds	r3, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f000 fab2 	bl	8001ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e041      	b.n	8001a60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d106      	bne.n	80019f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f839 	bl	8001a68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2202      	movs	r2, #2
 80019fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3304      	adds	r3, #4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4610      	mov	r0, r2
 8001a0a:	f000 fa63 	bl	8001ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_TIM_PWM_Start+0x24>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	e022      	b.n	8001ae6 <HAL_TIM_PWM_Start+0x6a>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d109      	bne.n	8001aba <HAL_TIM_PWM_Start+0x3e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	bf14      	ite	ne
 8001ab2:	2301      	movne	r3, #1
 8001ab4:	2300      	moveq	r3, #0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	e015      	b.n	8001ae6 <HAL_TIM_PWM_Start+0x6a>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d109      	bne.n	8001ad4 <HAL_TIM_PWM_Start+0x58>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	bf14      	ite	ne
 8001acc:	2301      	movne	r3, #1
 8001ace:	2300      	moveq	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	e008      	b.n	8001ae6 <HAL_TIM_PWM_Start+0x6a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	bf14      	ite	ne
 8001ae0:	2301      	movne	r3, #1
 8001ae2:	2300      	moveq	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e05e      	b.n	8001bac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d104      	bne.n	8001afe <HAL_TIM_PWM_Start+0x82>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001afc:	e013      	b.n	8001b26 <HAL_TIM_PWM_Start+0xaa>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d104      	bne.n	8001b0e <HAL_TIM_PWM_Start+0x92>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b0c:	e00b      	b.n	8001b26 <HAL_TIM_PWM_Start+0xaa>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d104      	bne.n	8001b1e <HAL_TIM_PWM_Start+0xa2>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b1c:	e003      	b.n	8001b26 <HAL_TIM_PWM_Start+0xaa>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2202      	movs	r2, #2
 8001b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	6839      	ldr	r1, [r7, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 fc5c 	bl	80023ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb4 <HAL_TIM_PWM_Start+0x138>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d107      	bne.n	8001b4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a18      	ldr	r2, [pc, #96]	@ (8001bb4 <HAL_TIM_PWM_Start+0x138>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d00e      	beq.n	8001b76 <HAL_TIM_PWM_Start+0xfa>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b60:	d009      	beq.n	8001b76 <HAL_TIM_PWM_Start+0xfa>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <HAL_TIM_PWM_Start+0x13c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d004      	beq.n	8001b76 <HAL_TIM_PWM_Start+0xfa>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a12      	ldr	r2, [pc, #72]	@ (8001bbc <HAL_TIM_PWM_Start+0x140>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d111      	bne.n	8001b9a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b06      	cmp	r3, #6
 8001b86:	d010      	beq.n	8001baa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b98:	e007      	b.n	8001baa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	40000800 	.word	0x40000800

08001bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e0ae      	b.n	8001d3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	f200 809f 	bhi.w	8001d2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001bee:	a201      	add	r2, pc, #4	@ (adr r2, 8001bf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf4:	08001c29 	.word	0x08001c29
 8001bf8:	08001d2d 	.word	0x08001d2d
 8001bfc:	08001d2d 	.word	0x08001d2d
 8001c00:	08001d2d 	.word	0x08001d2d
 8001c04:	08001c69 	.word	0x08001c69
 8001c08:	08001d2d 	.word	0x08001d2d
 8001c0c:	08001d2d 	.word	0x08001d2d
 8001c10:	08001d2d 	.word	0x08001d2d
 8001c14:	08001cab 	.word	0x08001cab
 8001c18:	08001d2d 	.word	0x08001d2d
 8001c1c:	08001d2d 	.word	0x08001d2d
 8001c20:	08001d2d 	.word	0x08001d2d
 8001c24:	08001ceb 	.word	0x08001ceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f9be 	bl	8001fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0208 	orr.w	r2, r2, #8
 8001c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0204 	bic.w	r2, r2, #4
 8001c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6999      	ldr	r1, [r3, #24]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	619a      	str	r2, [r3, #24]
      break;
 8001c66:	e064      	b.n	8001d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fa04 	bl	800207c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6999      	ldr	r1, [r3, #24]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	021a      	lsls	r2, r3, #8
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	619a      	str	r2, [r3, #24]
      break;
 8001ca8:	e043      	b.n	8001d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fa4d 	bl	8002150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	69da      	ldr	r2, [r3, #28]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0208 	orr.w	r2, r2, #8
 8001cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69da      	ldr	r2, [r3, #28]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0204 	bic.w	r2, r2, #4
 8001cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69d9      	ldr	r1, [r3, #28]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	61da      	str	r2, [r3, #28]
      break;
 8001ce8:	e023      	b.n	8001d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fa97 	bl	8002224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69d9      	ldr	r1, [r3, #28]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	021a      	lsls	r2, r3, #8
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	61da      	str	r2, [r3, #28]
      break;
 8001d2a:	e002      	b.n	8001d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8001d30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_TIM_ConfigClockSource+0x1c>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e0b4      	b.n	8001eca <HAL_TIM_ConfigClockSource+0x186>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d98:	d03e      	beq.n	8001e18 <HAL_TIM_ConfigClockSource+0xd4>
 8001d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d9e:	f200 8087 	bhi.w	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001da6:	f000 8086 	beq.w	8001eb6 <HAL_TIM_ConfigClockSource+0x172>
 8001daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dae:	d87f      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001db0:	2b70      	cmp	r3, #112	@ 0x70
 8001db2:	d01a      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0xa6>
 8001db4:	2b70      	cmp	r3, #112	@ 0x70
 8001db6:	d87b      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001db8:	2b60      	cmp	r3, #96	@ 0x60
 8001dba:	d050      	beq.n	8001e5e <HAL_TIM_ConfigClockSource+0x11a>
 8001dbc:	2b60      	cmp	r3, #96	@ 0x60
 8001dbe:	d877      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001dc0:	2b50      	cmp	r3, #80	@ 0x50
 8001dc2:	d03c      	beq.n	8001e3e <HAL_TIM_ConfigClockSource+0xfa>
 8001dc4:	2b50      	cmp	r3, #80	@ 0x50
 8001dc6:	d873      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001dc8:	2b40      	cmp	r3, #64	@ 0x40
 8001dca:	d058      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0x13a>
 8001dcc:	2b40      	cmp	r3, #64	@ 0x40
 8001dce:	d86f      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001dd0:	2b30      	cmp	r3, #48	@ 0x30
 8001dd2:	d064      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x15a>
 8001dd4:	2b30      	cmp	r3, #48	@ 0x30
 8001dd6:	d86b      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d060      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x15a>
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d867      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d05c      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x15a>
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d05a      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x15a>
 8001de8:	e062      	b.n	8001eb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001dfa:	f000 fad8 	bl	80023ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001e0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	609a      	str	r2, [r3, #8]
      break;
 8001e16:	e04f      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e28:	f000 fac1 	bl	80023ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e3a:	609a      	str	r2, [r3, #8]
      break;
 8001e3c:	e03c      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f000 fa38 	bl	80022c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2150      	movs	r1, #80	@ 0x50
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fa8f 	bl	800237a <TIM_ITRx_SetConfig>
      break;
 8001e5c:	e02c      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f000 fa56 	bl	800231c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2160      	movs	r1, #96	@ 0x60
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fa7f 	bl	800237a <TIM_ITRx_SetConfig>
      break;
 8001e7c:	e01c      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f000 fa18 	bl	80022c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2140      	movs	r1, #64	@ 0x40
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fa6f 	bl	800237a <TIM_ITRx_SetConfig>
      break;
 8001e9c:	e00c      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f000 fa66 	bl	800237a <TIM_ITRx_SetConfig>
      break;
 8001eae:	e003      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb4:	e000      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa4 <TIM_Base_SetConfig+0xd0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00b      	beq.n	8001f04 <TIM_Base_SetConfig+0x30>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ef2:	d007      	beq.n	8001f04 <TIM_Base_SetConfig+0x30>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa8 <TIM_Base_SetConfig+0xd4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <TIM_Base_SetConfig+0x30>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a2b      	ldr	r2, [pc, #172]	@ (8001fac <TIM_Base_SetConfig+0xd8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d108      	bne.n	8001f16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a22      	ldr	r2, [pc, #136]	@ (8001fa4 <TIM_Base_SetConfig+0xd0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00b      	beq.n	8001f36 <TIM_Base_SetConfig+0x62>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f24:	d007      	beq.n	8001f36 <TIM_Base_SetConfig+0x62>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa8 <TIM_Base_SetConfig+0xd4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d003      	beq.n	8001f36 <TIM_Base_SetConfig+0x62>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1e      	ldr	r2, [pc, #120]	@ (8001fac <TIM_Base_SetConfig+0xd8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d108      	bne.n	8001f48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <TIM_Base_SetConfig+0xd0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d103      	bne.n	8001f7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f023 0201 	bic.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	611a      	str	r2, [r3, #16]
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40012c00 	.word	0x40012c00
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40000800 	.word	0x40000800

08001fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f023 0201 	bic.w	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0303 	bic.w	r3, r3, #3
 8001fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f023 0302 	bic.w	r3, r3, #2
 8001ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a1c      	ldr	r2, [pc, #112]	@ (8002078 <TIM_OC1_SetConfig+0xc8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d10c      	bne.n	8002026 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f023 0308 	bic.w	r3, r3, #8
 8002012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a13      	ldr	r2, [pc, #76]	@ (8002078 <TIM_OC1_SetConfig+0xc8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d111      	bne.n	8002052 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800203c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	621a      	str	r2, [r3, #32]
}
 800206c:	bf00      	nop
 800206e:	371c      	adds	r7, #28
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40012c00 	.word	0x40012c00

0800207c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f023 0210 	bic.w	r2, r3, #16
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f023 0320 	bic.w	r3, r3, #32
 80020c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a1d      	ldr	r2, [pc, #116]	@ (800214c <TIM_OC2_SetConfig+0xd0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d10d      	bne.n	80020f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a14      	ldr	r2, [pc, #80]	@ (800214c <TIM_OC2_SetConfig+0xd0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d113      	bne.n	8002128 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800210e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	621a      	str	r2, [r3, #32]
}
 8002142:	bf00      	nop
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	40012c00 	.word	0x40012c00

08002150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800217e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0303 	bic.w	r3, r3, #3
 8002186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002220 <TIM_OC3_SetConfig+0xd0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10d      	bne.n	80021ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80021b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a14      	ldr	r2, [pc, #80]	@ (8002220 <TIM_OC3_SetConfig+0xd0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d113      	bne.n	80021fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80021e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	621a      	str	r2, [r3, #32]
}
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40012c00 	.word	0x40012c00

08002224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800225a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800226e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	031b      	lsls	r3, r3, #12
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a0f      	ldr	r2, [pc, #60]	@ (80022bc <TIM_OC4_SetConfig+0x98>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d109      	bne.n	8002298 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800228a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	019b      	lsls	r3, r3, #6
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4313      	orrs	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	621a      	str	r2, [r3, #32]
}
 80022b2:	bf00      	nop
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	40012c00 	.word	0x40012c00

080022c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	f023 0201 	bic.w	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f023 030a 	bic.w	r3, r3, #10
 80022fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4313      	orrs	r3, r2
 8002304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	621a      	str	r2, [r3, #32]
}
 8002312:	bf00      	nop
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f023 0210 	bic.w	r2, r3, #16
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	031b      	lsls	r3, r3, #12
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002358:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	621a      	str	r2, [r3, #32]
}
 8002370:	bf00      	nop
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	f043 0307 	orr.w	r3, r3, #7
 800239c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	609a      	str	r2, [r3, #8]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b087      	sub	sp, #28
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	021a      	lsls	r2, r3, #8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4313      	orrs	r3, r2
 80023da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	609a      	str	r2, [r3, #8]
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2201      	movs	r2, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a1a      	ldr	r2, [r3, #32]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	43db      	mvns	r3, r3
 800240e:	401a      	ands	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a1a      	ldr	r2, [r3, #32]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	431a      	orrs	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	621a      	str	r2, [r3, #32]
}
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002448:	2302      	movs	r3, #2
 800244a:	e046      	b.n	80024da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a16      	ldr	r2, [pc, #88]	@ (80024e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00e      	beq.n	80024ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002498:	d009      	beq.n	80024ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a12      	ldr	r2, [pc, #72]	@ (80024e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d004      	beq.n	80024ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a10      	ldr	r2, [pc, #64]	@ (80024ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d10c      	bne.n	80024c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40000800 	.word	0x40000800

080024f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002508:	2302      	movs	r3, #2
 800250a:	e03d      	b.n	8002588 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e042      	b.n	800262a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d106      	bne.n	80025be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7fe f853 	bl	8000664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2224      	movs	r2, #36	@ 0x24
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fdfa 	bl	80031d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800260a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b08a      	sub	sp, #40	@ 0x28
 8002636:	af02      	add	r7, sp, #8
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4613      	mov	r3, r2
 8002640:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b20      	cmp	r3, #32
 8002650:	d175      	bne.n	800273e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <HAL_UART_Transmit+0x2c>
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e06e      	b.n	8002740 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2221      	movs	r2, #33	@ 0x21
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002670:	f7fe f9a0 	bl	80009b4 <HAL_GetTick>
 8002674:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	88fa      	ldrh	r2, [r7, #6]
 800267a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	88fa      	ldrh	r2, [r7, #6]
 8002680:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800268a:	d108      	bne.n	800269e <HAL_UART_Transmit+0x6c>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	e003      	b.n	80026a6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026a6:	e02e      	b.n	8002706 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2200      	movs	r2, #0
 80026b0:	2180      	movs	r1, #128	@ 0x80
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fb98 	bl	8002de8 <UART_WaitOnFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e03a      	b.n	8002740 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10b      	bne.n	80026e8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	3302      	adds	r3, #2
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	e007      	b.n	80026f8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	781a      	ldrb	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1cb      	bne.n	80026a8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2200      	movs	r2, #0
 8002718:	2140      	movs	r1, #64	@ 0x40
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fb64 	bl	8002de8 <UART_WaitOnFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e006      	b.n	8002740 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800273e:	2302      	movs	r3, #2
  }
}
 8002740:	4618      	mov	r0, r3
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	@ 0x28
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b20      	cmp	r3, #32
 8002766:	f040 8081 	bne.w	800286c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_UART_Receive+0x2e>
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e079      	b.n	800286e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2222      	movs	r2, #34	@ 0x22
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800278e:	f7fe f911 	bl	80009b4 <HAL_GetTick>
 8002792:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	88fa      	ldrh	r2, [r7, #6]
 8002798:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	88fa      	ldrh	r2, [r7, #6]
 800279e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a8:	d108      	bne.n	80027bc <HAL_UART_Receive+0x74>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	e003      	b.n	80027c4 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027c4:	e047      	b.n	8002856 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2200      	movs	r2, #0
 80027ce:	2120      	movs	r1, #32
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fb09 	bl	8002de8 <UART_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e042      	b.n	800286e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	3302      	adds	r3, #2
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	e01f      	b.n	8002848 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002810:	d007      	beq.n	8002822 <HAL_UART_Receive+0xda>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <HAL_UART_Receive+0xe8>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e008      	b.n	8002842 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800283c:	b2da      	uxtb	r2, r3
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1b2      	bne.n	80027c6 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b0ba      	sub	sp, #232	@ 0xe8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80028b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_UART_IRQHandler+0x66>
 80028ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fbbc 	bl	8003054 <UART_Receive_IT>
      return;
 80028dc:	e25b      	b.n	8002d96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80de 	beq.w	8002aa4 <HAL_UART_IRQHandler+0x22c>
 80028e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d106      	bne.n	8002902 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80d1 	beq.w	8002aa4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_UART_IRQHandler+0xae>
 800290e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_UART_IRQHandler+0xd2>
 8002932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	f043 0202 	orr.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800294a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_UART_IRQHandler+0xf6>
 8002956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	f043 0204 	orr.w	r2, r3, #4
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d011      	beq.n	800299e <HAL_UART_IRQHandler+0x126>
 800297a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	d105      	bne.n	8002992 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	f043 0208 	orr.w	r2, r3, #8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 81f2 	beq.w	8002d8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_UART_IRQHandler+0x14e>
 80029b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fb47 	bl	8003054 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bf14      	ite	ne
 80029d4:	2301      	movne	r3, #1
 80029d6:	2300      	moveq	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <HAL_UART_IRQHandler+0x17a>
 80029ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d04f      	beq.n	8002a92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fa51 	bl	8002e9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d041      	beq.n	8002a8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a14:	e853 3f00 	ldrex	r3, [r3]
 8002a18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3314      	adds	r3, #20
 8002a2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a42:	e841 2300 	strex	r3, r2, [r1]
 8002a46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1d9      	bne.n	8002a06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d013      	beq.n	8002a82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c58 <HAL_UART_IRQHandler+0x3e0>)
 8002a60:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe f91a 	bl	8000ca0 <HAL_DMA_Abort_IT>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a80:	e00e      	b.n	8002aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f99c 	bl	8002dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a88:	e00a      	b.n	8002aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f998 	bl	8002dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	e006      	b.n	8002aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f994 	bl	8002dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002a9e:	e175      	b.n	8002d8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa0:	bf00      	nop
    return;
 8002aa2:	e173      	b.n	8002d8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	f040 814f 	bne.w	8002d4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8148 	beq.w	8002d4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8141 	beq.w	8002d4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80b6 	beq.w	8002c5c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002afc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8145 	beq.w	8002d90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	f080 813e 	bcs.w	8002d90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	f000 8088 	beq.w	8002c38 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b36:	e853 3f00 	ldrex	r3, [r3]
 8002b3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	330c      	adds	r3, #12
 8002b50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002b54:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b64:	e841 2300 	strex	r3, r2, [r1]
 8002b68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1d9      	bne.n	8002b28 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3314      	adds	r3, #20
 8002b7a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b7e:	e853 3f00 	ldrex	r3, [r3]
 8002b82:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3314      	adds	r3, #20
 8002b94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b98:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ba0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ba4:	e841 2300 	strex	r3, r2, [r1]
 8002ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002baa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e1      	bne.n	8002b74 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3314      	adds	r3, #20
 8002bb6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bba:	e853 3f00 	ldrex	r3, [r3]
 8002bbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002bc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3314      	adds	r3, #20
 8002bd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002bd4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bd6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002bda:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002bdc:	e841 2300 	strex	r3, r2, [r1]
 8002be0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002be2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e3      	bne.n	8002bb0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c00:	e853 3f00 	ldrex	r3, [r3]
 8002c04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c08:	f023 0310 	bic.w	r3, r3, #16
 8002c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c1a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c1c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c22:	e841 2300 	strex	r3, r2, [r1]
 8002c26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e3      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fff9 	bl	8000c2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8bf 	bl	8002dd2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c54:	e09c      	b.n	8002d90 <HAL_UART_IRQHandler+0x518>
 8002c56:	bf00      	nop
 8002c58:	08002f5f 	.word	0x08002f5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 808e 	beq.w	8002d94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8089 	beq.w	8002d94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002ca6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ca8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002caa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cae:	e841 2300 	strex	r3, r2, [r1]
 8002cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1e3      	bne.n	8002c82 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3314      	adds	r3, #20
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3314      	adds	r3, #20
 8002cda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002cde:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e3      	bne.n	8002cba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	330c      	adds	r3, #12
 8002d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	e853 3f00 	ldrex	r3, [r3]
 8002d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0310 	bic.w	r3, r3, #16
 8002d16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	330c      	adds	r3, #12
 8002d20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d24:	61fa      	str	r2, [r7, #28]
 8002d26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	69b9      	ldr	r1, [r7, #24]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	617b      	str	r3, [r7, #20]
   return(result);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e3      	bne.n	8002d00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f844 	bl	8002dd2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d4a:	e023      	b.n	8002d94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d009      	beq.n	8002d6c <HAL_UART_IRQHandler+0x4f4>
 8002d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f90e 	bl	8002f86 <UART_Transmit_IT>
    return;
 8002d6a:	e014      	b.n	8002d96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00e      	beq.n	8002d96 <HAL_UART_IRQHandler+0x51e>
 8002d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f94d 	bl	8003024 <UART_EndTransmit_IT>
    return;
 8002d8a:	e004      	b.n	8002d96 <HAL_UART_IRQHandler+0x51e>
    return;
 8002d8c:	bf00      	nop
 8002d8e:	e002      	b.n	8002d96 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d90:	bf00      	nop
 8002d92:	e000      	b.n	8002d96 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d94:	bf00      	nop
  }
}
 8002d96:	37e8      	adds	r7, #232	@ 0xe8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df8:	e03b      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d037      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e02:	f7fd fdd7 	bl	80009b4 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d302      	bcc.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e03a      	b.n	8002e92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d023      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b80      	cmp	r3, #128	@ 0x80
 8002e2e:	d020      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b40      	cmp	r3, #64	@ 0x40
 8002e34:	d01d      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d116      	bne.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f81d 	bl	8002e9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2208      	movs	r2, #8
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00f      	b.n	8002e92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d0b4      	beq.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b095      	sub	sp, #84	@ 0x54
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ec2:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ec8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002eca:	e841 2300 	strex	r3, r2, [r1]
 8002ece:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1e5      	bne.n	8002ea2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3314      	adds	r3, #20
 8002edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	e853 3f00 	ldrex	r3, [r3]
 8002ee4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3314      	adds	r3, #20
 8002ef4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ef6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002efc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002efe:	e841 2300 	strex	r3, r2, [r1]
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e5      	bne.n	8002ed6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d119      	bne.n	8002f46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f023 0310 	bic.w	r3, r3, #16
 8002f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	330c      	adds	r3, #12
 8002f30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f32:	61ba      	str	r2, [r7, #24]
 8002f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	6979      	ldr	r1, [r7, #20]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e5      	bne.n	8002f12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f54:	bf00      	nop
 8002f56:	3754      	adds	r7, #84	@ 0x54
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff ff21 	bl	8002dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b085      	sub	sp, #20
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b21      	cmp	r3, #33	@ 0x21
 8002f98:	d13e      	bne.n	8003018 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa2:	d114      	bne.n	8002fce <UART_Transmit_IT+0x48>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d110      	bne.n	8002fce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	1c9a      	adds	r2, r3, #2
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	621a      	str	r2, [r3, #32]
 8002fcc:	e008      	b.n	8002fe0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	1c59      	adds	r1, r3, #1
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6211      	str	r1, [r2, #32]
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4619      	mov	r1, r3
 8002fee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10f      	bne.n	8003014 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003002:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003012:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e000      	b.n	800301a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800303a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fea9 	bl	8002d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	@ 0x30
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b22      	cmp	r3, #34	@ 0x22
 8003066:	f040 80ae 	bne.w	80031c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003072:	d117      	bne.n	80030a4 <UART_Receive_IT+0x50>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d113      	bne.n	80030a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800307c:	2300      	movs	r3, #0
 800307e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003084:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	b29b      	uxth	r3, r3
 800308e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003092:	b29a      	uxth	r2, r3
 8003094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003096:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309c:	1c9a      	adds	r2, r3, #2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80030a2:	e026      	b.n	80030f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b6:	d007      	beq.n	80030c8 <UART_Receive_IT+0x74>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <UART_Receive_IT+0x82>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d106      	bne.n	80030d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	701a      	strb	r2, [r3, #0]
 80030d4:	e008      	b.n	80030e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4619      	mov	r1, r3
 8003100:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003102:	2b00      	cmp	r3, #0
 8003104:	d15d      	bne.n	80031c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0220 	bic.w	r2, r2, #32
 8003114:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003124:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695a      	ldr	r2, [r3, #20]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0201 	bic.w	r2, r2, #1
 8003134:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	2b01      	cmp	r3, #1
 800314a:	d135      	bne.n	80031b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	330c      	adds	r3, #12
 8003158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	613b      	str	r3, [r7, #16]
   return(result);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f023 0310 	bic.w	r3, r3, #16
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	330c      	adds	r3, #12
 8003170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003172:	623a      	str	r2, [r7, #32]
 8003174:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	69f9      	ldr	r1, [r7, #28]
 8003178:	6a3a      	ldr	r2, [r7, #32]
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e5      	bne.n	8003152 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b10      	cmp	r3, #16
 8003192:	d10a      	bne.n	80031aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031ae:	4619      	mov	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff fe0e 	bl	8002dd2 <HAL_UARTEx_RxEventCallback>
 80031b6:	e002      	b.n	80031be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff fdf8 	bl	8002dae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e002      	b.n	80031c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e000      	b.n	80031c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3730      	adds	r7, #48	@ 0x30
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800320a:	f023 030c 	bic.w	r3, r3, #12
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	430b      	orrs	r3, r1
 8003216:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2c      	ldr	r2, [pc, #176]	@ (80032e4 <UART_SetConfig+0x114>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d103      	bne.n	8003240 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003238:	f7fe fb46 	bl	80018c8 <HAL_RCC_GetPCLK2Freq>
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	e002      	b.n	8003246 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003240:	f7fe fb2e 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8003244:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009a      	lsls	r2, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	4a22      	ldr	r2, [pc, #136]	@ (80032e8 <UART_SetConfig+0x118>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	0119      	lsls	r1, r3, #4
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009a      	lsls	r2, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	fbb2 f2f3 	udiv	r2, r2, r3
 800327c:	4b1a      	ldr	r3, [pc, #104]	@ (80032e8 <UART_SetConfig+0x118>)
 800327e:	fba3 0302 	umull	r0, r3, r3, r2
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2064      	movs	r0, #100	@ 0x64
 8003286:	fb00 f303 	mul.w	r3, r0, r3
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	3332      	adds	r3, #50	@ 0x32
 8003290:	4a15      	ldr	r2, [pc, #84]	@ (80032e8 <UART_SetConfig+0x118>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800329c:	4419      	add	r1, r3
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b4:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <UART_SetConfig+0x118>)
 80032b6:	fba3 0302 	umull	r0, r3, r3, r2
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2064      	movs	r0, #100	@ 0x64
 80032be:	fb00 f303 	mul.w	r3, r0, r3
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	3332      	adds	r3, #50	@ 0x32
 80032c8:	4a07      	ldr	r2, [pc, #28]	@ (80032e8 <UART_SetConfig+0x118>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	f003 020f 	and.w	r2, r3, #15
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	440a      	add	r2, r1
 80032da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40013800 	.word	0x40013800
 80032e8:	51eb851f 	.word	0x51eb851f

080032ec <std>:
 80032ec:	2300      	movs	r3, #0
 80032ee:	b510      	push	{r4, lr}
 80032f0:	4604      	mov	r4, r0
 80032f2:	e9c0 3300 	strd	r3, r3, [r0]
 80032f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032fa:	6083      	str	r3, [r0, #8]
 80032fc:	8181      	strh	r1, [r0, #12]
 80032fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8003300:	81c2      	strh	r2, [r0, #14]
 8003302:	6183      	str	r3, [r0, #24]
 8003304:	4619      	mov	r1, r3
 8003306:	2208      	movs	r2, #8
 8003308:	305c      	adds	r0, #92	@ 0x5c
 800330a:	f000 f9f9 	bl	8003700 <memset>
 800330e:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <std+0x58>)
 8003310:	6224      	str	r4, [r4, #32]
 8003312:	6263      	str	r3, [r4, #36]	@ 0x24
 8003314:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <std+0x5c>)
 8003316:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003318:	4b0c      	ldr	r3, [pc, #48]	@ (800334c <std+0x60>)
 800331a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800331c:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <std+0x64>)
 800331e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003320:	4b0c      	ldr	r3, [pc, #48]	@ (8003354 <std+0x68>)
 8003322:	429c      	cmp	r4, r3
 8003324:	d006      	beq.n	8003334 <std+0x48>
 8003326:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800332a:	4294      	cmp	r4, r2
 800332c:	d002      	beq.n	8003334 <std+0x48>
 800332e:	33d0      	adds	r3, #208	@ 0xd0
 8003330:	429c      	cmp	r4, r3
 8003332:	d105      	bne.n	8003340 <std+0x54>
 8003334:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800333c:	f000 ba58 	b.w	80037f0 <__retarget_lock_init_recursive>
 8003340:	bd10      	pop	{r4, pc}
 8003342:	bf00      	nop
 8003344:	08003551 	.word	0x08003551
 8003348:	08003573 	.word	0x08003573
 800334c:	080035ab 	.word	0x080035ab
 8003350:	080035cf 	.word	0x080035cf
 8003354:	20000124 	.word	0x20000124

08003358 <stdio_exit_handler>:
 8003358:	4a02      	ldr	r2, [pc, #8]	@ (8003364 <stdio_exit_handler+0xc>)
 800335a:	4903      	ldr	r1, [pc, #12]	@ (8003368 <stdio_exit_handler+0x10>)
 800335c:	4803      	ldr	r0, [pc, #12]	@ (800336c <stdio_exit_handler+0x14>)
 800335e:	f000 b869 	b.w	8003434 <_fwalk_sglue>
 8003362:	bf00      	nop
 8003364:	20000010 	.word	0x20000010
 8003368:	08004085 	.word	0x08004085
 800336c:	20000020 	.word	0x20000020

08003370 <cleanup_stdio>:
 8003370:	6841      	ldr	r1, [r0, #4]
 8003372:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <cleanup_stdio+0x34>)
 8003374:	b510      	push	{r4, lr}
 8003376:	4299      	cmp	r1, r3
 8003378:	4604      	mov	r4, r0
 800337a:	d001      	beq.n	8003380 <cleanup_stdio+0x10>
 800337c:	f000 fe82 	bl	8004084 <_fflush_r>
 8003380:	68a1      	ldr	r1, [r4, #8]
 8003382:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <cleanup_stdio+0x38>)
 8003384:	4299      	cmp	r1, r3
 8003386:	d002      	beq.n	800338e <cleanup_stdio+0x1e>
 8003388:	4620      	mov	r0, r4
 800338a:	f000 fe7b 	bl	8004084 <_fflush_r>
 800338e:	68e1      	ldr	r1, [r4, #12]
 8003390:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <cleanup_stdio+0x3c>)
 8003392:	4299      	cmp	r1, r3
 8003394:	d004      	beq.n	80033a0 <cleanup_stdio+0x30>
 8003396:	4620      	mov	r0, r4
 8003398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800339c:	f000 be72 	b.w	8004084 <_fflush_r>
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	bf00      	nop
 80033a4:	20000124 	.word	0x20000124
 80033a8:	2000018c 	.word	0x2000018c
 80033ac:	200001f4 	.word	0x200001f4

080033b0 <global_stdio_init.part.0>:
 80033b0:	b510      	push	{r4, lr}
 80033b2:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <global_stdio_init.part.0+0x30>)
 80033b4:	4c0b      	ldr	r4, [pc, #44]	@ (80033e4 <global_stdio_init.part.0+0x34>)
 80033b6:	4a0c      	ldr	r2, [pc, #48]	@ (80033e8 <global_stdio_init.part.0+0x38>)
 80033b8:	4620      	mov	r0, r4
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	2104      	movs	r1, #4
 80033be:	2200      	movs	r2, #0
 80033c0:	f7ff ff94 	bl	80032ec <std>
 80033c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033c8:	2201      	movs	r2, #1
 80033ca:	2109      	movs	r1, #9
 80033cc:	f7ff ff8e 	bl	80032ec <std>
 80033d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033d4:	2202      	movs	r2, #2
 80033d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033da:	2112      	movs	r1, #18
 80033dc:	f7ff bf86 	b.w	80032ec <std>
 80033e0:	2000025c 	.word	0x2000025c
 80033e4:	20000124 	.word	0x20000124
 80033e8:	08003359 	.word	0x08003359

080033ec <__sfp_lock_acquire>:
 80033ec:	4801      	ldr	r0, [pc, #4]	@ (80033f4 <__sfp_lock_acquire+0x8>)
 80033ee:	f000 ba00 	b.w	80037f2 <__retarget_lock_acquire_recursive>
 80033f2:	bf00      	nop
 80033f4:	20000265 	.word	0x20000265

080033f8 <__sfp_lock_release>:
 80033f8:	4801      	ldr	r0, [pc, #4]	@ (8003400 <__sfp_lock_release+0x8>)
 80033fa:	f000 b9fb 	b.w	80037f4 <__retarget_lock_release_recursive>
 80033fe:	bf00      	nop
 8003400:	20000265 	.word	0x20000265

08003404 <__sinit>:
 8003404:	b510      	push	{r4, lr}
 8003406:	4604      	mov	r4, r0
 8003408:	f7ff fff0 	bl	80033ec <__sfp_lock_acquire>
 800340c:	6a23      	ldr	r3, [r4, #32]
 800340e:	b11b      	cbz	r3, 8003418 <__sinit+0x14>
 8003410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003414:	f7ff bff0 	b.w	80033f8 <__sfp_lock_release>
 8003418:	4b04      	ldr	r3, [pc, #16]	@ (800342c <__sinit+0x28>)
 800341a:	6223      	str	r3, [r4, #32]
 800341c:	4b04      	ldr	r3, [pc, #16]	@ (8003430 <__sinit+0x2c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f5      	bne.n	8003410 <__sinit+0xc>
 8003424:	f7ff ffc4 	bl	80033b0 <global_stdio_init.part.0>
 8003428:	e7f2      	b.n	8003410 <__sinit+0xc>
 800342a:	bf00      	nop
 800342c:	08003371 	.word	0x08003371
 8003430:	2000025c 	.word	0x2000025c

08003434 <_fwalk_sglue>:
 8003434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003438:	4607      	mov	r7, r0
 800343a:	4688      	mov	r8, r1
 800343c:	4614      	mov	r4, r2
 800343e:	2600      	movs	r6, #0
 8003440:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003444:	f1b9 0901 	subs.w	r9, r9, #1
 8003448:	d505      	bpl.n	8003456 <_fwalk_sglue+0x22>
 800344a:	6824      	ldr	r4, [r4, #0]
 800344c:	2c00      	cmp	r4, #0
 800344e:	d1f7      	bne.n	8003440 <_fwalk_sglue+0xc>
 8003450:	4630      	mov	r0, r6
 8003452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003456:	89ab      	ldrh	r3, [r5, #12]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d907      	bls.n	800346c <_fwalk_sglue+0x38>
 800345c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003460:	3301      	adds	r3, #1
 8003462:	d003      	beq.n	800346c <_fwalk_sglue+0x38>
 8003464:	4629      	mov	r1, r5
 8003466:	4638      	mov	r0, r7
 8003468:	47c0      	blx	r8
 800346a:	4306      	orrs	r6, r0
 800346c:	3568      	adds	r5, #104	@ 0x68
 800346e:	e7e9      	b.n	8003444 <_fwalk_sglue+0x10>

08003470 <iprintf>:
 8003470:	b40f      	push	{r0, r1, r2, r3}
 8003472:	b507      	push	{r0, r1, r2, lr}
 8003474:	4906      	ldr	r1, [pc, #24]	@ (8003490 <iprintf+0x20>)
 8003476:	ab04      	add	r3, sp, #16
 8003478:	6808      	ldr	r0, [r1, #0]
 800347a:	f853 2b04 	ldr.w	r2, [r3], #4
 800347e:	6881      	ldr	r1, [r0, #8]
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	f000 fad7 	bl	8003a34 <_vfiprintf_r>
 8003486:	b003      	add	sp, #12
 8003488:	f85d eb04 	ldr.w	lr, [sp], #4
 800348c:	b004      	add	sp, #16
 800348e:	4770      	bx	lr
 8003490:	2000001c 	.word	0x2000001c

08003494 <_puts_r>:
 8003494:	6a03      	ldr	r3, [r0, #32]
 8003496:	b570      	push	{r4, r5, r6, lr}
 8003498:	4605      	mov	r5, r0
 800349a:	460e      	mov	r6, r1
 800349c:	6884      	ldr	r4, [r0, #8]
 800349e:	b90b      	cbnz	r3, 80034a4 <_puts_r+0x10>
 80034a0:	f7ff ffb0 	bl	8003404 <__sinit>
 80034a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034a6:	07db      	lsls	r3, r3, #31
 80034a8:	d405      	bmi.n	80034b6 <_puts_r+0x22>
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	0598      	lsls	r0, r3, #22
 80034ae:	d402      	bmi.n	80034b6 <_puts_r+0x22>
 80034b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034b2:	f000 f99e 	bl	80037f2 <__retarget_lock_acquire_recursive>
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	0719      	lsls	r1, r3, #28
 80034ba:	d502      	bpl.n	80034c2 <_puts_r+0x2e>
 80034bc:	6923      	ldr	r3, [r4, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d135      	bne.n	800352e <_puts_r+0x9a>
 80034c2:	4621      	mov	r1, r4
 80034c4:	4628      	mov	r0, r5
 80034c6:	f000 f8c5 	bl	8003654 <__swsetup_r>
 80034ca:	b380      	cbz	r0, 800352e <_puts_r+0x9a>
 80034cc:	f04f 35ff 	mov.w	r5, #4294967295
 80034d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034d2:	07da      	lsls	r2, r3, #31
 80034d4:	d405      	bmi.n	80034e2 <_puts_r+0x4e>
 80034d6:	89a3      	ldrh	r3, [r4, #12]
 80034d8:	059b      	lsls	r3, r3, #22
 80034da:	d402      	bmi.n	80034e2 <_puts_r+0x4e>
 80034dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034de:	f000 f989 	bl	80037f4 <__retarget_lock_release_recursive>
 80034e2:	4628      	mov	r0, r5
 80034e4:	bd70      	pop	{r4, r5, r6, pc}
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	da04      	bge.n	80034f4 <_puts_r+0x60>
 80034ea:	69a2      	ldr	r2, [r4, #24]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	dc17      	bgt.n	8003520 <_puts_r+0x8c>
 80034f0:	290a      	cmp	r1, #10
 80034f2:	d015      	beq.n	8003520 <_puts_r+0x8c>
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	6022      	str	r2, [r4, #0]
 80034fa:	7019      	strb	r1, [r3, #0]
 80034fc:	68a3      	ldr	r3, [r4, #8]
 80034fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003502:	3b01      	subs	r3, #1
 8003504:	60a3      	str	r3, [r4, #8]
 8003506:	2900      	cmp	r1, #0
 8003508:	d1ed      	bne.n	80034e6 <_puts_r+0x52>
 800350a:	2b00      	cmp	r3, #0
 800350c:	da11      	bge.n	8003532 <_puts_r+0x9e>
 800350e:	4622      	mov	r2, r4
 8003510:	210a      	movs	r1, #10
 8003512:	4628      	mov	r0, r5
 8003514:	f000 f85f 	bl	80035d6 <__swbuf_r>
 8003518:	3001      	adds	r0, #1
 800351a:	d0d7      	beq.n	80034cc <_puts_r+0x38>
 800351c:	250a      	movs	r5, #10
 800351e:	e7d7      	b.n	80034d0 <_puts_r+0x3c>
 8003520:	4622      	mov	r2, r4
 8003522:	4628      	mov	r0, r5
 8003524:	f000 f857 	bl	80035d6 <__swbuf_r>
 8003528:	3001      	adds	r0, #1
 800352a:	d1e7      	bne.n	80034fc <_puts_r+0x68>
 800352c:	e7ce      	b.n	80034cc <_puts_r+0x38>
 800352e:	3e01      	subs	r6, #1
 8003530:	e7e4      	b.n	80034fc <_puts_r+0x68>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	6022      	str	r2, [r4, #0]
 8003538:	220a      	movs	r2, #10
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	e7ee      	b.n	800351c <_puts_r+0x88>
	...

08003540 <puts>:
 8003540:	4b02      	ldr	r3, [pc, #8]	@ (800354c <puts+0xc>)
 8003542:	4601      	mov	r1, r0
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	f7ff bfa5 	b.w	8003494 <_puts_r>
 800354a:	bf00      	nop
 800354c:	2000001c 	.word	0x2000001c

08003550 <__sread>:
 8003550:	b510      	push	{r4, lr}
 8003552:	460c      	mov	r4, r1
 8003554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003558:	f000 f8fc 	bl	8003754 <_read_r>
 800355c:	2800      	cmp	r0, #0
 800355e:	bfab      	itete	ge
 8003560:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003562:	89a3      	ldrhlt	r3, [r4, #12]
 8003564:	181b      	addge	r3, r3, r0
 8003566:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800356a:	bfac      	ite	ge
 800356c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800356e:	81a3      	strhlt	r3, [r4, #12]
 8003570:	bd10      	pop	{r4, pc}

08003572 <__swrite>:
 8003572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003576:	461f      	mov	r7, r3
 8003578:	898b      	ldrh	r3, [r1, #12]
 800357a:	4605      	mov	r5, r0
 800357c:	05db      	lsls	r3, r3, #23
 800357e:	460c      	mov	r4, r1
 8003580:	4616      	mov	r6, r2
 8003582:	d505      	bpl.n	8003590 <__swrite+0x1e>
 8003584:	2302      	movs	r3, #2
 8003586:	2200      	movs	r2, #0
 8003588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358c:	f000 f8d0 	bl	8003730 <_lseek_r>
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	4632      	mov	r2, r6
 8003594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003598:	81a3      	strh	r3, [r4, #12]
 800359a:	4628      	mov	r0, r5
 800359c:	463b      	mov	r3, r7
 800359e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035a6:	f000 b8e7 	b.w	8003778 <_write_r>

080035aa <__sseek>:
 80035aa:	b510      	push	{r4, lr}
 80035ac:	460c      	mov	r4, r1
 80035ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b2:	f000 f8bd 	bl	8003730 <_lseek_r>
 80035b6:	1c43      	adds	r3, r0, #1
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	bf15      	itete	ne
 80035bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80035be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80035c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80035c6:	81a3      	strheq	r3, [r4, #12]
 80035c8:	bf18      	it	ne
 80035ca:	81a3      	strhne	r3, [r4, #12]
 80035cc:	bd10      	pop	{r4, pc}

080035ce <__sclose>:
 80035ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d2:	f000 b89d 	b.w	8003710 <_close_r>

080035d6 <__swbuf_r>:
 80035d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d8:	460e      	mov	r6, r1
 80035da:	4614      	mov	r4, r2
 80035dc:	4605      	mov	r5, r0
 80035de:	b118      	cbz	r0, 80035e8 <__swbuf_r+0x12>
 80035e0:	6a03      	ldr	r3, [r0, #32]
 80035e2:	b90b      	cbnz	r3, 80035e8 <__swbuf_r+0x12>
 80035e4:	f7ff ff0e 	bl	8003404 <__sinit>
 80035e8:	69a3      	ldr	r3, [r4, #24]
 80035ea:	60a3      	str	r3, [r4, #8]
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	071a      	lsls	r2, r3, #28
 80035f0:	d501      	bpl.n	80035f6 <__swbuf_r+0x20>
 80035f2:	6923      	ldr	r3, [r4, #16]
 80035f4:	b943      	cbnz	r3, 8003608 <__swbuf_r+0x32>
 80035f6:	4621      	mov	r1, r4
 80035f8:	4628      	mov	r0, r5
 80035fa:	f000 f82b 	bl	8003654 <__swsetup_r>
 80035fe:	b118      	cbz	r0, 8003608 <__swbuf_r+0x32>
 8003600:	f04f 37ff 	mov.w	r7, #4294967295
 8003604:	4638      	mov	r0, r7
 8003606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	6922      	ldr	r2, [r4, #16]
 800360c:	b2f6      	uxtb	r6, r6
 800360e:	1a98      	subs	r0, r3, r2
 8003610:	6963      	ldr	r3, [r4, #20]
 8003612:	4637      	mov	r7, r6
 8003614:	4283      	cmp	r3, r0
 8003616:	dc05      	bgt.n	8003624 <__swbuf_r+0x4e>
 8003618:	4621      	mov	r1, r4
 800361a:	4628      	mov	r0, r5
 800361c:	f000 fd32 	bl	8004084 <_fflush_r>
 8003620:	2800      	cmp	r0, #0
 8003622:	d1ed      	bne.n	8003600 <__swbuf_r+0x2a>
 8003624:	68a3      	ldr	r3, [r4, #8]
 8003626:	3b01      	subs	r3, #1
 8003628:	60a3      	str	r3, [r4, #8]
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	6022      	str	r2, [r4, #0]
 8003630:	701e      	strb	r6, [r3, #0]
 8003632:	6962      	ldr	r2, [r4, #20]
 8003634:	1c43      	adds	r3, r0, #1
 8003636:	429a      	cmp	r2, r3
 8003638:	d004      	beq.n	8003644 <__swbuf_r+0x6e>
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	07db      	lsls	r3, r3, #31
 800363e:	d5e1      	bpl.n	8003604 <__swbuf_r+0x2e>
 8003640:	2e0a      	cmp	r6, #10
 8003642:	d1df      	bne.n	8003604 <__swbuf_r+0x2e>
 8003644:	4621      	mov	r1, r4
 8003646:	4628      	mov	r0, r5
 8003648:	f000 fd1c 	bl	8004084 <_fflush_r>
 800364c:	2800      	cmp	r0, #0
 800364e:	d0d9      	beq.n	8003604 <__swbuf_r+0x2e>
 8003650:	e7d6      	b.n	8003600 <__swbuf_r+0x2a>
	...

08003654 <__swsetup_r>:
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	4b29      	ldr	r3, [pc, #164]	@ (80036fc <__swsetup_r+0xa8>)
 8003658:	4605      	mov	r5, r0
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	460c      	mov	r4, r1
 800365e:	b118      	cbz	r0, 8003668 <__swsetup_r+0x14>
 8003660:	6a03      	ldr	r3, [r0, #32]
 8003662:	b90b      	cbnz	r3, 8003668 <__swsetup_r+0x14>
 8003664:	f7ff fece 	bl	8003404 <__sinit>
 8003668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800366c:	0719      	lsls	r1, r3, #28
 800366e:	d422      	bmi.n	80036b6 <__swsetup_r+0x62>
 8003670:	06da      	lsls	r2, r3, #27
 8003672:	d407      	bmi.n	8003684 <__swsetup_r+0x30>
 8003674:	2209      	movs	r2, #9
 8003676:	602a      	str	r2, [r5, #0]
 8003678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800367c:	f04f 30ff 	mov.w	r0, #4294967295
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	e033      	b.n	80036ec <__swsetup_r+0x98>
 8003684:	0758      	lsls	r0, r3, #29
 8003686:	d512      	bpl.n	80036ae <__swsetup_r+0x5a>
 8003688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800368a:	b141      	cbz	r1, 800369e <__swsetup_r+0x4a>
 800368c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003690:	4299      	cmp	r1, r3
 8003692:	d002      	beq.n	800369a <__swsetup_r+0x46>
 8003694:	4628      	mov	r0, r5
 8003696:	f000 f8af 	bl	80037f8 <_free_r>
 800369a:	2300      	movs	r3, #0
 800369c:	6363      	str	r3, [r4, #52]	@ 0x34
 800369e:	89a3      	ldrh	r3, [r4, #12]
 80036a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80036a4:	81a3      	strh	r3, [r4, #12]
 80036a6:	2300      	movs	r3, #0
 80036a8:	6063      	str	r3, [r4, #4]
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	89a3      	ldrh	r3, [r4, #12]
 80036b0:	f043 0308 	orr.w	r3, r3, #8
 80036b4:	81a3      	strh	r3, [r4, #12]
 80036b6:	6923      	ldr	r3, [r4, #16]
 80036b8:	b94b      	cbnz	r3, 80036ce <__swsetup_r+0x7a>
 80036ba:	89a3      	ldrh	r3, [r4, #12]
 80036bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80036c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036c4:	d003      	beq.n	80036ce <__swsetup_r+0x7a>
 80036c6:	4621      	mov	r1, r4
 80036c8:	4628      	mov	r0, r5
 80036ca:	f000 fd28 	bl	800411e <__smakebuf_r>
 80036ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036d2:	f013 0201 	ands.w	r2, r3, #1
 80036d6:	d00a      	beq.n	80036ee <__swsetup_r+0x9a>
 80036d8:	2200      	movs	r2, #0
 80036da:	60a2      	str	r2, [r4, #8]
 80036dc:	6962      	ldr	r2, [r4, #20]
 80036de:	4252      	negs	r2, r2
 80036e0:	61a2      	str	r2, [r4, #24]
 80036e2:	6922      	ldr	r2, [r4, #16]
 80036e4:	b942      	cbnz	r2, 80036f8 <__swsetup_r+0xa4>
 80036e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80036ea:	d1c5      	bne.n	8003678 <__swsetup_r+0x24>
 80036ec:	bd38      	pop	{r3, r4, r5, pc}
 80036ee:	0799      	lsls	r1, r3, #30
 80036f0:	bf58      	it	pl
 80036f2:	6962      	ldrpl	r2, [r4, #20]
 80036f4:	60a2      	str	r2, [r4, #8]
 80036f6:	e7f4      	b.n	80036e2 <__swsetup_r+0x8e>
 80036f8:	2000      	movs	r0, #0
 80036fa:	e7f7      	b.n	80036ec <__swsetup_r+0x98>
 80036fc:	2000001c 	.word	0x2000001c

08003700 <memset>:
 8003700:	4603      	mov	r3, r0
 8003702:	4402      	add	r2, r0
 8003704:	4293      	cmp	r3, r2
 8003706:	d100      	bne.n	800370a <memset+0xa>
 8003708:	4770      	bx	lr
 800370a:	f803 1b01 	strb.w	r1, [r3], #1
 800370e:	e7f9      	b.n	8003704 <memset+0x4>

08003710 <_close_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	2300      	movs	r3, #0
 8003714:	4d05      	ldr	r5, [pc, #20]	@ (800372c <_close_r+0x1c>)
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	602b      	str	r3, [r5, #0]
 800371c:	f7fd f85f 	bl	80007de <_close>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d102      	bne.n	800372a <_close_r+0x1a>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	b103      	cbz	r3, 800372a <_close_r+0x1a>
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	20000260 	.word	0x20000260

08003730 <_lseek_r>:
 8003730:	b538      	push	{r3, r4, r5, lr}
 8003732:	4604      	mov	r4, r0
 8003734:	4608      	mov	r0, r1
 8003736:	4611      	mov	r1, r2
 8003738:	2200      	movs	r2, #0
 800373a:	4d05      	ldr	r5, [pc, #20]	@ (8003750 <_lseek_r+0x20>)
 800373c:	602a      	str	r2, [r5, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	f7fd f871 	bl	8000826 <_lseek>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d102      	bne.n	800374e <_lseek_r+0x1e>
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	b103      	cbz	r3, 800374e <_lseek_r+0x1e>
 800374c:	6023      	str	r3, [r4, #0]
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	20000260 	.word	0x20000260

08003754 <_read_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	2200      	movs	r2, #0
 800375e:	4d05      	ldr	r5, [pc, #20]	@ (8003774 <_read_r+0x20>)
 8003760:	602a      	str	r2, [r5, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	f7fd f802 	bl	800076c <_read>
 8003768:	1c43      	adds	r3, r0, #1
 800376a:	d102      	bne.n	8003772 <_read_r+0x1e>
 800376c:	682b      	ldr	r3, [r5, #0]
 800376e:	b103      	cbz	r3, 8003772 <_read_r+0x1e>
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	bd38      	pop	{r3, r4, r5, pc}
 8003774:	20000260 	.word	0x20000260

08003778 <_write_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	4604      	mov	r4, r0
 800377c:	4608      	mov	r0, r1
 800377e:	4611      	mov	r1, r2
 8003780:	2200      	movs	r2, #0
 8003782:	4d05      	ldr	r5, [pc, #20]	@ (8003798 <_write_r+0x20>)
 8003784:	602a      	str	r2, [r5, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	f7fd f80d 	bl	80007a6 <_write>
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	d102      	bne.n	8003796 <_write_r+0x1e>
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	b103      	cbz	r3, 8003796 <_write_r+0x1e>
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	20000260 	.word	0x20000260

0800379c <__errno>:
 800379c:	4b01      	ldr	r3, [pc, #4]	@ (80037a4 <__errno+0x8>)
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	2000001c 	.word	0x2000001c

080037a8 <__libc_init_array>:
 80037a8:	b570      	push	{r4, r5, r6, lr}
 80037aa:	2600      	movs	r6, #0
 80037ac:	4d0c      	ldr	r5, [pc, #48]	@ (80037e0 <__libc_init_array+0x38>)
 80037ae:	4c0d      	ldr	r4, [pc, #52]	@ (80037e4 <__libc_init_array+0x3c>)
 80037b0:	1b64      	subs	r4, r4, r5
 80037b2:	10a4      	asrs	r4, r4, #2
 80037b4:	42a6      	cmp	r6, r4
 80037b6:	d109      	bne.n	80037cc <__libc_init_array+0x24>
 80037b8:	f000 fd2e 	bl	8004218 <_init>
 80037bc:	2600      	movs	r6, #0
 80037be:	4d0a      	ldr	r5, [pc, #40]	@ (80037e8 <__libc_init_array+0x40>)
 80037c0:	4c0a      	ldr	r4, [pc, #40]	@ (80037ec <__libc_init_array+0x44>)
 80037c2:	1b64      	subs	r4, r4, r5
 80037c4:	10a4      	asrs	r4, r4, #2
 80037c6:	42a6      	cmp	r6, r4
 80037c8:	d105      	bne.n	80037d6 <__libc_init_array+0x2e>
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
 80037cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d0:	4798      	blx	r3
 80037d2:	3601      	adds	r6, #1
 80037d4:	e7ee      	b.n	80037b4 <__libc_init_array+0xc>
 80037d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037da:	4798      	blx	r3
 80037dc:	3601      	adds	r6, #1
 80037de:	e7f2      	b.n	80037c6 <__libc_init_array+0x1e>
 80037e0:	080042f4 	.word	0x080042f4
 80037e4:	080042f4 	.word	0x080042f4
 80037e8:	080042f4 	.word	0x080042f4
 80037ec:	080042f8 	.word	0x080042f8

080037f0 <__retarget_lock_init_recursive>:
 80037f0:	4770      	bx	lr

080037f2 <__retarget_lock_acquire_recursive>:
 80037f2:	4770      	bx	lr

080037f4 <__retarget_lock_release_recursive>:
 80037f4:	4770      	bx	lr
	...

080037f8 <_free_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4605      	mov	r5, r0
 80037fc:	2900      	cmp	r1, #0
 80037fe:	d040      	beq.n	8003882 <_free_r+0x8a>
 8003800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003804:	1f0c      	subs	r4, r1, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	bfb8      	it	lt
 800380a:	18e4      	addlt	r4, r4, r3
 800380c:	f000 f8de 	bl	80039cc <__malloc_lock>
 8003810:	4a1c      	ldr	r2, [pc, #112]	@ (8003884 <_free_r+0x8c>)
 8003812:	6813      	ldr	r3, [r2, #0]
 8003814:	b933      	cbnz	r3, 8003824 <_free_r+0x2c>
 8003816:	6063      	str	r3, [r4, #4]
 8003818:	6014      	str	r4, [r2, #0]
 800381a:	4628      	mov	r0, r5
 800381c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003820:	f000 b8da 	b.w	80039d8 <__malloc_unlock>
 8003824:	42a3      	cmp	r3, r4
 8003826:	d908      	bls.n	800383a <_free_r+0x42>
 8003828:	6820      	ldr	r0, [r4, #0]
 800382a:	1821      	adds	r1, r4, r0
 800382c:	428b      	cmp	r3, r1
 800382e:	bf01      	itttt	eq
 8003830:	6819      	ldreq	r1, [r3, #0]
 8003832:	685b      	ldreq	r3, [r3, #4]
 8003834:	1809      	addeq	r1, r1, r0
 8003836:	6021      	streq	r1, [r4, #0]
 8003838:	e7ed      	b.n	8003816 <_free_r+0x1e>
 800383a:	461a      	mov	r2, r3
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	b10b      	cbz	r3, 8003844 <_free_r+0x4c>
 8003840:	42a3      	cmp	r3, r4
 8003842:	d9fa      	bls.n	800383a <_free_r+0x42>
 8003844:	6811      	ldr	r1, [r2, #0]
 8003846:	1850      	adds	r0, r2, r1
 8003848:	42a0      	cmp	r0, r4
 800384a:	d10b      	bne.n	8003864 <_free_r+0x6c>
 800384c:	6820      	ldr	r0, [r4, #0]
 800384e:	4401      	add	r1, r0
 8003850:	1850      	adds	r0, r2, r1
 8003852:	4283      	cmp	r3, r0
 8003854:	6011      	str	r1, [r2, #0]
 8003856:	d1e0      	bne.n	800381a <_free_r+0x22>
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4408      	add	r0, r1
 800385e:	6010      	str	r0, [r2, #0]
 8003860:	6053      	str	r3, [r2, #4]
 8003862:	e7da      	b.n	800381a <_free_r+0x22>
 8003864:	d902      	bls.n	800386c <_free_r+0x74>
 8003866:	230c      	movs	r3, #12
 8003868:	602b      	str	r3, [r5, #0]
 800386a:	e7d6      	b.n	800381a <_free_r+0x22>
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	1821      	adds	r1, r4, r0
 8003870:	428b      	cmp	r3, r1
 8003872:	bf01      	itttt	eq
 8003874:	6819      	ldreq	r1, [r3, #0]
 8003876:	685b      	ldreq	r3, [r3, #4]
 8003878:	1809      	addeq	r1, r1, r0
 800387a:	6021      	streq	r1, [r4, #0]
 800387c:	6063      	str	r3, [r4, #4]
 800387e:	6054      	str	r4, [r2, #4]
 8003880:	e7cb      	b.n	800381a <_free_r+0x22>
 8003882:	bd38      	pop	{r3, r4, r5, pc}
 8003884:	2000026c 	.word	0x2000026c

08003888 <sbrk_aligned>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	4e0f      	ldr	r6, [pc, #60]	@ (80038c8 <sbrk_aligned+0x40>)
 800388c:	460c      	mov	r4, r1
 800388e:	6831      	ldr	r1, [r6, #0]
 8003890:	4605      	mov	r5, r0
 8003892:	b911      	cbnz	r1, 800389a <sbrk_aligned+0x12>
 8003894:	f000 fca2 	bl	80041dc <_sbrk_r>
 8003898:	6030      	str	r0, [r6, #0]
 800389a:	4621      	mov	r1, r4
 800389c:	4628      	mov	r0, r5
 800389e:	f000 fc9d 	bl	80041dc <_sbrk_r>
 80038a2:	1c43      	adds	r3, r0, #1
 80038a4:	d103      	bne.n	80038ae <sbrk_aligned+0x26>
 80038a6:	f04f 34ff 	mov.w	r4, #4294967295
 80038aa:	4620      	mov	r0, r4
 80038ac:	bd70      	pop	{r4, r5, r6, pc}
 80038ae:	1cc4      	adds	r4, r0, #3
 80038b0:	f024 0403 	bic.w	r4, r4, #3
 80038b4:	42a0      	cmp	r0, r4
 80038b6:	d0f8      	beq.n	80038aa <sbrk_aligned+0x22>
 80038b8:	1a21      	subs	r1, r4, r0
 80038ba:	4628      	mov	r0, r5
 80038bc:	f000 fc8e 	bl	80041dc <_sbrk_r>
 80038c0:	3001      	adds	r0, #1
 80038c2:	d1f2      	bne.n	80038aa <sbrk_aligned+0x22>
 80038c4:	e7ef      	b.n	80038a6 <sbrk_aligned+0x1e>
 80038c6:	bf00      	nop
 80038c8:	20000268 	.word	0x20000268

080038cc <_malloc_r>:
 80038cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038d0:	1ccd      	adds	r5, r1, #3
 80038d2:	f025 0503 	bic.w	r5, r5, #3
 80038d6:	3508      	adds	r5, #8
 80038d8:	2d0c      	cmp	r5, #12
 80038da:	bf38      	it	cc
 80038dc:	250c      	movcc	r5, #12
 80038de:	2d00      	cmp	r5, #0
 80038e0:	4606      	mov	r6, r0
 80038e2:	db01      	blt.n	80038e8 <_malloc_r+0x1c>
 80038e4:	42a9      	cmp	r1, r5
 80038e6:	d904      	bls.n	80038f2 <_malloc_r+0x26>
 80038e8:	230c      	movs	r3, #12
 80038ea:	6033      	str	r3, [r6, #0]
 80038ec:	2000      	movs	r0, #0
 80038ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039c8 <_malloc_r+0xfc>
 80038f6:	f000 f869 	bl	80039cc <__malloc_lock>
 80038fa:	f8d8 3000 	ldr.w	r3, [r8]
 80038fe:	461c      	mov	r4, r3
 8003900:	bb44      	cbnz	r4, 8003954 <_malloc_r+0x88>
 8003902:	4629      	mov	r1, r5
 8003904:	4630      	mov	r0, r6
 8003906:	f7ff ffbf 	bl	8003888 <sbrk_aligned>
 800390a:	1c43      	adds	r3, r0, #1
 800390c:	4604      	mov	r4, r0
 800390e:	d158      	bne.n	80039c2 <_malloc_r+0xf6>
 8003910:	f8d8 4000 	ldr.w	r4, [r8]
 8003914:	4627      	mov	r7, r4
 8003916:	2f00      	cmp	r7, #0
 8003918:	d143      	bne.n	80039a2 <_malloc_r+0xd6>
 800391a:	2c00      	cmp	r4, #0
 800391c:	d04b      	beq.n	80039b6 <_malloc_r+0xea>
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	4639      	mov	r1, r7
 8003922:	4630      	mov	r0, r6
 8003924:	eb04 0903 	add.w	r9, r4, r3
 8003928:	f000 fc58 	bl	80041dc <_sbrk_r>
 800392c:	4581      	cmp	r9, r0
 800392e:	d142      	bne.n	80039b6 <_malloc_r+0xea>
 8003930:	6821      	ldr	r1, [r4, #0]
 8003932:	4630      	mov	r0, r6
 8003934:	1a6d      	subs	r5, r5, r1
 8003936:	4629      	mov	r1, r5
 8003938:	f7ff ffa6 	bl	8003888 <sbrk_aligned>
 800393c:	3001      	adds	r0, #1
 800393e:	d03a      	beq.n	80039b6 <_malloc_r+0xea>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	442b      	add	r3, r5
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	f8d8 3000 	ldr.w	r3, [r8]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	bb62      	cbnz	r2, 80039a8 <_malloc_r+0xdc>
 800394e:	f8c8 7000 	str.w	r7, [r8]
 8003952:	e00f      	b.n	8003974 <_malloc_r+0xa8>
 8003954:	6822      	ldr	r2, [r4, #0]
 8003956:	1b52      	subs	r2, r2, r5
 8003958:	d420      	bmi.n	800399c <_malloc_r+0xd0>
 800395a:	2a0b      	cmp	r2, #11
 800395c:	d917      	bls.n	800398e <_malloc_r+0xc2>
 800395e:	1961      	adds	r1, r4, r5
 8003960:	42a3      	cmp	r3, r4
 8003962:	6025      	str	r5, [r4, #0]
 8003964:	bf18      	it	ne
 8003966:	6059      	strne	r1, [r3, #4]
 8003968:	6863      	ldr	r3, [r4, #4]
 800396a:	bf08      	it	eq
 800396c:	f8c8 1000 	streq.w	r1, [r8]
 8003970:	5162      	str	r2, [r4, r5]
 8003972:	604b      	str	r3, [r1, #4]
 8003974:	4630      	mov	r0, r6
 8003976:	f000 f82f 	bl	80039d8 <__malloc_unlock>
 800397a:	f104 000b 	add.w	r0, r4, #11
 800397e:	1d23      	adds	r3, r4, #4
 8003980:	f020 0007 	bic.w	r0, r0, #7
 8003984:	1ac2      	subs	r2, r0, r3
 8003986:	bf1c      	itt	ne
 8003988:	1a1b      	subne	r3, r3, r0
 800398a:	50a3      	strne	r3, [r4, r2]
 800398c:	e7af      	b.n	80038ee <_malloc_r+0x22>
 800398e:	6862      	ldr	r2, [r4, #4]
 8003990:	42a3      	cmp	r3, r4
 8003992:	bf0c      	ite	eq
 8003994:	f8c8 2000 	streq.w	r2, [r8]
 8003998:	605a      	strne	r2, [r3, #4]
 800399a:	e7eb      	b.n	8003974 <_malloc_r+0xa8>
 800399c:	4623      	mov	r3, r4
 800399e:	6864      	ldr	r4, [r4, #4]
 80039a0:	e7ae      	b.n	8003900 <_malloc_r+0x34>
 80039a2:	463c      	mov	r4, r7
 80039a4:	687f      	ldr	r7, [r7, #4]
 80039a6:	e7b6      	b.n	8003916 <_malloc_r+0x4a>
 80039a8:	461a      	mov	r2, r3
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	42a3      	cmp	r3, r4
 80039ae:	d1fb      	bne.n	80039a8 <_malloc_r+0xdc>
 80039b0:	2300      	movs	r3, #0
 80039b2:	6053      	str	r3, [r2, #4]
 80039b4:	e7de      	b.n	8003974 <_malloc_r+0xa8>
 80039b6:	230c      	movs	r3, #12
 80039b8:	4630      	mov	r0, r6
 80039ba:	6033      	str	r3, [r6, #0]
 80039bc:	f000 f80c 	bl	80039d8 <__malloc_unlock>
 80039c0:	e794      	b.n	80038ec <_malloc_r+0x20>
 80039c2:	6005      	str	r5, [r0, #0]
 80039c4:	e7d6      	b.n	8003974 <_malloc_r+0xa8>
 80039c6:	bf00      	nop
 80039c8:	2000026c 	.word	0x2000026c

080039cc <__malloc_lock>:
 80039cc:	4801      	ldr	r0, [pc, #4]	@ (80039d4 <__malloc_lock+0x8>)
 80039ce:	f7ff bf10 	b.w	80037f2 <__retarget_lock_acquire_recursive>
 80039d2:	bf00      	nop
 80039d4:	20000264 	.word	0x20000264

080039d8 <__malloc_unlock>:
 80039d8:	4801      	ldr	r0, [pc, #4]	@ (80039e0 <__malloc_unlock+0x8>)
 80039da:	f7ff bf0b 	b.w	80037f4 <__retarget_lock_release_recursive>
 80039de:	bf00      	nop
 80039e0:	20000264 	.word	0x20000264

080039e4 <__sfputc_r>:
 80039e4:	6893      	ldr	r3, [r2, #8]
 80039e6:	b410      	push	{r4}
 80039e8:	3b01      	subs	r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	6093      	str	r3, [r2, #8]
 80039ee:	da07      	bge.n	8003a00 <__sfputc_r+0x1c>
 80039f0:	6994      	ldr	r4, [r2, #24]
 80039f2:	42a3      	cmp	r3, r4
 80039f4:	db01      	blt.n	80039fa <__sfputc_r+0x16>
 80039f6:	290a      	cmp	r1, #10
 80039f8:	d102      	bne.n	8003a00 <__sfputc_r+0x1c>
 80039fa:	bc10      	pop	{r4}
 80039fc:	f7ff bdeb 	b.w	80035d6 <__swbuf_r>
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	1c58      	adds	r0, r3, #1
 8003a04:	6010      	str	r0, [r2, #0]
 8003a06:	7019      	strb	r1, [r3, #0]
 8003a08:	4608      	mov	r0, r1
 8003a0a:	bc10      	pop	{r4}
 8003a0c:	4770      	bx	lr

08003a0e <__sfputs_r>:
 8003a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a10:	4606      	mov	r6, r0
 8003a12:	460f      	mov	r7, r1
 8003a14:	4614      	mov	r4, r2
 8003a16:	18d5      	adds	r5, r2, r3
 8003a18:	42ac      	cmp	r4, r5
 8003a1a:	d101      	bne.n	8003a20 <__sfputs_r+0x12>
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	e007      	b.n	8003a30 <__sfputs_r+0x22>
 8003a20:	463a      	mov	r2, r7
 8003a22:	4630      	mov	r0, r6
 8003a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a28:	f7ff ffdc 	bl	80039e4 <__sfputc_r>
 8003a2c:	1c43      	adds	r3, r0, #1
 8003a2e:	d1f3      	bne.n	8003a18 <__sfputs_r+0xa>
 8003a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a34 <_vfiprintf_r>:
 8003a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	460d      	mov	r5, r1
 8003a3a:	4614      	mov	r4, r2
 8003a3c:	4698      	mov	r8, r3
 8003a3e:	4606      	mov	r6, r0
 8003a40:	b09d      	sub	sp, #116	@ 0x74
 8003a42:	b118      	cbz	r0, 8003a4c <_vfiprintf_r+0x18>
 8003a44:	6a03      	ldr	r3, [r0, #32]
 8003a46:	b90b      	cbnz	r3, 8003a4c <_vfiprintf_r+0x18>
 8003a48:	f7ff fcdc 	bl	8003404 <__sinit>
 8003a4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a4e:	07d9      	lsls	r1, r3, #31
 8003a50:	d405      	bmi.n	8003a5e <_vfiprintf_r+0x2a>
 8003a52:	89ab      	ldrh	r3, [r5, #12]
 8003a54:	059a      	lsls	r2, r3, #22
 8003a56:	d402      	bmi.n	8003a5e <_vfiprintf_r+0x2a>
 8003a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a5a:	f7ff feca 	bl	80037f2 <__retarget_lock_acquire_recursive>
 8003a5e:	89ab      	ldrh	r3, [r5, #12]
 8003a60:	071b      	lsls	r3, r3, #28
 8003a62:	d501      	bpl.n	8003a68 <_vfiprintf_r+0x34>
 8003a64:	692b      	ldr	r3, [r5, #16]
 8003a66:	b99b      	cbnz	r3, 8003a90 <_vfiprintf_r+0x5c>
 8003a68:	4629      	mov	r1, r5
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	f7ff fdf2 	bl	8003654 <__swsetup_r>
 8003a70:	b170      	cbz	r0, 8003a90 <_vfiprintf_r+0x5c>
 8003a72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a74:	07dc      	lsls	r4, r3, #31
 8003a76:	d504      	bpl.n	8003a82 <_vfiprintf_r+0x4e>
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	b01d      	add	sp, #116	@ 0x74
 8003a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a82:	89ab      	ldrh	r3, [r5, #12]
 8003a84:	0598      	lsls	r0, r3, #22
 8003a86:	d4f7      	bmi.n	8003a78 <_vfiprintf_r+0x44>
 8003a88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a8a:	f7ff feb3 	bl	80037f4 <__retarget_lock_release_recursive>
 8003a8e:	e7f3      	b.n	8003a78 <_vfiprintf_r+0x44>
 8003a90:	2300      	movs	r3, #0
 8003a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a94:	2320      	movs	r3, #32
 8003a96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a9a:	2330      	movs	r3, #48	@ 0x30
 8003a9c:	f04f 0901 	mov.w	r9, #1
 8003aa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aa4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003c50 <_vfiprintf_r+0x21c>
 8003aa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003aac:	4623      	mov	r3, r4
 8003aae:	469a      	mov	sl, r3
 8003ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ab4:	b10a      	cbz	r2, 8003aba <_vfiprintf_r+0x86>
 8003ab6:	2a25      	cmp	r2, #37	@ 0x25
 8003ab8:	d1f9      	bne.n	8003aae <_vfiprintf_r+0x7a>
 8003aba:	ebba 0b04 	subs.w	fp, sl, r4
 8003abe:	d00b      	beq.n	8003ad8 <_vfiprintf_r+0xa4>
 8003ac0:	465b      	mov	r3, fp
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	f7ff ffa1 	bl	8003a0e <__sfputs_r>
 8003acc:	3001      	adds	r0, #1
 8003ace:	f000 80a7 	beq.w	8003c20 <_vfiprintf_r+0x1ec>
 8003ad2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ad4:	445a      	add	r2, fp
 8003ad6:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 809f 	beq.w	8003c20 <_vfiprintf_r+0x1ec>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aec:	f10a 0a01 	add.w	sl, sl, #1
 8003af0:	9304      	str	r3, [sp, #16]
 8003af2:	9307      	str	r3, [sp, #28]
 8003af4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003af8:	931a      	str	r3, [sp, #104]	@ 0x68
 8003afa:	4654      	mov	r4, sl
 8003afc:	2205      	movs	r2, #5
 8003afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b02:	4853      	ldr	r0, [pc, #332]	@ (8003c50 <_vfiprintf_r+0x21c>)
 8003b04:	f000 fb7a 	bl	80041fc <memchr>
 8003b08:	9a04      	ldr	r2, [sp, #16]
 8003b0a:	b9d8      	cbnz	r0, 8003b44 <_vfiprintf_r+0x110>
 8003b0c:	06d1      	lsls	r1, r2, #27
 8003b0e:	bf44      	itt	mi
 8003b10:	2320      	movmi	r3, #32
 8003b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b16:	0713      	lsls	r3, r2, #28
 8003b18:	bf44      	itt	mi
 8003b1a:	232b      	movmi	r3, #43	@ 0x2b
 8003b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b20:	f89a 3000 	ldrb.w	r3, [sl]
 8003b24:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b26:	d015      	beq.n	8003b54 <_vfiprintf_r+0x120>
 8003b28:	4654      	mov	r4, sl
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	f04f 0c0a 	mov.w	ip, #10
 8003b30:	9a07      	ldr	r2, [sp, #28]
 8003b32:	4621      	mov	r1, r4
 8003b34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b38:	3b30      	subs	r3, #48	@ 0x30
 8003b3a:	2b09      	cmp	r3, #9
 8003b3c:	d94b      	bls.n	8003bd6 <_vfiprintf_r+0x1a2>
 8003b3e:	b1b0      	cbz	r0, 8003b6e <_vfiprintf_r+0x13a>
 8003b40:	9207      	str	r2, [sp, #28]
 8003b42:	e014      	b.n	8003b6e <_vfiprintf_r+0x13a>
 8003b44:	eba0 0308 	sub.w	r3, r0, r8
 8003b48:	fa09 f303 	lsl.w	r3, r9, r3
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	46a2      	mov	sl, r4
 8003b50:	9304      	str	r3, [sp, #16]
 8003b52:	e7d2      	b.n	8003afa <_vfiprintf_r+0xc6>
 8003b54:	9b03      	ldr	r3, [sp, #12]
 8003b56:	1d19      	adds	r1, r3, #4
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	9103      	str	r1, [sp, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bfbb      	ittet	lt
 8003b60:	425b      	neglt	r3, r3
 8003b62:	f042 0202 	orrlt.w	r2, r2, #2
 8003b66:	9307      	strge	r3, [sp, #28]
 8003b68:	9307      	strlt	r3, [sp, #28]
 8003b6a:	bfb8      	it	lt
 8003b6c:	9204      	strlt	r2, [sp, #16]
 8003b6e:	7823      	ldrb	r3, [r4, #0]
 8003b70:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b72:	d10a      	bne.n	8003b8a <_vfiprintf_r+0x156>
 8003b74:	7863      	ldrb	r3, [r4, #1]
 8003b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b78:	d132      	bne.n	8003be0 <_vfiprintf_r+0x1ac>
 8003b7a:	9b03      	ldr	r3, [sp, #12]
 8003b7c:	3402      	adds	r4, #2
 8003b7e:	1d1a      	adds	r2, r3, #4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	9203      	str	r2, [sp, #12]
 8003b84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b88:	9305      	str	r3, [sp, #20]
 8003b8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003c54 <_vfiprintf_r+0x220>
 8003b8e:	2203      	movs	r2, #3
 8003b90:	4650      	mov	r0, sl
 8003b92:	7821      	ldrb	r1, [r4, #0]
 8003b94:	f000 fb32 	bl	80041fc <memchr>
 8003b98:	b138      	cbz	r0, 8003baa <_vfiprintf_r+0x176>
 8003b9a:	2240      	movs	r2, #64	@ 0x40
 8003b9c:	9b04      	ldr	r3, [sp, #16]
 8003b9e:	eba0 000a 	sub.w	r0, r0, sl
 8003ba2:	4082      	lsls	r2, r0
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	3401      	adds	r4, #1
 8003ba8:	9304      	str	r3, [sp, #16]
 8003baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bae:	2206      	movs	r2, #6
 8003bb0:	4829      	ldr	r0, [pc, #164]	@ (8003c58 <_vfiprintf_r+0x224>)
 8003bb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bb6:	f000 fb21 	bl	80041fc <memchr>
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d03f      	beq.n	8003c3e <_vfiprintf_r+0x20a>
 8003bbe:	4b27      	ldr	r3, [pc, #156]	@ (8003c5c <_vfiprintf_r+0x228>)
 8003bc0:	bb1b      	cbnz	r3, 8003c0a <_vfiprintf_r+0x1d6>
 8003bc2:	9b03      	ldr	r3, [sp, #12]
 8003bc4:	3307      	adds	r3, #7
 8003bc6:	f023 0307 	bic.w	r3, r3, #7
 8003bca:	3308      	adds	r3, #8
 8003bcc:	9303      	str	r3, [sp, #12]
 8003bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bd0:	443b      	add	r3, r7
 8003bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bd4:	e76a      	b.n	8003aac <_vfiprintf_r+0x78>
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	2001      	movs	r0, #1
 8003bda:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bde:	e7a8      	b.n	8003b32 <_vfiprintf_r+0xfe>
 8003be0:	2300      	movs	r3, #0
 8003be2:	f04f 0c0a 	mov.w	ip, #10
 8003be6:	4619      	mov	r1, r3
 8003be8:	3401      	adds	r4, #1
 8003bea:	9305      	str	r3, [sp, #20]
 8003bec:	4620      	mov	r0, r4
 8003bee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bf2:	3a30      	subs	r2, #48	@ 0x30
 8003bf4:	2a09      	cmp	r2, #9
 8003bf6:	d903      	bls.n	8003c00 <_vfiprintf_r+0x1cc>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0c6      	beq.n	8003b8a <_vfiprintf_r+0x156>
 8003bfc:	9105      	str	r1, [sp, #20]
 8003bfe:	e7c4      	b.n	8003b8a <_vfiprintf_r+0x156>
 8003c00:	4604      	mov	r4, r0
 8003c02:	2301      	movs	r3, #1
 8003c04:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c08:	e7f0      	b.n	8003bec <_vfiprintf_r+0x1b8>
 8003c0a:	ab03      	add	r3, sp, #12
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	462a      	mov	r2, r5
 8003c10:	4630      	mov	r0, r6
 8003c12:	4b13      	ldr	r3, [pc, #76]	@ (8003c60 <_vfiprintf_r+0x22c>)
 8003c14:	a904      	add	r1, sp, #16
 8003c16:	f3af 8000 	nop.w
 8003c1a:	4607      	mov	r7, r0
 8003c1c:	1c78      	adds	r0, r7, #1
 8003c1e:	d1d6      	bne.n	8003bce <_vfiprintf_r+0x19a>
 8003c20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c22:	07d9      	lsls	r1, r3, #31
 8003c24:	d405      	bmi.n	8003c32 <_vfiprintf_r+0x1fe>
 8003c26:	89ab      	ldrh	r3, [r5, #12]
 8003c28:	059a      	lsls	r2, r3, #22
 8003c2a:	d402      	bmi.n	8003c32 <_vfiprintf_r+0x1fe>
 8003c2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c2e:	f7ff fde1 	bl	80037f4 <__retarget_lock_release_recursive>
 8003c32:	89ab      	ldrh	r3, [r5, #12]
 8003c34:	065b      	lsls	r3, r3, #25
 8003c36:	f53f af1f 	bmi.w	8003a78 <_vfiprintf_r+0x44>
 8003c3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c3c:	e71e      	b.n	8003a7c <_vfiprintf_r+0x48>
 8003c3e:	ab03      	add	r3, sp, #12
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	462a      	mov	r2, r5
 8003c44:	4630      	mov	r0, r6
 8003c46:	4b06      	ldr	r3, [pc, #24]	@ (8003c60 <_vfiprintf_r+0x22c>)
 8003c48:	a904      	add	r1, sp, #16
 8003c4a:	f000 f87d 	bl	8003d48 <_printf_i>
 8003c4e:	e7e4      	b.n	8003c1a <_vfiprintf_r+0x1e6>
 8003c50:	080042be 	.word	0x080042be
 8003c54:	080042c4 	.word	0x080042c4
 8003c58:	080042c8 	.word	0x080042c8
 8003c5c:	00000000 	.word	0x00000000
 8003c60:	08003a0f 	.word	0x08003a0f

08003c64 <_printf_common>:
 8003c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c68:	4616      	mov	r6, r2
 8003c6a:	4698      	mov	r8, r3
 8003c6c:	688a      	ldr	r2, [r1, #8]
 8003c6e:	690b      	ldr	r3, [r1, #16]
 8003c70:	4607      	mov	r7, r0
 8003c72:	4293      	cmp	r3, r2
 8003c74:	bfb8      	it	lt
 8003c76:	4613      	movlt	r3, r2
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c7e:	460c      	mov	r4, r1
 8003c80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c84:	b10a      	cbz	r2, 8003c8a <_printf_common+0x26>
 8003c86:	3301      	adds	r3, #1
 8003c88:	6033      	str	r3, [r6, #0]
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	0699      	lsls	r1, r3, #26
 8003c8e:	bf42      	ittt	mi
 8003c90:	6833      	ldrmi	r3, [r6, #0]
 8003c92:	3302      	addmi	r3, #2
 8003c94:	6033      	strmi	r3, [r6, #0]
 8003c96:	6825      	ldr	r5, [r4, #0]
 8003c98:	f015 0506 	ands.w	r5, r5, #6
 8003c9c:	d106      	bne.n	8003cac <_printf_common+0x48>
 8003c9e:	f104 0a19 	add.w	sl, r4, #25
 8003ca2:	68e3      	ldr	r3, [r4, #12]
 8003ca4:	6832      	ldr	r2, [r6, #0]
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	42ab      	cmp	r3, r5
 8003caa:	dc2b      	bgt.n	8003d04 <_printf_common+0xa0>
 8003cac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cb0:	6822      	ldr	r2, [r4, #0]
 8003cb2:	3b00      	subs	r3, #0
 8003cb4:	bf18      	it	ne
 8003cb6:	2301      	movne	r3, #1
 8003cb8:	0692      	lsls	r2, r2, #26
 8003cba:	d430      	bmi.n	8003d1e <_printf_common+0xba>
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003cc4:	47c8      	blx	r9
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	d023      	beq.n	8003d12 <_printf_common+0xae>
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	6922      	ldr	r2, [r4, #16]
 8003cce:	f003 0306 	and.w	r3, r3, #6
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	bf14      	ite	ne
 8003cd6:	2500      	movne	r5, #0
 8003cd8:	6833      	ldreq	r3, [r6, #0]
 8003cda:	f04f 0600 	mov.w	r6, #0
 8003cde:	bf08      	it	eq
 8003ce0:	68e5      	ldreq	r5, [r4, #12]
 8003ce2:	f104 041a 	add.w	r4, r4, #26
 8003ce6:	bf08      	it	eq
 8003ce8:	1aed      	subeq	r5, r5, r3
 8003cea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003cee:	bf08      	it	eq
 8003cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	bfc4      	itt	gt
 8003cf8:	1a9b      	subgt	r3, r3, r2
 8003cfa:	18ed      	addgt	r5, r5, r3
 8003cfc:	42b5      	cmp	r5, r6
 8003cfe:	d11a      	bne.n	8003d36 <_printf_common+0xd2>
 8003d00:	2000      	movs	r0, #0
 8003d02:	e008      	b.n	8003d16 <_printf_common+0xb2>
 8003d04:	2301      	movs	r3, #1
 8003d06:	4652      	mov	r2, sl
 8003d08:	4641      	mov	r1, r8
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	47c8      	blx	r9
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d103      	bne.n	8003d1a <_printf_common+0xb6>
 8003d12:	f04f 30ff 	mov.w	r0, #4294967295
 8003d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d1a:	3501      	adds	r5, #1
 8003d1c:	e7c1      	b.n	8003ca2 <_printf_common+0x3e>
 8003d1e:	2030      	movs	r0, #48	@ 0x30
 8003d20:	18e1      	adds	r1, r4, r3
 8003d22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d2c:	4422      	add	r2, r4
 8003d2e:	3302      	adds	r3, #2
 8003d30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d34:	e7c2      	b.n	8003cbc <_printf_common+0x58>
 8003d36:	2301      	movs	r3, #1
 8003d38:	4622      	mov	r2, r4
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	4638      	mov	r0, r7
 8003d3e:	47c8      	blx	r9
 8003d40:	3001      	adds	r0, #1
 8003d42:	d0e6      	beq.n	8003d12 <_printf_common+0xae>
 8003d44:	3601      	adds	r6, #1
 8003d46:	e7d9      	b.n	8003cfc <_printf_common+0x98>

08003d48 <_printf_i>:
 8003d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d4c:	7e0f      	ldrb	r7, [r1, #24]
 8003d4e:	4691      	mov	r9, r2
 8003d50:	2f78      	cmp	r7, #120	@ 0x78
 8003d52:	4680      	mov	r8, r0
 8003d54:	460c      	mov	r4, r1
 8003d56:	469a      	mov	sl, r3
 8003d58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d5e:	d807      	bhi.n	8003d70 <_printf_i+0x28>
 8003d60:	2f62      	cmp	r7, #98	@ 0x62
 8003d62:	d80a      	bhi.n	8003d7a <_printf_i+0x32>
 8003d64:	2f00      	cmp	r7, #0
 8003d66:	f000 80d1 	beq.w	8003f0c <_printf_i+0x1c4>
 8003d6a:	2f58      	cmp	r7, #88	@ 0x58
 8003d6c:	f000 80b8 	beq.w	8003ee0 <_printf_i+0x198>
 8003d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d78:	e03a      	b.n	8003df0 <_printf_i+0xa8>
 8003d7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d7e:	2b15      	cmp	r3, #21
 8003d80:	d8f6      	bhi.n	8003d70 <_printf_i+0x28>
 8003d82:	a101      	add	r1, pc, #4	@ (adr r1, 8003d88 <_printf_i+0x40>)
 8003d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d88:	08003de1 	.word	0x08003de1
 8003d8c:	08003df5 	.word	0x08003df5
 8003d90:	08003d71 	.word	0x08003d71
 8003d94:	08003d71 	.word	0x08003d71
 8003d98:	08003d71 	.word	0x08003d71
 8003d9c:	08003d71 	.word	0x08003d71
 8003da0:	08003df5 	.word	0x08003df5
 8003da4:	08003d71 	.word	0x08003d71
 8003da8:	08003d71 	.word	0x08003d71
 8003dac:	08003d71 	.word	0x08003d71
 8003db0:	08003d71 	.word	0x08003d71
 8003db4:	08003ef3 	.word	0x08003ef3
 8003db8:	08003e1f 	.word	0x08003e1f
 8003dbc:	08003ead 	.word	0x08003ead
 8003dc0:	08003d71 	.word	0x08003d71
 8003dc4:	08003d71 	.word	0x08003d71
 8003dc8:	08003f15 	.word	0x08003f15
 8003dcc:	08003d71 	.word	0x08003d71
 8003dd0:	08003e1f 	.word	0x08003e1f
 8003dd4:	08003d71 	.word	0x08003d71
 8003dd8:	08003d71 	.word	0x08003d71
 8003ddc:	08003eb5 	.word	0x08003eb5
 8003de0:	6833      	ldr	r3, [r6, #0]
 8003de2:	1d1a      	adds	r2, r3, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6032      	str	r2, [r6, #0]
 8003de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003df0:	2301      	movs	r3, #1
 8003df2:	e09c      	b.n	8003f2e <_printf_i+0x1e6>
 8003df4:	6833      	ldr	r3, [r6, #0]
 8003df6:	6820      	ldr	r0, [r4, #0]
 8003df8:	1d19      	adds	r1, r3, #4
 8003dfa:	6031      	str	r1, [r6, #0]
 8003dfc:	0606      	lsls	r6, r0, #24
 8003dfe:	d501      	bpl.n	8003e04 <_printf_i+0xbc>
 8003e00:	681d      	ldr	r5, [r3, #0]
 8003e02:	e003      	b.n	8003e0c <_printf_i+0xc4>
 8003e04:	0645      	lsls	r5, r0, #25
 8003e06:	d5fb      	bpl.n	8003e00 <_printf_i+0xb8>
 8003e08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e0c:	2d00      	cmp	r5, #0
 8003e0e:	da03      	bge.n	8003e18 <_printf_i+0xd0>
 8003e10:	232d      	movs	r3, #45	@ 0x2d
 8003e12:	426d      	negs	r5, r5
 8003e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e18:	230a      	movs	r3, #10
 8003e1a:	4858      	ldr	r0, [pc, #352]	@ (8003f7c <_printf_i+0x234>)
 8003e1c:	e011      	b.n	8003e42 <_printf_i+0xfa>
 8003e1e:	6821      	ldr	r1, [r4, #0]
 8003e20:	6833      	ldr	r3, [r6, #0]
 8003e22:	0608      	lsls	r0, r1, #24
 8003e24:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e28:	d402      	bmi.n	8003e30 <_printf_i+0xe8>
 8003e2a:	0649      	lsls	r1, r1, #25
 8003e2c:	bf48      	it	mi
 8003e2e:	b2ad      	uxthmi	r5, r5
 8003e30:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e32:	6033      	str	r3, [r6, #0]
 8003e34:	bf14      	ite	ne
 8003e36:	230a      	movne	r3, #10
 8003e38:	2308      	moveq	r3, #8
 8003e3a:	4850      	ldr	r0, [pc, #320]	@ (8003f7c <_printf_i+0x234>)
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e42:	6866      	ldr	r6, [r4, #4]
 8003e44:	2e00      	cmp	r6, #0
 8003e46:	60a6      	str	r6, [r4, #8]
 8003e48:	db05      	blt.n	8003e56 <_printf_i+0x10e>
 8003e4a:	6821      	ldr	r1, [r4, #0]
 8003e4c:	432e      	orrs	r6, r5
 8003e4e:	f021 0104 	bic.w	r1, r1, #4
 8003e52:	6021      	str	r1, [r4, #0]
 8003e54:	d04b      	beq.n	8003eee <_printf_i+0x1a6>
 8003e56:	4616      	mov	r6, r2
 8003e58:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e5c:	fb03 5711 	mls	r7, r3, r1, r5
 8003e60:	5dc7      	ldrb	r7, [r0, r7]
 8003e62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e66:	462f      	mov	r7, r5
 8003e68:	42bb      	cmp	r3, r7
 8003e6a:	460d      	mov	r5, r1
 8003e6c:	d9f4      	bls.n	8003e58 <_printf_i+0x110>
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d10b      	bne.n	8003e8a <_printf_i+0x142>
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	07df      	lsls	r7, r3, #31
 8003e76:	d508      	bpl.n	8003e8a <_printf_i+0x142>
 8003e78:	6923      	ldr	r3, [r4, #16]
 8003e7a:	6861      	ldr	r1, [r4, #4]
 8003e7c:	4299      	cmp	r1, r3
 8003e7e:	bfde      	ittt	le
 8003e80:	2330      	movle	r3, #48	@ 0x30
 8003e82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e8a:	1b92      	subs	r2, r2, r6
 8003e8c:	6122      	str	r2, [r4, #16]
 8003e8e:	464b      	mov	r3, r9
 8003e90:	4621      	mov	r1, r4
 8003e92:	4640      	mov	r0, r8
 8003e94:	f8cd a000 	str.w	sl, [sp]
 8003e98:	aa03      	add	r2, sp, #12
 8003e9a:	f7ff fee3 	bl	8003c64 <_printf_common>
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d14a      	bne.n	8003f38 <_printf_i+0x1f0>
 8003ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea6:	b004      	add	sp, #16
 8003ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	f043 0320 	orr.w	r3, r3, #32
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	2778      	movs	r7, #120	@ 0x78
 8003eb6:	4832      	ldr	r0, [pc, #200]	@ (8003f80 <_printf_i+0x238>)
 8003eb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	6831      	ldr	r1, [r6, #0]
 8003ec0:	061f      	lsls	r7, r3, #24
 8003ec2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ec6:	d402      	bmi.n	8003ece <_printf_i+0x186>
 8003ec8:	065f      	lsls	r7, r3, #25
 8003eca:	bf48      	it	mi
 8003ecc:	b2ad      	uxthmi	r5, r5
 8003ece:	6031      	str	r1, [r6, #0]
 8003ed0:	07d9      	lsls	r1, r3, #31
 8003ed2:	bf44      	itt	mi
 8003ed4:	f043 0320 	orrmi.w	r3, r3, #32
 8003ed8:	6023      	strmi	r3, [r4, #0]
 8003eda:	b11d      	cbz	r5, 8003ee4 <_printf_i+0x19c>
 8003edc:	2310      	movs	r3, #16
 8003ede:	e7ad      	b.n	8003e3c <_printf_i+0xf4>
 8003ee0:	4826      	ldr	r0, [pc, #152]	@ (8003f7c <_printf_i+0x234>)
 8003ee2:	e7e9      	b.n	8003eb8 <_printf_i+0x170>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	f023 0320 	bic.w	r3, r3, #32
 8003eea:	6023      	str	r3, [r4, #0]
 8003eec:	e7f6      	b.n	8003edc <_printf_i+0x194>
 8003eee:	4616      	mov	r6, r2
 8003ef0:	e7bd      	b.n	8003e6e <_printf_i+0x126>
 8003ef2:	6833      	ldr	r3, [r6, #0]
 8003ef4:	6825      	ldr	r5, [r4, #0]
 8003ef6:	1d18      	adds	r0, r3, #4
 8003ef8:	6961      	ldr	r1, [r4, #20]
 8003efa:	6030      	str	r0, [r6, #0]
 8003efc:	062e      	lsls	r6, r5, #24
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	d501      	bpl.n	8003f06 <_printf_i+0x1be>
 8003f02:	6019      	str	r1, [r3, #0]
 8003f04:	e002      	b.n	8003f0c <_printf_i+0x1c4>
 8003f06:	0668      	lsls	r0, r5, #25
 8003f08:	d5fb      	bpl.n	8003f02 <_printf_i+0x1ba>
 8003f0a:	8019      	strh	r1, [r3, #0]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	4616      	mov	r6, r2
 8003f10:	6123      	str	r3, [r4, #16]
 8003f12:	e7bc      	b.n	8003e8e <_printf_i+0x146>
 8003f14:	6833      	ldr	r3, [r6, #0]
 8003f16:	2100      	movs	r1, #0
 8003f18:	1d1a      	adds	r2, r3, #4
 8003f1a:	6032      	str	r2, [r6, #0]
 8003f1c:	681e      	ldr	r6, [r3, #0]
 8003f1e:	6862      	ldr	r2, [r4, #4]
 8003f20:	4630      	mov	r0, r6
 8003f22:	f000 f96b 	bl	80041fc <memchr>
 8003f26:	b108      	cbz	r0, 8003f2c <_printf_i+0x1e4>
 8003f28:	1b80      	subs	r0, r0, r6
 8003f2a:	6060      	str	r0, [r4, #4]
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	6123      	str	r3, [r4, #16]
 8003f30:	2300      	movs	r3, #0
 8003f32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f36:	e7aa      	b.n	8003e8e <_printf_i+0x146>
 8003f38:	4632      	mov	r2, r6
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	4640      	mov	r0, r8
 8003f3e:	6923      	ldr	r3, [r4, #16]
 8003f40:	47d0      	blx	sl
 8003f42:	3001      	adds	r0, #1
 8003f44:	d0ad      	beq.n	8003ea2 <_printf_i+0x15a>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	079b      	lsls	r3, r3, #30
 8003f4a:	d413      	bmi.n	8003f74 <_printf_i+0x22c>
 8003f4c:	68e0      	ldr	r0, [r4, #12]
 8003f4e:	9b03      	ldr	r3, [sp, #12]
 8003f50:	4298      	cmp	r0, r3
 8003f52:	bfb8      	it	lt
 8003f54:	4618      	movlt	r0, r3
 8003f56:	e7a6      	b.n	8003ea6 <_printf_i+0x15e>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	4632      	mov	r2, r6
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	4640      	mov	r0, r8
 8003f60:	47d0      	blx	sl
 8003f62:	3001      	adds	r0, #1
 8003f64:	d09d      	beq.n	8003ea2 <_printf_i+0x15a>
 8003f66:	3501      	adds	r5, #1
 8003f68:	68e3      	ldr	r3, [r4, #12]
 8003f6a:	9903      	ldr	r1, [sp, #12]
 8003f6c:	1a5b      	subs	r3, r3, r1
 8003f6e:	42ab      	cmp	r3, r5
 8003f70:	dcf2      	bgt.n	8003f58 <_printf_i+0x210>
 8003f72:	e7eb      	b.n	8003f4c <_printf_i+0x204>
 8003f74:	2500      	movs	r5, #0
 8003f76:	f104 0619 	add.w	r6, r4, #25
 8003f7a:	e7f5      	b.n	8003f68 <_printf_i+0x220>
 8003f7c:	080042cf 	.word	0x080042cf
 8003f80:	080042e0 	.word	0x080042e0

08003f84 <__sflush_r>:
 8003f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	0716      	lsls	r6, r2, #28
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	d454      	bmi.n	800403c <__sflush_r+0xb8>
 8003f92:	684b      	ldr	r3, [r1, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	dc02      	bgt.n	8003f9e <__sflush_r+0x1a>
 8003f98:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	dd48      	ble.n	8004030 <__sflush_r+0xac>
 8003f9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003fa0:	2e00      	cmp	r6, #0
 8003fa2:	d045      	beq.n	8004030 <__sflush_r+0xac>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003faa:	682f      	ldr	r7, [r5, #0]
 8003fac:	6a21      	ldr	r1, [r4, #32]
 8003fae:	602b      	str	r3, [r5, #0]
 8003fb0:	d030      	beq.n	8004014 <__sflush_r+0x90>
 8003fb2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003fb4:	89a3      	ldrh	r3, [r4, #12]
 8003fb6:	0759      	lsls	r1, r3, #29
 8003fb8:	d505      	bpl.n	8003fc6 <__sflush_r+0x42>
 8003fba:	6863      	ldr	r3, [r4, #4]
 8003fbc:	1ad2      	subs	r2, r2, r3
 8003fbe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003fc0:	b10b      	cbz	r3, 8003fc6 <__sflush_r+0x42>
 8003fc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003fc4:	1ad2      	subs	r2, r2, r3
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	4628      	mov	r0, r5
 8003fca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003fcc:	6a21      	ldr	r1, [r4, #32]
 8003fce:	47b0      	blx	r6
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	d106      	bne.n	8003fe4 <__sflush_r+0x60>
 8003fd6:	6829      	ldr	r1, [r5, #0]
 8003fd8:	291d      	cmp	r1, #29
 8003fda:	d82b      	bhi.n	8004034 <__sflush_r+0xb0>
 8003fdc:	4a28      	ldr	r2, [pc, #160]	@ (8004080 <__sflush_r+0xfc>)
 8003fde:	40ca      	lsrs	r2, r1
 8003fe0:	07d6      	lsls	r6, r2, #31
 8003fe2:	d527      	bpl.n	8004034 <__sflush_r+0xb0>
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	6062      	str	r2, [r4, #4]
 8003fe8:	6922      	ldr	r2, [r4, #16]
 8003fea:	04d9      	lsls	r1, r3, #19
 8003fec:	6022      	str	r2, [r4, #0]
 8003fee:	d504      	bpl.n	8003ffa <__sflush_r+0x76>
 8003ff0:	1c42      	adds	r2, r0, #1
 8003ff2:	d101      	bne.n	8003ff8 <__sflush_r+0x74>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	b903      	cbnz	r3, 8003ffa <__sflush_r+0x76>
 8003ff8:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ffa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ffc:	602f      	str	r7, [r5, #0]
 8003ffe:	b1b9      	cbz	r1, 8004030 <__sflush_r+0xac>
 8004000:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004004:	4299      	cmp	r1, r3
 8004006:	d002      	beq.n	800400e <__sflush_r+0x8a>
 8004008:	4628      	mov	r0, r5
 800400a:	f7ff fbf5 	bl	80037f8 <_free_r>
 800400e:	2300      	movs	r3, #0
 8004010:	6363      	str	r3, [r4, #52]	@ 0x34
 8004012:	e00d      	b.n	8004030 <__sflush_r+0xac>
 8004014:	2301      	movs	r3, #1
 8004016:	4628      	mov	r0, r5
 8004018:	47b0      	blx	r6
 800401a:	4602      	mov	r2, r0
 800401c:	1c50      	adds	r0, r2, #1
 800401e:	d1c9      	bne.n	8003fb4 <__sflush_r+0x30>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0c6      	beq.n	8003fb4 <__sflush_r+0x30>
 8004026:	2b1d      	cmp	r3, #29
 8004028:	d001      	beq.n	800402e <__sflush_r+0xaa>
 800402a:	2b16      	cmp	r3, #22
 800402c:	d11d      	bne.n	800406a <__sflush_r+0xe6>
 800402e:	602f      	str	r7, [r5, #0]
 8004030:	2000      	movs	r0, #0
 8004032:	e021      	b.n	8004078 <__sflush_r+0xf4>
 8004034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004038:	b21b      	sxth	r3, r3
 800403a:	e01a      	b.n	8004072 <__sflush_r+0xee>
 800403c:	690f      	ldr	r7, [r1, #16]
 800403e:	2f00      	cmp	r7, #0
 8004040:	d0f6      	beq.n	8004030 <__sflush_r+0xac>
 8004042:	0793      	lsls	r3, r2, #30
 8004044:	bf18      	it	ne
 8004046:	2300      	movne	r3, #0
 8004048:	680e      	ldr	r6, [r1, #0]
 800404a:	bf08      	it	eq
 800404c:	694b      	ldreq	r3, [r1, #20]
 800404e:	1bf6      	subs	r6, r6, r7
 8004050:	600f      	str	r7, [r1, #0]
 8004052:	608b      	str	r3, [r1, #8]
 8004054:	2e00      	cmp	r6, #0
 8004056:	ddeb      	ble.n	8004030 <__sflush_r+0xac>
 8004058:	4633      	mov	r3, r6
 800405a:	463a      	mov	r2, r7
 800405c:	4628      	mov	r0, r5
 800405e:	6a21      	ldr	r1, [r4, #32]
 8004060:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004064:	47e0      	blx	ip
 8004066:	2800      	cmp	r0, #0
 8004068:	dc07      	bgt.n	800407a <__sflush_r+0xf6>
 800406a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800406e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004072:	f04f 30ff 	mov.w	r0, #4294967295
 8004076:	81a3      	strh	r3, [r4, #12]
 8004078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800407a:	4407      	add	r7, r0
 800407c:	1a36      	subs	r6, r6, r0
 800407e:	e7e9      	b.n	8004054 <__sflush_r+0xd0>
 8004080:	20400001 	.word	0x20400001

08004084 <_fflush_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	690b      	ldr	r3, [r1, #16]
 8004088:	4605      	mov	r5, r0
 800408a:	460c      	mov	r4, r1
 800408c:	b913      	cbnz	r3, 8004094 <_fflush_r+0x10>
 800408e:	2500      	movs	r5, #0
 8004090:	4628      	mov	r0, r5
 8004092:	bd38      	pop	{r3, r4, r5, pc}
 8004094:	b118      	cbz	r0, 800409e <_fflush_r+0x1a>
 8004096:	6a03      	ldr	r3, [r0, #32]
 8004098:	b90b      	cbnz	r3, 800409e <_fflush_r+0x1a>
 800409a:	f7ff f9b3 	bl	8003404 <__sinit>
 800409e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f3      	beq.n	800408e <_fflush_r+0xa>
 80040a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80040a8:	07d0      	lsls	r0, r2, #31
 80040aa:	d404      	bmi.n	80040b6 <_fflush_r+0x32>
 80040ac:	0599      	lsls	r1, r3, #22
 80040ae:	d402      	bmi.n	80040b6 <_fflush_r+0x32>
 80040b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040b2:	f7ff fb9e 	bl	80037f2 <__retarget_lock_acquire_recursive>
 80040b6:	4628      	mov	r0, r5
 80040b8:	4621      	mov	r1, r4
 80040ba:	f7ff ff63 	bl	8003f84 <__sflush_r>
 80040be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040c0:	4605      	mov	r5, r0
 80040c2:	07da      	lsls	r2, r3, #31
 80040c4:	d4e4      	bmi.n	8004090 <_fflush_r+0xc>
 80040c6:	89a3      	ldrh	r3, [r4, #12]
 80040c8:	059b      	lsls	r3, r3, #22
 80040ca:	d4e1      	bmi.n	8004090 <_fflush_r+0xc>
 80040cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040ce:	f7ff fb91 	bl	80037f4 <__retarget_lock_release_recursive>
 80040d2:	e7dd      	b.n	8004090 <_fflush_r+0xc>

080040d4 <__swhatbuf_r>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	460c      	mov	r4, r1
 80040d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040dc:	4615      	mov	r5, r2
 80040de:	2900      	cmp	r1, #0
 80040e0:	461e      	mov	r6, r3
 80040e2:	b096      	sub	sp, #88	@ 0x58
 80040e4:	da0c      	bge.n	8004100 <__swhatbuf_r+0x2c>
 80040e6:	89a3      	ldrh	r3, [r4, #12]
 80040e8:	2100      	movs	r1, #0
 80040ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80040ee:	bf14      	ite	ne
 80040f0:	2340      	movne	r3, #64	@ 0x40
 80040f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80040f6:	2000      	movs	r0, #0
 80040f8:	6031      	str	r1, [r6, #0]
 80040fa:	602b      	str	r3, [r5, #0]
 80040fc:	b016      	add	sp, #88	@ 0x58
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	466a      	mov	r2, sp
 8004102:	f000 f849 	bl	8004198 <_fstat_r>
 8004106:	2800      	cmp	r0, #0
 8004108:	dbed      	blt.n	80040e6 <__swhatbuf_r+0x12>
 800410a:	9901      	ldr	r1, [sp, #4]
 800410c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004110:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004114:	4259      	negs	r1, r3
 8004116:	4159      	adcs	r1, r3
 8004118:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800411c:	e7eb      	b.n	80040f6 <__swhatbuf_r+0x22>

0800411e <__smakebuf_r>:
 800411e:	898b      	ldrh	r3, [r1, #12]
 8004120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004122:	079d      	lsls	r5, r3, #30
 8004124:	4606      	mov	r6, r0
 8004126:	460c      	mov	r4, r1
 8004128:	d507      	bpl.n	800413a <__smakebuf_r+0x1c>
 800412a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800412e:	6023      	str	r3, [r4, #0]
 8004130:	6123      	str	r3, [r4, #16]
 8004132:	2301      	movs	r3, #1
 8004134:	6163      	str	r3, [r4, #20]
 8004136:	b003      	add	sp, #12
 8004138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800413a:	466a      	mov	r2, sp
 800413c:	ab01      	add	r3, sp, #4
 800413e:	f7ff ffc9 	bl	80040d4 <__swhatbuf_r>
 8004142:	9f00      	ldr	r7, [sp, #0]
 8004144:	4605      	mov	r5, r0
 8004146:	4639      	mov	r1, r7
 8004148:	4630      	mov	r0, r6
 800414a:	f7ff fbbf 	bl	80038cc <_malloc_r>
 800414e:	b948      	cbnz	r0, 8004164 <__smakebuf_r+0x46>
 8004150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004154:	059a      	lsls	r2, r3, #22
 8004156:	d4ee      	bmi.n	8004136 <__smakebuf_r+0x18>
 8004158:	f023 0303 	bic.w	r3, r3, #3
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	81a3      	strh	r3, [r4, #12]
 8004162:	e7e2      	b.n	800412a <__smakebuf_r+0xc>
 8004164:	89a3      	ldrh	r3, [r4, #12]
 8004166:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800416a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800416e:	81a3      	strh	r3, [r4, #12]
 8004170:	9b01      	ldr	r3, [sp, #4]
 8004172:	6020      	str	r0, [r4, #0]
 8004174:	b15b      	cbz	r3, 800418e <__smakebuf_r+0x70>
 8004176:	4630      	mov	r0, r6
 8004178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800417c:	f000 f81e 	bl	80041bc <_isatty_r>
 8004180:	b128      	cbz	r0, 800418e <__smakebuf_r+0x70>
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	f023 0303 	bic.w	r3, r3, #3
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	81a3      	strh	r3, [r4, #12]
 800418e:	89a3      	ldrh	r3, [r4, #12]
 8004190:	431d      	orrs	r5, r3
 8004192:	81a5      	strh	r5, [r4, #12]
 8004194:	e7cf      	b.n	8004136 <__smakebuf_r+0x18>
	...

08004198 <_fstat_r>:
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	2300      	movs	r3, #0
 800419c:	4d06      	ldr	r5, [pc, #24]	@ (80041b8 <_fstat_r+0x20>)
 800419e:	4604      	mov	r4, r0
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	602b      	str	r3, [r5, #0]
 80041a6:	f7fc fb25 	bl	80007f4 <_fstat>
 80041aa:	1c43      	adds	r3, r0, #1
 80041ac:	d102      	bne.n	80041b4 <_fstat_r+0x1c>
 80041ae:	682b      	ldr	r3, [r5, #0]
 80041b0:	b103      	cbz	r3, 80041b4 <_fstat_r+0x1c>
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	bd38      	pop	{r3, r4, r5, pc}
 80041b6:	bf00      	nop
 80041b8:	20000260 	.word	0x20000260

080041bc <_isatty_r>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	2300      	movs	r3, #0
 80041c0:	4d05      	ldr	r5, [pc, #20]	@ (80041d8 <_isatty_r+0x1c>)
 80041c2:	4604      	mov	r4, r0
 80041c4:	4608      	mov	r0, r1
 80041c6:	602b      	str	r3, [r5, #0]
 80041c8:	f7fc fb23 	bl	8000812 <_isatty>
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	d102      	bne.n	80041d6 <_isatty_r+0x1a>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	b103      	cbz	r3, 80041d6 <_isatty_r+0x1a>
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	20000260 	.word	0x20000260

080041dc <_sbrk_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	2300      	movs	r3, #0
 80041e0:	4d05      	ldr	r5, [pc, #20]	@ (80041f8 <_sbrk_r+0x1c>)
 80041e2:	4604      	mov	r4, r0
 80041e4:	4608      	mov	r0, r1
 80041e6:	602b      	str	r3, [r5, #0]
 80041e8:	f7fc fb2a 	bl	8000840 <_sbrk>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_sbrk_r+0x1a>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_sbrk_r+0x1a>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	20000260 	.word	0x20000260

080041fc <memchr>:
 80041fc:	4603      	mov	r3, r0
 80041fe:	b510      	push	{r4, lr}
 8004200:	b2c9      	uxtb	r1, r1
 8004202:	4402      	add	r2, r0
 8004204:	4293      	cmp	r3, r2
 8004206:	4618      	mov	r0, r3
 8004208:	d101      	bne.n	800420e <memchr+0x12>
 800420a:	2000      	movs	r0, #0
 800420c:	e003      	b.n	8004216 <memchr+0x1a>
 800420e:	7804      	ldrb	r4, [r0, #0]
 8004210:	3301      	adds	r3, #1
 8004212:	428c      	cmp	r4, r1
 8004214:	d1f6      	bne.n	8004204 <memchr+0x8>
 8004216:	bd10      	pop	{r4, pc}

08004218 <_init>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr

08004224 <_fini>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	bf00      	nop
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr
