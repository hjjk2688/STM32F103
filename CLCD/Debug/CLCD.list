
CLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080040b8  080040b8  000050b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a8  080041a8  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080041a8  080041a8  000051a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b0  080041b0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b0  080041b0  000051b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041b4  080041b4  000051b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080041b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000068  08004220  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08004220  00006394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2b0  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e00  00000000  00000000  00014341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00016148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c30  00000000  00000000  000170b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b0e  00000000  00000000  00017ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011069  00000000  00000000  000307ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e9c6  00000000  00000000  00041857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d021d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a74  00000000  00000000  000d0260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d4cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080040a0 	.word	0x080040a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080040a0 	.word	0x080040a0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	if (ch == '\n')
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b0a      	cmp	r3, #10
 8000168:	d106      	bne.n	8000178 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4907      	ldr	r1, [pc, #28]	@ (8000190 <__io_putchar+0x34>)
 8000172:	4808      	ldr	r0, [pc, #32]	@ (8000194 <__io_putchar+0x38>)
 8000174:	f002 fdc6 	bl	8002d04 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000178:	1d39      	adds	r1, r7, #4
 800017a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800017e:	2201      	movs	r2, #1
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__io_putchar+0x38>)
 8000182:	f002 fdbf 	bl	8002d04 <HAL_UART_Transmit>

	return ch;
 8000186:	687b      	ldr	r3, [r7, #4]
}
 8000188:	4618      	mov	r0, r3
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	080040b8 	.word	0x080040b8
 8000194:	20000120 	.word	0x20000120

08000198 <delay_us>:
	}

	printf("Scan complete.\r\n");
}

void delay_us(int us) {
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	value = 3;
 80001a0:	4b0d      	ldr	r3, [pc, #52]	@ (80001d8 <delay_us+0x40>)
 80001a2:	2203      	movs	r2, #3
 80001a4:	601a      	str	r2, [r3, #0]
	delay = us * value;
 80001a6:	4b0c      	ldr	r3, [pc, #48]	@ (80001d8 <delay_us+0x40>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	687a      	ldr	r2, [r7, #4]
 80001ac:	fb02 f303 	mul.w	r3, r2, r3
 80001b0:	4a0a      	ldr	r2, [pc, #40]	@ (80001dc <delay_us+0x44>)
 80001b2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < delay; i++)
 80001b4:	2300      	movs	r3, #0
 80001b6:	60fb      	str	r3, [r7, #12]
 80001b8:	e002      	b.n	80001c0 <delay_us+0x28>
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	3301      	adds	r3, #1
 80001be:	60fb      	str	r3, [r7, #12]
 80001c0:	4b06      	ldr	r3, [pc, #24]	@ (80001dc <delay_us+0x44>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	68fa      	ldr	r2, [r7, #12]
 80001c6:	429a      	cmp	r2, r3
 80001c8:	dbf7      	blt.n	80001ba <delay_us+0x22>
		;
}
 80001ca:	bf00      	nop
 80001cc:	bf00      	nop
 80001ce:	3714      	adds	r7, #20
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	20000168 	.word	0x20000168

080001e0 <LCD_DATA>:

void LCD_DATA(uint8_t data) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af02      	add	r7, sp, #8
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = (data & 0xF0) | RS1_EN1 | BackLight;
 80001ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ee:	f023 030f 	bic.w	r3, r3, #15
 80001f2:	b25b      	sxtb	r3, r3
 80001f4:	f043 030d 	orr.w	r3, r3, #13
 80001f8:	b25b      	sxtb	r3, r3
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	73fb      	strb	r3, [r7, #15]

	while (HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000) != HAL_OK)
 80001fe:	bf00      	nop
 8000200:	f107 020f 	add.w	r2, r7, #15
 8000204:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000208:	9300      	str	r3, [sp, #0]
 800020a:	2301      	movs	r3, #1
 800020c:	214e      	movs	r1, #78	@ 0x4e
 800020e:	482b      	ldr	r0, [pc, #172]	@ (80002bc <LCD_DATA+0xdc>)
 8000210:	f001 fafc 	bl	800180c <HAL_I2C_Master_Transmit>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d1f2      	bne.n	8000200 <LCD_DATA+0x20>
		;
	temp = (data & 0xF0) | RS1_EN0 | BackLight;
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	f023 030f 	bic.w	r3, r3, #15
 8000222:	b25b      	sxtb	r3, r3
 8000224:	f043 0309 	orr.w	r3, r3, #9
 8000228:	b25b      	sxtb	r3, r3
 800022a:	b2db      	uxtb	r3, r3
 800022c:	73fb      	strb	r3, [r7, #15]
	while (HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000) != HAL_OK)
 800022e:	bf00      	nop
 8000230:	f107 020f 	add.w	r2, r7, #15
 8000234:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2301      	movs	r3, #1
 800023c:	214e      	movs	r1, #78	@ 0x4e
 800023e:	481f      	ldr	r0, [pc, #124]	@ (80002bc <LCD_DATA+0xdc>)
 8000240:	f001 fae4 	bl	800180c <HAL_I2C_Master_Transmit>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d1f2      	bne.n	8000230 <LCD_DATA+0x50>
		;
	delay_us(4);
 800024a:	2004      	movs	r0, #4
 800024c:	f7ff ffa4 	bl	8000198 <delay_us>

	temp = ((data << 4) & 0xF0) | RS1_EN1 | BackLight;
 8000250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000254:	011b      	lsls	r3, r3, #4
 8000256:	b25b      	sxtb	r3, r3
 8000258:	f043 030d 	orr.w	r3, r3, #13
 800025c:	b25b      	sxtb	r3, r3
 800025e:	b2db      	uxtb	r3, r3
 8000260:	73fb      	strb	r3, [r7, #15]
	while (HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000) != HAL_OK)
 8000262:	bf00      	nop
 8000264:	f107 020f 	add.w	r2, r7, #15
 8000268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2301      	movs	r3, #1
 8000270:	214e      	movs	r1, #78	@ 0x4e
 8000272:	4812      	ldr	r0, [pc, #72]	@ (80002bc <LCD_DATA+0xdc>)
 8000274:	f001 faca 	bl	800180c <HAL_I2C_Master_Transmit>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d1f2      	bne.n	8000264 <LCD_DATA+0x84>
		;
	temp = ((data << 4) & 0xF0) | RS1_EN0 | BackLight;
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	011b      	lsls	r3, r3, #4
 8000284:	b25b      	sxtb	r3, r3
 8000286:	f043 0309 	orr.w	r3, r3, #9
 800028a:	b25b      	sxtb	r3, r3
 800028c:	b2db      	uxtb	r3, r3
 800028e:	73fb      	strb	r3, [r7, #15]
	while (HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000) != HAL_OK)
 8000290:	bf00      	nop
 8000292:	f107 020f 	add.w	r2, r7, #15
 8000296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2301      	movs	r3, #1
 800029e:	214e      	movs	r1, #78	@ 0x4e
 80002a0:	4806      	ldr	r0, [pc, #24]	@ (80002bc <LCD_DATA+0xdc>)
 80002a2:	f001 fab3 	bl	800180c <HAL_I2C_Master_Transmit>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d1f2      	bne.n	8000292 <LCD_DATA+0xb2>
		;
	delay_us(50);
 80002ac:	2032      	movs	r0, #50	@ 0x32
 80002ae:	f7ff ff73 	bl	8000198 <delay_us>
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000084 	.word	0x20000084

080002c0 <LCD_CMD>:

void LCD_CMD(uint8_t cmd) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af02      	add	r7, sp, #8
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = (cmd & 0xF0) | RS0_EN1 | BackLight;
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	f023 030f 	bic.w	r3, r3, #15
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	f043 030c 	orr.w	r3, r3, #12
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	73fb      	strb	r3, [r7, #15]
	while (HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000) != HAL_OK)
 80002de:	bf00      	nop
 80002e0:	f107 020f 	add.w	r2, r7, #15
 80002e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2301      	movs	r3, #1
 80002ec:	214e      	movs	r1, #78	@ 0x4e
 80002ee:	482b      	ldr	r0, [pc, #172]	@ (800039c <LCD_CMD+0xdc>)
 80002f0:	f001 fa8c 	bl	800180c <HAL_I2C_Master_Transmit>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d1f2      	bne.n	80002e0 <LCD_CMD+0x20>
		;
	temp = (cmd & 0xF0) | RS0_EN0 | BackLight;
 80002fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	b25b      	sxtb	r3, r3
 8000304:	f043 0308 	orr.w	r3, r3, #8
 8000308:	b25b      	sxtb	r3, r3
 800030a:	b2db      	uxtb	r3, r3
 800030c:	73fb      	strb	r3, [r7, #15]
	while (HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000) != HAL_OK)
 800030e:	bf00      	nop
 8000310:	f107 020f 	add.w	r2, r7, #15
 8000314:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000318:	9300      	str	r3, [sp, #0]
 800031a:	2301      	movs	r3, #1
 800031c:	214e      	movs	r1, #78	@ 0x4e
 800031e:	481f      	ldr	r0, [pc, #124]	@ (800039c <LCD_CMD+0xdc>)
 8000320:	f001 fa74 	bl	800180c <HAL_I2C_Master_Transmit>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d1f2      	bne.n	8000310 <LCD_CMD+0x50>
		;
	delay_us(4);
 800032a:	2004      	movs	r0, #4
 800032c:	f7ff ff34 	bl	8000198 <delay_us>

	temp = ((cmd << 4) & 0xF0) | RS0_EN1 | BackLight;
 8000330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000334:	011b      	lsls	r3, r3, #4
 8000336:	b25b      	sxtb	r3, r3
 8000338:	f043 030c 	orr.w	r3, r3, #12
 800033c:	b25b      	sxtb	r3, r3
 800033e:	b2db      	uxtb	r3, r3
 8000340:	73fb      	strb	r3, [r7, #15]
	while (HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000) != HAL_OK)
 8000342:	bf00      	nop
 8000344:	f107 020f 	add.w	r2, r7, #15
 8000348:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	2301      	movs	r3, #1
 8000350:	214e      	movs	r1, #78	@ 0x4e
 8000352:	4812      	ldr	r0, [pc, #72]	@ (800039c <LCD_CMD+0xdc>)
 8000354:	f001 fa5a 	bl	800180c <HAL_I2C_Master_Transmit>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1f2      	bne.n	8000344 <LCD_CMD+0x84>
		;
	temp = ((cmd << 4) & 0xF0) | RS0_EN0 | BackLight;
 800035e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000362:	011b      	lsls	r3, r3, #4
 8000364:	b25b      	sxtb	r3, r3
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	b25b      	sxtb	r3, r3
 800036c:	b2db      	uxtb	r3, r3
 800036e:	73fb      	strb	r3, [r7, #15]
	while (HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000) != HAL_OK)
 8000370:	bf00      	nop
 8000372:	f107 020f 	add.w	r2, r7, #15
 8000376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	2301      	movs	r3, #1
 800037e:	214e      	movs	r1, #78	@ 0x4e
 8000380:	4806      	ldr	r0, [pc, #24]	@ (800039c <LCD_CMD+0xdc>)
 8000382:	f001 fa43 	bl	800180c <HAL_I2C_Master_Transmit>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1f2      	bne.n	8000372 <LCD_CMD+0xb2>
		;
	delay_us(50);
 800038c:	2032      	movs	r0, #50	@ 0x32
 800038e:	f7ff ff03 	bl	8000198 <delay_us>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000084 	.word	0x20000084

080003a0 <LCD_CMD_4bit>:

void LCD_CMD_4bit(uint8_t cmd) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af02      	add	r7, sp, #8
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = ((cmd << 4) & 0xF0) | RS0_EN1 | BackLight;
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	011b      	lsls	r3, r3, #4
 80003b0:	b25b      	sxtb	r3, r3
 80003b2:	f043 030c 	orr.w	r3, r3, #12
 80003b6:	b25b      	sxtb	r3, r3
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	73fb      	strb	r3, [r7, #15]
	while (HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000) != HAL_OK)
 80003bc:	bf00      	nop
 80003be:	f107 020f 	add.w	r2, r7, #15
 80003c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2301      	movs	r3, #1
 80003ca:	214e      	movs	r1, #78	@ 0x4e
 80003cc:	4811      	ldr	r0, [pc, #68]	@ (8000414 <LCD_CMD_4bit+0x74>)
 80003ce:	f001 fa1d 	bl	800180c <HAL_I2C_Master_Transmit>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d1f2      	bne.n	80003be <LCD_CMD_4bit+0x1e>
		;
	temp = ((cmd << 4) & 0xF0) | RS0_EN0 | BackLight;
 80003d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003dc:	011b      	lsls	r3, r3, #4
 80003de:	b25b      	sxtb	r3, r3
 80003e0:	f043 0308 	orr.w	r3, r3, #8
 80003e4:	b25b      	sxtb	r3, r3
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	73fb      	strb	r3, [r7, #15]
	while (HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000) != HAL_OK)
 80003ea:	bf00      	nop
 80003ec:	f107 020f 	add.w	r2, r7, #15
 80003f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003f4:	9300      	str	r3, [sp, #0]
 80003f6:	2301      	movs	r3, #1
 80003f8:	214e      	movs	r1, #78	@ 0x4e
 80003fa:	4806      	ldr	r0, [pc, #24]	@ (8000414 <LCD_CMD_4bit+0x74>)
 80003fc:	f001 fa06 	bl	800180c <HAL_I2C_Master_Transmit>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d1f2      	bne.n	80003ec <LCD_CMD_4bit+0x4c>
		;
	delay_us(50);
 8000406:	2032      	movs	r0, #50	@ 0x32
 8000408:	f7ff fec6 	bl	8000198 <delay_us>
}
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000084 	.word	0x20000084

08000418 <LCD_INIT>:

void LCD_INIT(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

	delay_ms(100);
 800041c:	2064      	movs	r0, #100	@ 0x64
 800041e:	f000 fda9 	bl	8000f74 <HAL_Delay>

	LCD_CMD_4bit(0x03);
 8000422:	2003      	movs	r0, #3
 8000424:	f7ff ffbc 	bl	80003a0 <LCD_CMD_4bit>
	delay_ms(5);
 8000428:	2005      	movs	r0, #5
 800042a:	f000 fda3 	bl	8000f74 <HAL_Delay>
	LCD_CMD_4bit(0x03);
 800042e:	2003      	movs	r0, #3
 8000430:	f7ff ffb6 	bl	80003a0 <LCD_CMD_4bit>
	delay_us(100);
 8000434:	2064      	movs	r0, #100	@ 0x64
 8000436:	f7ff feaf 	bl	8000198 <delay_us>
	LCD_CMD_4bit(0x03);
 800043a:	2003      	movs	r0, #3
 800043c:	f7ff ffb0 	bl	80003a0 <LCD_CMD_4bit>
	delay_us(100);
 8000440:	2064      	movs	r0, #100	@ 0x64
 8000442:	f7ff fea9 	bl	8000198 <delay_us>
	LCD_CMD_4bit(0x02);
 8000446:	2002      	movs	r0, #2
 8000448:	f7ff ffaa 	bl	80003a0 <LCD_CMD_4bit>
	delay_us(100);
 800044c:	2064      	movs	r0, #100	@ 0x64
 800044e:	f7ff fea3 	bl	8000198 <delay_us>
	LCD_CMD(0x28);  // 4 bits, 2 line, 5x8 font
 8000452:	2028      	movs	r0, #40	@ 0x28
 8000454:	f7ff ff34 	bl	80002c0 <LCD_CMD>
	LCD_CMD(0x08);  // display off, cursor off, blink off
 8000458:	2008      	movs	r0, #8
 800045a:	f7ff ff31 	bl	80002c0 <LCD_CMD>
	LCD_CMD(0x01);  // clear display
 800045e:	2001      	movs	r0, #1
 8000460:	f7ff ff2e 	bl	80002c0 <LCD_CMD>
	delay_ms(3);
 8000464:	2003      	movs	r0, #3
 8000466:	f000 fd85 	bl	8000f74 <HAL_Delay>
	LCD_CMD(0x06);  // cursor movint direction
 800046a:	2006      	movs	r0, #6
 800046c:	f7ff ff28 	bl	80002c0 <LCD_CMD>
	LCD_CMD(0x0C);  // display on, cursor off, blink off
 8000470:	200c      	movs	r0, #12
 8000472:	f7ff ff25 	bl	80002c0 <LCD_CMD>
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}

0800047a <LCD_XY>:

void LCD_XY(char x, char y) {
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	4603      	mov	r3, r0
 8000482:	460a      	mov	r2, r1
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	4613      	mov	r3, r2
 8000488:	71bb      	strb	r3, [r7, #6]
	if (y == 0)
 800048a:	79bb      	ldrb	r3, [r7, #6]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d106      	bne.n	800049e <LCD_XY+0x24>
		LCD_CMD(0x80 + x);
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	3b80      	subs	r3, #128	@ 0x80
 8000494:	b2db      	uxtb	r3, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff12 	bl	80002c0 <LCD_CMD>
		LCD_CMD(0xC0 + x);
	else if (y == 2)
		LCD_CMD(0x94 + x);
	else if (y == 3)
		LCD_CMD(0xD4 + x);
}
 800049c:	e01c      	b.n	80004d8 <LCD_XY+0x5e>
	else if (y == 1)
 800049e:	79bb      	ldrb	r3, [r7, #6]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d106      	bne.n	80004b2 <LCD_XY+0x38>
		LCD_CMD(0xC0 + x);
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	3b40      	subs	r3, #64	@ 0x40
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ff08 	bl	80002c0 <LCD_CMD>
}
 80004b0:	e012      	b.n	80004d8 <LCD_XY+0x5e>
	else if (y == 2)
 80004b2:	79bb      	ldrb	r3, [r7, #6]
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d106      	bne.n	80004c6 <LCD_XY+0x4c>
		LCD_CMD(0x94 + x);
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	3b6c      	subs	r3, #108	@ 0x6c
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff fefe 	bl	80002c0 <LCD_CMD>
}
 80004c4:	e008      	b.n	80004d8 <LCD_XY+0x5e>
	else if (y == 3)
 80004c6:	79bb      	ldrb	r3, [r7, #6]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d105      	bne.n	80004d8 <LCD_XY+0x5e>
		LCD_CMD(0xD4 + x);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	3b2c      	subs	r3, #44	@ 0x2c
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff fef4 	bl	80002c0 <LCD_CMD>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <LCD_PUTS>:
void LCD_CLEAR(void) {
	LCD_CMD(0x01);
	delay_ms(2);
}

void LCD_PUTS(char *str) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	while (*str)
 80004e8:	e006      	b.n	80004f8 <LCD_PUTS+0x18>
		LCD_DATA(*str++);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	1c5a      	adds	r2, r3, #1
 80004ee:	607a      	str	r2, [r7, #4]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fe74 	bl	80001e0 <LCD_DATA>
	while (*str)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d1f4      	bne.n	80004ea <LCD_PUTS+0xa>

}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <DHT11_SetPinOutput>:

// DHT11 함수 구현
void DHT11_SetPinOutput(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000512:	463b      	mov	r3, r7
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT11_PIN;
 800051e:	2301      	movs	r3, #1
 8000520:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052a:	2303      	movs	r3, #3
 800052c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 800052e:	463b      	mov	r3, r7
 8000530:	4619      	mov	r1, r3
 8000532:	4803      	ldr	r0, [pc, #12]	@ (8000540 <DHT11_SetPinOutput+0x34>)
 8000534:	f000 fe50 	bl	80011d8 <HAL_GPIO_Init>
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40010800 	.word	0x40010800

08000544 <DHT11_SetPinInput>:

void DHT11_SetPinInput(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800054a:	463b      	mov	r3, r7
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT11_PIN;
 8000556:	2301      	movs	r3, #1
 8000558:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800055e:	2301      	movs	r3, #1
 8000560:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000562:	463b      	mov	r3, r7
 8000564:	4619      	mov	r1, r3
 8000566:	4803      	ldr	r0, [pc, #12]	@ (8000574 <DHT11_SetPinInput+0x30>)
 8000568:	f000 fe36 	bl	80011d8 <HAL_GPIO_Init>
}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40010800 	.word	0x40010800

08000578 <DHT11_SetPin>:

void DHT11_SetPin(GPIO_PinState state) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, state);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	461a      	mov	r2, r3
 8000586:	2101      	movs	r1, #1
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <DHT11_SetPin+0x20>)
 800058a:	f000 ffc0 	bl	800150e <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40010800 	.word	0x40010800

0800059c <DHT11_ReadPin>:

GPIO_PinState DHT11_ReadPin(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN);
 80005a0:	2101      	movs	r1, #1
 80005a2:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <DHT11_ReadPin+0x14>)
 80005a4:	f000 ff9c 	bl	80014e0 <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40010800 	.word	0x40010800

080005b4 <DHT11_DelayUs>:

void DHT11_DelayUs(uint32_t us) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <DHT11_DelayUs+0x2c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 80005c4:	bf00      	nop
 80005c6:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <DHT11_DelayUs+0x2c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d8f9      	bhi.n	80005c6 <DHT11_DelayUs+0x12>
		;
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000d8 	.word	0x200000d8

080005e4 <DHT11_Start>:

uint8_t DHT11_Start(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	uint8_t response = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	71fb      	strb	r3, [r7, #7]

	// 출력 모드로 설정
	DHT11_SetPinOutput();
 80005ee:	f7ff ff8d 	bl	800050c <DHT11_SetPinOutput>

	// 시작 신호 전송 (18ms LOW)
	DHT11_SetPin(GPIO_PIN_RESET);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff ffc0 	bl	8000578 <DHT11_SetPin>
	HAL_Delay(20);  // 18ms -> 20ms로 변경 (더 안정적)
 80005f8:	2014      	movs	r0, #20
 80005fa:	f000 fcbb 	bl	8000f74 <HAL_Delay>

	// HIGH로 변경 후 20-40us 대기
	DHT11_SetPin(GPIO_PIN_SET);
 80005fe:	2001      	movs	r0, #1
 8000600:	f7ff ffba 	bl	8000578 <DHT11_SetPin>
	DHT11_DelayUs(30);
 8000604:	201e      	movs	r0, #30
 8000606:	f7ff ffd5 	bl	80005b4 <DHT11_DelayUs>

	// 입력 모드로 변경
	DHT11_SetPinInput();
 800060a:	f7ff ff9b 	bl	8000544 <DHT11_SetPinInput>

	// DHT11 응답 확인 (80us LOW + 80us HIGH)
	DHT11_DelayUs(40);
 800060e:	2028      	movs	r0, #40	@ 0x28
 8000610:	f7ff ffd0 	bl	80005b4 <DHT11_DelayUs>

	if (!(DHT11_ReadPin())) {
 8000614:	f7ff ffc2 	bl	800059c <DHT11_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d10c      	bne.n	8000638 <DHT11_Start+0x54>
		DHT11_DelayUs(80);
 800061e:	2050      	movs	r0, #80	@ 0x50
 8000620:	f7ff ffc8 	bl	80005b4 <DHT11_DelayUs>
		if (DHT11_ReadPin()) {
 8000624:	f7ff ffba 	bl	800059c <DHT11_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d002      	beq.n	8000634 <DHT11_Start+0x50>
			response = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	71fb      	strb	r3, [r7, #7]
 8000632:	e001      	b.n	8000638 <DHT11_Start+0x54>
		} else {
			response = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	71fb      	strb	r3, [r7, #7]
		}
	}

	// HIGH가 끝날 때까지 대기
	while (DHT11_ReadPin())
 8000638:	bf00      	nop
 800063a:	f7ff ffaf 	bl	800059c <DHT11_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1fa      	bne.n	800063a <DHT11_Start+0x56>
		;

	return response;
 8000644:	79fb      	ldrb	r3, [r7, #7]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <DHT11_ReadBit>:

uint8_t DHT11_ReadBit(void) {
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
	// LOW 신호가 끝날 때까지 대기 (50us)
	while (!(DHT11_ReadPin()))
 8000652:	bf00      	nop
 8000654:	f7ff ffa2 	bl	800059c <DHT11_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0fa      	beq.n	8000654 <DHT11_ReadBit+0x6>
		;

	// HIGH 신호 시작 후 30us 대기
	DHT11_DelayUs(30);
 800065e:	201e      	movs	r0, #30
 8000660:	f7ff ffa8 	bl	80005b4 <DHT11_DelayUs>

	// 여전히 HIGH면 1, LOW면 0
	if (DHT11_ReadPin()) {
 8000664:	f7ff ff9a 	bl	800059c <DHT11_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d007      	beq.n	800067e <DHT11_ReadBit+0x30>
		// HIGH가 끝날 때까지 대기
		while (DHT11_ReadPin())
 800066e:	bf00      	nop
 8000670:	f7ff ff94 	bl	800059c <DHT11_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1fa      	bne.n	8000670 <DHT11_ReadBit+0x22>
			;
		return 1;
 800067a:	2301      	movs	r3, #1
 800067c:	e000      	b.n	8000680 <DHT11_ReadBit+0x32>
	} else {
		return 0;
 800067e:	2300      	movs	r3, #0
	}
}
 8000680:	4618      	mov	r0, r3
 8000682:	bd80      	pop	{r7, pc}

08000684 <DHT11_ReadByte>:

uint8_t DHT11_ReadByte(void) {
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
	uint8_t byte = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; i++) {
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	e00d      	b.n	80006b0 <DHT11_ReadByte+0x2c>
		byte = (byte << 1) | DHT11_ReadBit();
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	b25c      	sxtb	r4, r3
 800069c:	f7ff ffd7 	bl	800064e <DHT11_ReadBit>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	4323      	orrs	r3, r4
 80006a6:	b25b      	sxtb	r3, r3
 80006a8:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; i++) {
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	2b07      	cmp	r3, #7
 80006b4:	ddee      	ble.n	8000694 <DHT11_ReadByte+0x10>
	}
	return byte;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd90      	pop	{r4, r7, pc}

080006c0 <DHT11_ReadData>:

uint8_t DHT11_ReadData(DHT11_Data *data) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	if (!DHT11_Start()) {
 80006c8:	f7ff ff8c 	bl	80005e4 <DHT11_Start>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d101      	bne.n	80006d6 <DHT11_ReadData+0x16>
		return 0; // 시작 신호 실패
 80006d2:	2300      	movs	r3, #0
 80006d4:	e033      	b.n	800073e <DHT11_ReadData+0x7e>
	}

	// 5바이트 데이터 읽기
	data->humidity = DHT11_ReadByte();
 80006d6:	f7ff ffd5 	bl	8000684 <DHT11_ReadByte>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	705a      	strb	r2, [r3, #1]
	data->hum_decimal = DHT11_ReadByte();
 80006e2:	f7ff ffcf 	bl	8000684 <DHT11_ReadByte>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	70da      	strb	r2, [r3, #3]
	data->temperature = DHT11_ReadByte();
 80006ee:	f7ff ffc9 	bl	8000684 <DHT11_ReadByte>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	701a      	strb	r2, [r3, #0]
	data->temp_decimal = DHT11_ReadByte();
 80006fa:	f7ff ffc3 	bl	8000684 <DHT11_ReadByte>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	709a      	strb	r2, [r3, #2]
	data->checksum = DHT11_ReadByte();
 8000706:	f7ff ffbd 	bl	8000684 <DHT11_ReadByte>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	711a      	strb	r2, [r3, #4]

	// 체크섬 확인
	uint8_t calculated_checksum = data->humidity + data->hum_decimal
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	785a      	ldrb	r2, [r3, #1]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	78db      	ldrb	r3, [r3, #3]
 800071a:	4413      	add	r3, r2
 800071c:	b2da      	uxtb	r2, r3
			+ data->temperature + data->temp_decimal;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4413      	add	r3, r2
 8000724:	b2da      	uxtb	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	789b      	ldrb	r3, [r3, #2]
	uint8_t calculated_checksum = data->humidity + data->hum_decimal
 800072a:	4413      	add	r3, r2
 800072c:	73fb      	strb	r3, [r7, #15]

	if (calculated_checksum == data->checksum) {
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	7bfa      	ldrb	r2, [r7, #15]
 8000734:	429a      	cmp	r2, r3
 8000736:	d101      	bne.n	800073c <DHT11_ReadData+0x7c>
		return 1; // 성공
 8000738:	2301      	movs	r3, #1
 800073a:	e000      	b.n	800073e <DHT11_ReadData+0x7e>
	} else {
		return 0; // 체크섬 오류
 800073c:	2300      	movs	r3, #0
	}
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800074c:	f000 fbb0 	bl	8000eb0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000750:	f000 f878 	bl	8000844 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000754:	f000 f95c 	bl	8000a10 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000758:	f000 f930 	bl	80009bc <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800075c:	f000 f8b4 	bl	80008c8 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000760:	f000 f8e0 	bl	8000924 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	// I2C_ScanAddresses();
	HAL_TIM_Base_Start(&htim2);
 8000764:	482f      	ldr	r0, [pc, #188]	@ (8000824 <main+0xdc>)
 8000766:	f002 f809 	bl	800277c <HAL_TIM_Base_Start>

	// UART 초기화 메시지
	//sprintf(uart_buffer, "DHT11 Temperature & Humidity Sensor Test\r\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer, strlen(uart_buffer),
 800076a:	482f      	ldr	r0, [pc, #188]	@ (8000828 <main+0xe0>)
 800076c:	f7ff fcee 	bl	800014c <strlen>
 8000770:	4603      	mov	r3, r0
 8000772:	b29a      	uxth	r2, r3
 8000774:	f04f 33ff 	mov.w	r3, #4294967295
 8000778:	492b      	ldr	r1, [pc, #172]	@ (8000828 <main+0xe0>)
 800077a:	482c      	ldr	r0, [pc, #176]	@ (800082c <main+0xe4>)
 800077c:	f002 fac2 	bl	8002d04 <HAL_UART_Transmit>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {


		if (DHT11_ReadData(&dht11_data)) {
 8000780:	482b      	ldr	r0, [pc, #172]	@ (8000830 <main+0xe8>)
 8000782:	f7ff ff9d 	bl	80006c0 <DHT11_ReadData>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d037      	beq.n	80007fc <main+0xb4>
//	      sprintf(uart_buffer, "Temperature: %d\xC2\xB0C, Humidity: %d%%\r\n",
//	              dht11_data.temperature, dht11_data.humidity);
//	      sprintf(uart_buffer, "Temperature: %d ℃, Humidity: %d%%\r\n",
//	              dht11_data.temperature, dht11_data.humidity);

			sprintf(uart_buffer, "Temperature: %d ℃", dht11_data.temperature);
 800078c:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <main+0xe8>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4928      	ldr	r1, [pc, #160]	@ (8000834 <main+0xec>)
 8000794:	4824      	ldr	r0, [pc, #144]	@ (8000828 <main+0xe0>)
 8000796:	f002 fd53 	bl	8003240 <siprintf>
			sprintf(uart_buffer2, "Humidity: %d%%", dht11_data.humidity);
 800079a:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <main+0xe8>)
 800079c:	785b      	ldrb	r3, [r3, #1]
 800079e:	461a      	mov	r2, r3
 80007a0:	4925      	ldr	r1, [pc, #148]	@ (8000838 <main+0xf0>)
 80007a2:	4826      	ldr	r0, [pc, #152]	@ (800083c <main+0xf4>)
 80007a4:	f002 fd4c 	bl	8003240 <siprintf>
			printf("\n");
 80007a8:	200a      	movs	r0, #10
 80007aa:	f002 fd41 	bl	8003230 <putchar>

			LCD_INIT();
 80007ae:	f7ff fe33 	bl	8000418 <LCD_INIT>
			LCD_XY(0, 0);
 80007b2:	2100      	movs	r1, #0
 80007b4:	2000      	movs	r0, #0
 80007b6:	f7ff fe60 	bl	800047a <LCD_XY>
			LCD_PUTS((char*) uart_buffer);
 80007ba:	481b      	ldr	r0, [pc, #108]	@ (8000828 <main+0xe0>)
 80007bc:	f7ff fe90 	bl	80004e0 <LCD_PUTS>
			LCD_XY(0, 1);
 80007c0:	2101      	movs	r1, #1
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff fe59 	bl	800047a <LCD_XY>
			LCD_PUTS((char*) uart_buffer2);
 80007c8:	481c      	ldr	r0, [pc, #112]	@ (800083c <main+0xf4>)
 80007ca:	f7ff fe89 	bl	80004e0 <LCD_PUTS>

			HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80007ce:	4816      	ldr	r0, [pc, #88]	@ (8000828 <main+0xe0>)
 80007d0:	f7ff fcbc 	bl	800014c <strlen>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	4912      	ldr	r1, [pc, #72]	@ (8000828 <main+0xe0>)
 80007de:	4813      	ldr	r0, [pc, #76]	@ (800082c <main+0xe4>)
 80007e0:	f002 fa90 	bl	8002d04 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer2, strlen(uart_buffer), HAL_MAX_DELAY);
 80007e4:	4810      	ldr	r0, [pc, #64]	@ (8000828 <main+0xe0>)
 80007e6:	f7ff fcb1 	bl	800014c <strlen>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	4912      	ldr	r1, [pc, #72]	@ (800083c <main+0xf4>)
 80007f4:	480d      	ldr	r0, [pc, #52]	@ (800082c <main+0xe4>)
 80007f6:	f002 fa85 	bl	8002d04 <HAL_UART_Transmit>
 80007fa:	e00e      	b.n	800081a <main+0xd2>
		} else {
			// 데이터 읽기 실패
			sprintf(uart_buffer, "DHT11 Read Error!\r\n");
 80007fc:	4910      	ldr	r1, [pc, #64]	@ (8000840 <main+0xf8>)
 80007fe:	480a      	ldr	r0, [pc, #40]	@ (8000828 <main+0xe0>)
 8000800:	f002 fd1e 	bl	8003240 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer,
					strlen(uart_buffer), HAL_MAX_DELAY);
 8000804:	4808      	ldr	r0, [pc, #32]	@ (8000828 <main+0xe0>)
 8000806:	f7ff fca1 	bl	800014c <strlen>
 800080a:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer,
 800080c:	b29a      	uxth	r2, r3
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	4905      	ldr	r1, [pc, #20]	@ (8000828 <main+0xe0>)
 8000814:	4805      	ldr	r0, [pc, #20]	@ (800082c <main+0xe4>)
 8000816:	f002 fa75 	bl	8002d04 <HAL_UART_Transmit>
		}

		// 2초 대기 (DHT11은 최소 2초 간격으로 읽어야 함)
		HAL_Delay(2000);
 800081a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800081e:	f000 fba9 	bl	8000f74 <HAL_Delay>
		if (DHT11_ReadData(&dht11_data)) {
 8000822:	e7ad      	b.n	8000780 <main+0x38>
 8000824:	200000d8 	.word	0x200000d8
 8000828:	20000178 	.word	0x20000178
 800082c:	20000120 	.word	0x20000120
 8000830:	20000170 	.word	0x20000170
 8000834:	08004110 	.word	0x08004110
 8000838:	08004124 	.word	0x08004124
 800083c:	200001dc 	.word	0x200001dc
 8000840:	08004134 	.word	0x08004134

08000844 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b090      	sub	sp, #64	@ 0x40
 8000848:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800084a:	f107 0318 	add.w	r3, r7, #24
 800084e:	2228      	movs	r2, #40	@ 0x28
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fdee 	bl	8003434 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086a:	2301      	movs	r3, #1
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086e:	2310      	movs	r3, #16
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000876:	2300      	movs	r3, #0
 8000878:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800087a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000880:	f107 0318 	add.w	r3, r7, #24
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fb19 	bl	8001ebc <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x50>
		Error_Handler();
 8000890:	f000 f92c 	bl	8000aec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008a4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2102      	movs	r1, #2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fd86 	bl	80023c0 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x7a>
		Error_Handler();
 80008ba:	f000 f917 	bl	8000aec <Error_Handler>
	}
}
 80008be:	bf00      	nop
 80008c0:	3740      	adds	r7, #64	@ 0x40
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008ce:	4a13      	ldr	r2, [pc, #76]	@ (800091c <MX_I2C1_Init+0x54>)
 80008d0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008d4:	4a12      	ldr	r2, [pc, #72]	@ (8000920 <MX_I2C1_Init+0x58>)
 80008d6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ea:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_I2C1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_I2C1_Init+0x50>)
 8000906:	f000 fe3d 	bl	8001584 <HAL_I2C_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000910:	f000 f8ec 	bl	8000aec <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000084 	.word	0x20000084
 800091c:	40005400 	.word	0x40005400
 8000920:	000186a0 	.word	0x000186a0

08000924 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000940:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <MX_TIM2_Init+0x94>)
 8000942:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000946:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 64 - 1;
 8000948:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <MX_TIM2_Init+0x94>)
 800094a:	223f      	movs	r2, #63	@ 0x3f
 800094c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_TIM2_Init+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000954:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <MX_TIM2_Init+0x94>)
 8000956:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800095a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_TIM2_Init+0x94>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_TIM2_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000968:	4813      	ldr	r0, [pc, #76]	@ (80009b8 <MX_TIM2_Init+0x94>)
 800096a:	f001 feb7 	bl	80026dc <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000974:	f000 f8ba 	bl	8000aec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <MX_TIM2_Init+0x94>)
 8000986:	f001 ff43 	bl	8002810 <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000990:	f000 f8ac 	bl	8000aec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_TIM2_Init+0x94>)
 80009a2:	f002 f901 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80009ac:	f000 f89e 	bl	8000aec <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000d8 	.word	0x200000d8

080009bc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009c0:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	@ (8000a0c <MX_USART2_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009f4:	f002 f936 	bl	8002c64 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80009fe:	f000 f875 	bl	8000aec <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000120 	.word	0x20000120
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	4b2d      	ldr	r3, [pc, #180]	@ (8000adc <MX_GPIO_Init+0xcc>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a2c      	ldr	r2, [pc, #176]	@ (8000adc <MX_GPIO_Init+0xcc>)
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <MX_GPIO_Init+0xcc>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0310 	and.w	r3, r3, #16
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3c:	4b27      	ldr	r3, [pc, #156]	@ (8000adc <MX_GPIO_Init+0xcc>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a26      	ldr	r2, [pc, #152]	@ (8000adc <MX_GPIO_Init+0xcc>)
 8000a42:	f043 0320 	orr.w	r3, r3, #32
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <MX_GPIO_Init+0xcc>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0320 	and.w	r3, r3, #32
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <MX_GPIO_Init+0xcc>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a20      	ldr	r2, [pc, #128]	@ (8000adc <MX_GPIO_Init+0xcc>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <MX_GPIO_Init+0xcc>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_GPIO_Init+0xcc>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a1a      	ldr	r2, [pc, #104]	@ (8000adc <MX_GPIO_Init+0xcc>)
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_GPIO_Init+0xcc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2120      	movs	r1, #32
 8000a88:	4815      	ldr	r0, [pc, #84]	@ (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a8a:	f000 fd40 	bl	800150e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <MX_GPIO_Init+0xd4>)
 8000a96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4811      	ldr	r0, [pc, #68]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000aa4:	f000 fb98 	bl	80011d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4619      	mov	r1, r3
 8000abe:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <MX_GPIO_Init+0xd0>)
 8000ac0:	f000 fb8a 	bl	80011d8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2028      	movs	r0, #40	@ 0x28
 8000aca:	f000 fb4e 	bl	800116a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ace:	2028      	movs	r0, #40	@ 0x28
 8000ad0:	f000 fb67 	bl	80011a2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	10110000 	.word	0x10110000
 8000ae8:	40011000 	.word	0x40011000

08000aec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_MspInit+0x60>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <HAL_MspInit+0x60>)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010000 	.word	0x40010000

08000b5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a1d      	ldr	r2, [pc, #116]	@ (8000bec <HAL_I2C_MspInit+0x90>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d132      	bne.n	8000be2 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <HAL_I2C_MspInit+0x94>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf0 <HAL_I2C_MspInit+0x94>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_I2C_MspInit+0x94>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0308 	and.w	r3, r3, #8
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9a:	2312      	movs	r3, #18
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4812      	ldr	r0, [pc, #72]	@ (8000bf4 <HAL_I2C_MspInit+0x98>)
 8000baa:	f000 fb15 	bl	80011d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000bae:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <HAL_I2C_MspInit+0x9c>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf8 <HAL_I2C_MspInit+0x9c>)
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_I2C_MspInit+0x94>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <HAL_I2C_MspInit+0x94>)
 8000bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bd4:	61d3      	str	r3, [r2, #28]
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_I2C_MspInit+0x94>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	@ 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010c00 	.word	0x40010c00
 8000bf8:	40010000 	.word	0x40010000

08000bfc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c0c:	d10b      	bne.n	8000c26 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <HAL_TIM_Base_MspInit+0x34>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a07      	ldr	r2, [pc, #28]	@ (8000c30 <HAL_TIM_Base_MspInit+0x34>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <HAL_TIM_Base_MspInit+0x34>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ca4 <HAL_UART_MspInit+0x70>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d123      	bne.n	8000c9c <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <HAL_UART_MspInit+0x74>)
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <HAL_UART_MspInit+0x74>)
 8000c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c5e:	61d3      	str	r3, [r2, #28]
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <HAL_UART_MspInit+0x74>)
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <HAL_UART_MspInit+0x74>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <HAL_UART_MspInit+0x74>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <HAL_UART_MspInit+0x74>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c84:	230c      	movs	r3, #12
 8000c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4619      	mov	r1, r3
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <HAL_UART_MspInit+0x78>)
 8000c98:	f000 fa9e 	bl	80011d8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010800 	.word	0x40010800

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f91c 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d10:	f000 fc16 	bl	8001540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	e00a      	b.n	8000d40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d2a:	f3af 8000 	nop.w
 8000d2e:	4601      	mov	r1, r0
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	b2ca      	uxtb	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbf0      	blt.n	8000d2a <_read+0x12>
  }

  return len;
 8000d48:	687b      	ldr	r3, [r7, #4]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e009      	b.n	8000d78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	60ba      	str	r2, [r7, #8]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff f9f5 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf1      	blt.n	8000d64 <_write+0x12>
  }
  return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_close>:

int _close(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000db0:	605a      	str	r2, [r3, #4]
  return 0;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <_isatty>:

int _isatty(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b085      	sub	sp, #20
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
	...

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f002 fb58 	bl	80034d0 <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20005000 	.word	0x20005000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	20000240 	.word	0x20000240
 8000e54:	20000398 	.word	0x20000398

08000e58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e64:	f7ff fff8 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e68:	480b      	ldr	r0, [pc, #44]	@ (8000e98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e6a:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ea4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e80:	4c09      	ldr	r4, [pc, #36]	@ (8000ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f002 fb25 	bl	80034dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e92:	f7ff fc59 	bl	8000748 <main>
  bx lr
 8000e96:	4770      	bx	lr
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ea0:	080041b8 	.word	0x080041b8
  ldr r2, =_sbss
 8000ea4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ea8:	20000394 	.word	0x20000394

08000eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_2_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <HAL_Init+0x28>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	@ (8000ed8 <HAL_Init+0x28>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f947 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fe14 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40022000 	.word	0x40022000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f95f 	bl	80011be <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f927 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <HAL_IncTick+0x1c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <HAL_IncTick+0x20>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a03      	ldr	r2, [pc, #12]	@ (8000f5c <HAL_IncTick+0x20>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000244 	.word	0x20000244

08000f60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b02      	ldr	r3, [pc, #8]	@ (8000f70 <HAL_GetTick+0x10>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000244 	.word	0x20000244

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff fff0 	bl	8000f60 <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffe0 	bl	8000f60 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	@ (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4906      	ldr	r1, [pc, #24]	@ (8001054 <__NVIC_EnableIRQ+0x34>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	@ (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	@ (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	@ 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff90 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff2d 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff42 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff90 	bl	80010ac <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5f 	bl	8001058 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff35 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b08b      	sub	sp, #44	@ 0x2c
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	e169      	b.n	80014c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011ec:	2201      	movs	r2, #1
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 8158 	bne.w	80014ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4a9a      	ldr	r2, [pc, #616]	@ (8001478 <HAL_GPIO_Init+0x2a0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d05e      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001214:	4a98      	ldr	r2, [pc, #608]	@ (8001478 <HAL_GPIO_Init+0x2a0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d875      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800121a:	4a98      	ldr	r2, [pc, #608]	@ (800147c <HAL_GPIO_Init+0x2a4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d058      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001220:	4a96      	ldr	r2, [pc, #600]	@ (800147c <HAL_GPIO_Init+0x2a4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d86f      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001226:	4a96      	ldr	r2, [pc, #600]	@ (8001480 <HAL_GPIO_Init+0x2a8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d052      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 800122c:	4a94      	ldr	r2, [pc, #592]	@ (8001480 <HAL_GPIO_Init+0x2a8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d869      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001232:	4a94      	ldr	r2, [pc, #592]	@ (8001484 <HAL_GPIO_Init+0x2ac>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d04c      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001238:	4a92      	ldr	r2, [pc, #584]	@ (8001484 <HAL_GPIO_Init+0x2ac>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d863      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800123e:	4a92      	ldr	r2, [pc, #584]	@ (8001488 <HAL_GPIO_Init+0x2b0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d046      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001244:	4a90      	ldr	r2, [pc, #576]	@ (8001488 <HAL_GPIO_Init+0x2b0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d85d      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800124a:	2b12      	cmp	r3, #18
 800124c:	d82a      	bhi.n	80012a4 <HAL_GPIO_Init+0xcc>
 800124e:	2b12      	cmp	r3, #18
 8001250:	d859      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001252:	a201      	add	r2, pc, #4	@ (adr r2, 8001258 <HAL_GPIO_Init+0x80>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	080012d3 	.word	0x080012d3
 800125c:	080012ad 	.word	0x080012ad
 8001260:	080012bf 	.word	0x080012bf
 8001264:	08001301 	.word	0x08001301
 8001268:	08001307 	.word	0x08001307
 800126c:	08001307 	.word	0x08001307
 8001270:	08001307 	.word	0x08001307
 8001274:	08001307 	.word	0x08001307
 8001278:	08001307 	.word	0x08001307
 800127c:	08001307 	.word	0x08001307
 8001280:	08001307 	.word	0x08001307
 8001284:	08001307 	.word	0x08001307
 8001288:	08001307 	.word	0x08001307
 800128c:	08001307 	.word	0x08001307
 8001290:	08001307 	.word	0x08001307
 8001294:	08001307 	.word	0x08001307
 8001298:	08001307 	.word	0x08001307
 800129c:	080012b5 	.word	0x080012b5
 80012a0:	080012c9 	.word	0x080012c9
 80012a4:	4a79      	ldr	r2, [pc, #484]	@ (800148c <HAL_GPIO_Init+0x2b4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012aa:	e02c      	b.n	8001306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	623b      	str	r3, [r7, #32]
          break;
 80012b2:	e029      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	3304      	adds	r3, #4
 80012ba:	623b      	str	r3, [r7, #32]
          break;
 80012bc:	e024      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	3308      	adds	r3, #8
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e01f      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	330c      	adds	r3, #12
 80012ce:	623b      	str	r3, [r7, #32]
          break;
 80012d0:	e01a      	b.n	8001308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012da:	2304      	movs	r3, #4
 80012dc:	623b      	str	r3, [r7, #32]
          break;
 80012de:	e013      	b.n	8001308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e8:	2308      	movs	r3, #8
 80012ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	611a      	str	r2, [r3, #16]
          break;
 80012f2:	e009      	b.n	8001308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f4:	2308      	movs	r3, #8
 80012f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	615a      	str	r2, [r3, #20]
          break;
 80012fe:	e003      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x130>
          break;
 8001306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2bff      	cmp	r3, #255	@ 0xff
 800130c:	d801      	bhi.n	8001312 <HAL_GPIO_Init+0x13a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	e001      	b.n	8001316 <HAL_GPIO_Init+0x13e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3304      	adds	r3, #4
 8001316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2bff      	cmp	r3, #255	@ 0xff
 800131c:	d802      	bhi.n	8001324 <HAL_GPIO_Init+0x14c>
 800131e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	e002      	b.n	800132a <HAL_GPIO_Init+0x152>
 8001324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001326:	3b08      	subs	r3, #8
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	210f      	movs	r1, #15
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	401a      	ands	r2, r3
 800133c:	6a39      	ldr	r1, [r7, #32]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 80b1 	beq.w	80014ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001358:	4b4d      	ldr	r3, [pc, #308]	@ (8001490 <HAL_GPIO_Init+0x2b8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a4c      	ldr	r2, [pc, #304]	@ (8001490 <HAL_GPIO_Init+0x2b8>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b4a      	ldr	r3, [pc, #296]	@ (8001490 <HAL_GPIO_Init+0x2b8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001370:	4a48      	ldr	r2, [pc, #288]	@ (8001494 <HAL_GPIO_Init+0x2bc>)
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	220f      	movs	r2, #15
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a40      	ldr	r2, [pc, #256]	@ (8001498 <HAL_GPIO_Init+0x2c0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d013      	beq.n	80013c4 <HAL_GPIO_Init+0x1ec>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3f      	ldr	r2, [pc, #252]	@ (800149c <HAL_GPIO_Init+0x2c4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d00d      	beq.n	80013c0 <HAL_GPIO_Init+0x1e8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a3e      	ldr	r2, [pc, #248]	@ (80014a0 <HAL_GPIO_Init+0x2c8>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d007      	beq.n	80013bc <HAL_GPIO_Init+0x1e4>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3d      	ldr	r2, [pc, #244]	@ (80014a4 <HAL_GPIO_Init+0x2cc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d101      	bne.n	80013b8 <HAL_GPIO_Init+0x1e0>
 80013b4:	2303      	movs	r3, #3
 80013b6:	e006      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013b8:	2304      	movs	r3, #4
 80013ba:	e004      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013bc:	2302      	movs	r3, #2
 80013be:	e002      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013c4:	2300      	movs	r3, #0
 80013c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013c8:	f002 0203 	and.w	r2, r2, #3
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4093      	lsls	r3, r2
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d6:	492f      	ldr	r1, [pc, #188]	@ (8001494 <HAL_GPIO_Init+0x2bc>)
 80013d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013f0:	4b2d      	ldr	r3, [pc, #180]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	492c      	ldr	r1, [pc, #176]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013fe:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	4928      	ldr	r1, [pc, #160]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001408:	4013      	ands	r3, r2
 800140a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	4922      	ldr	r1, [pc, #136]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001426:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	491e      	ldr	r1, [pc, #120]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001430:	4013      	ands	r3, r2
 8001432:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4918      	ldr	r1, [pc, #96]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800144e:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	43db      	mvns	r3, r3
 8001456:	4914      	ldr	r1, [pc, #80]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001458:	4013      	ands	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d021      	beq.n	80014ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	490e      	ldr	r1, [pc, #56]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e021      	b.n	80014ba <HAL_GPIO_Init+0x2e2>
 8001476:	bf00      	nop
 8001478:	10320000 	.word	0x10320000
 800147c:	10310000 	.word	0x10310000
 8001480:	10220000 	.word	0x10220000
 8001484:	10210000 	.word	0x10210000
 8001488:	10120000 	.word	0x10120000
 800148c:	10110000 	.word	0x10110000
 8001490:	40021000 	.word	0x40021000
 8001494:	40010000 	.word	0x40010000
 8001498:	40010800 	.word	0x40010800
 800149c:	40010c00 	.word	0x40010c00
 80014a0:	40011000 	.word	0x40011000
 80014a4:	40011400 	.word	0x40011400
 80014a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_GPIO_Init+0x304>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4909      	ldr	r1, [pc, #36]	@ (80014dc <HAL_GPIO_Init+0x304>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	3301      	adds	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f47f ae8e 	bne.w	80011ec <HAL_GPIO_Init+0x14>
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	372c      	adds	r7, #44	@ 0x2c
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	887b      	ldrh	r3, [r7, #2]
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e001      	b.n	8001502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	807b      	strh	r3, [r7, #2]
 800151a:	4613      	mov	r3, r2
 800151c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151e:	787b      	ldrb	r3, [r7, #1]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001524:	887a      	ldrh	r2, [r7, #2]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800152a:	e003      	b.n	8001534 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	041a      	lsls	r2, r3, #16
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	611a      	str	r2, [r3, #16]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
	...

08001540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001556:	4a05      	ldr	r2, [pc, #20]	@ (800156c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f806 	bl	8001570 <HAL_GPIO_EXTI_Callback>
  }
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40010400 	.word	0x40010400

08001570 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e12b      	b.n	80017ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fad6 	bl	8000b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2224      	movs	r2, #36	@ 0x24
 80015b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015e8:	f001 f832 	bl	8002650 <HAL_RCC_GetPCLK1Freq>
 80015ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4a81      	ldr	r2, [pc, #516]	@ (80017f8 <HAL_I2C_Init+0x274>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d807      	bhi.n	8001608 <HAL_I2C_Init+0x84>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4a80      	ldr	r2, [pc, #512]	@ (80017fc <HAL_I2C_Init+0x278>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	bf94      	ite	ls
 8001600:	2301      	movls	r3, #1
 8001602:	2300      	movhi	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	e006      	b.n	8001616 <HAL_I2C_Init+0x92>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4a7d      	ldr	r2, [pc, #500]	@ (8001800 <HAL_I2C_Init+0x27c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	bf94      	ite	ls
 8001610:	2301      	movls	r3, #1
 8001612:	2300      	movhi	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0e7      	b.n	80017ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4a78      	ldr	r2, [pc, #480]	@ (8001804 <HAL_I2C_Init+0x280>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9b      	lsrs	r3, r3, #18
 8001628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4a6a      	ldr	r2, [pc, #424]	@ (80017f8 <HAL_I2C_Init+0x274>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d802      	bhi.n	8001658 <HAL_I2C_Init+0xd4>
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	3301      	adds	r3, #1
 8001656:	e009      	b.n	800166c <HAL_I2C_Init+0xe8>
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	4a69      	ldr	r2, [pc, #420]	@ (8001808 <HAL_I2C_Init+0x284>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	3301      	adds	r3, #1
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	430b      	orrs	r3, r1
 8001672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800167e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	495c      	ldr	r1, [pc, #368]	@ (80017f8 <HAL_I2C_Init+0x274>)
 8001688:	428b      	cmp	r3, r1
 800168a:	d819      	bhi.n	80016c0 <HAL_I2C_Init+0x13c>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1e59      	subs	r1, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fbb1 f3f3 	udiv	r3, r1, r3
 800169a:	1c59      	adds	r1, r3, #1
 800169c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016a0:	400b      	ands	r3, r1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00a      	beq.n	80016bc <HAL_I2C_Init+0x138>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1e59      	subs	r1, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ba:	e051      	b.n	8001760 <HAL_I2C_Init+0x1dc>
 80016bc:	2304      	movs	r3, #4
 80016be:	e04f      	b.n	8001760 <HAL_I2C_Init+0x1dc>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d111      	bne.n	80016ec <HAL_I2C_Init+0x168>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1e58      	subs	r0, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	440b      	add	r3, r1
 80016d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016da:	3301      	adds	r3, #1
 80016dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	e012      	b.n	8001712 <HAL_I2C_Init+0x18e>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1e58      	subs	r0, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	0099      	lsls	r1, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001702:	3301      	adds	r3, #1
 8001704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf0c      	ite	eq
 800170c:	2301      	moveq	r3, #1
 800170e:	2300      	movne	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Init+0x196>
 8001716:	2301      	movs	r3, #1
 8001718:	e022      	b.n	8001760 <HAL_I2C_Init+0x1dc>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10e      	bne.n	8001740 <HAL_I2C_Init+0x1bc>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1e58      	subs	r0, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6859      	ldr	r1, [r3, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	440b      	add	r3, r1
 8001730:	fbb0 f3f3 	udiv	r3, r0, r3
 8001734:	3301      	adds	r3, #1
 8001736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800173e:	e00f      	b.n	8001760 <HAL_I2C_Init+0x1dc>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e58      	subs	r0, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	0099      	lsls	r1, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	fbb0 f3f3 	udiv	r3, r0, r3
 8001756:	3301      	adds	r3, #1
 8001758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	6809      	ldr	r1, [r1, #0]
 8001764:	4313      	orrs	r3, r2
 8001766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69da      	ldr	r2, [r3, #28]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800178e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6911      	ldr	r1, [r2, #16]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68d2      	ldr	r2, [r2, #12]
 800179a:	4311      	orrs	r1, r2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2220      	movs	r2, #32
 80017da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	000186a0 	.word	0x000186a0
 80017fc:	001e847f 	.word	0x001e847f
 8001800:	003d08ff 	.word	0x003d08ff
 8001804:	431bde83 	.word	0x431bde83
 8001808:	10624dd3 	.word	0x10624dd3

0800180c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af02      	add	r7, sp, #8
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	461a      	mov	r2, r3
 8001818:	460b      	mov	r3, r1
 800181a:	817b      	strh	r3, [r7, #10]
 800181c:	4613      	mov	r3, r2
 800181e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff fb9e 	bl	8000f60 <HAL_GetTick>
 8001824:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b20      	cmp	r3, #32
 8001830:	f040 80e0 	bne.w	80019f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2319      	movs	r3, #25
 800183a:	2201      	movs	r2, #1
 800183c:	4970      	ldr	r1, [pc, #448]	@ (8001a00 <HAL_I2C_Master_Transmit+0x1f4>)
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f964 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800184a:	2302      	movs	r3, #2
 800184c:	e0d3      	b.n	80019f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_I2C_Master_Transmit+0x50>
 8001858:	2302      	movs	r3, #2
 800185a:	e0cc      	b.n	80019f6 <HAL_I2C_Master_Transmit+0x1ea>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b01      	cmp	r3, #1
 8001870:	d007      	beq.n	8001882 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001890:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2221      	movs	r2, #33	@ 0x21
 8001896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2210      	movs	r2, #16
 800189e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	893a      	ldrh	r2, [r7, #8]
 80018b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a50      	ldr	r2, [pc, #320]	@ (8001a04 <HAL_I2C_Master_Transmit+0x1f8>)
 80018c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018c4:	8979      	ldrh	r1, [r7, #10]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	6a3a      	ldr	r2, [r7, #32]
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 f89c 	bl	8001a08 <I2C_MasterRequestWrite>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e08d      	b.n	80019f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018f0:	e066      	b.n	80019c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	6a39      	ldr	r1, [r7, #32]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 fa22 	bl	8001d40 <I2C_WaitOnTXEFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00d      	beq.n	800191e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	2b04      	cmp	r3, #4
 8001908:	d107      	bne.n	800191a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001918:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e06b      	b.n	80019f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001938:	b29b      	uxth	r3, r3
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001946:	3b01      	subs	r3, #1
 8001948:	b29a      	uxth	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b04      	cmp	r3, #4
 800195a:	d11b      	bne.n	8001994 <HAL_I2C_Master_Transmit+0x188>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001960:	2b00      	cmp	r3, #0
 8001962:	d017      	beq.n	8001994 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197e:	b29b      	uxth	r3, r3
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800198c:	3b01      	subs	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	6a39      	ldr	r1, [r7, #32]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 fa19 	bl	8001dd0 <I2C_WaitOnBTFFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00d      	beq.n	80019c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d107      	bne.n	80019bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e01a      	b.n	80019f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d194      	bne.n	80018f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2220      	movs	r2, #32
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e000      	b.n	80019f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019f4:	2302      	movs	r3, #2
  }
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	00100002 	.word	0x00100002
 8001a04:	ffff0000 	.word	0xffff0000

08001a08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	460b      	mov	r3, r1
 8001a16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d006      	beq.n	8001a32 <I2C_MasterRequestWrite+0x2a>
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d003      	beq.n	8001a32 <I2C_MasterRequestWrite+0x2a>
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a30:	d108      	bne.n	8001a44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e00b      	b.n	8001a5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	2b12      	cmp	r3, #18
 8001a4a:	d107      	bne.n	8001a5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f84f 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00d      	beq.n	8001a90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a82:	d103      	bne.n	8001a8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e035      	b.n	8001afc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a98:	d108      	bne.n	8001aac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a9a:	897b      	ldrh	r3, [r7, #10]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001aa8:	611a      	str	r2, [r3, #16]
 8001aaa:	e01b      	b.n	8001ae4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001aac:	897b      	ldrh	r3, [r7, #10]
 8001aae:	11db      	asrs	r3, r3, #7
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f003 0306 	and.w	r3, r3, #6
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f063 030f 	orn	r3, r3, #15
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	490e      	ldr	r1, [pc, #56]	@ (8001b04 <I2C_MasterRequestWrite+0xfc>)
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 f898 	bl	8001c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e010      	b.n	8001afc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ada:	897b      	ldrh	r3, [r7, #10]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4907      	ldr	r1, [pc, #28]	@ (8001b08 <I2C_MasterRequestWrite+0x100>)
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 f888 	bl	8001c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	00010008 	.word	0x00010008
 8001b08:	00010002 	.word	0x00010002

08001b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b1c:	e048      	b.n	8001bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d044      	beq.n	8001bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b26:	f7ff fa1b 	bl	8000f60 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d302      	bcc.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d139      	bne.n	8001bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	0c1b      	lsrs	r3, r3, #16
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d10d      	bne.n	8001b62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4013      	ands	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	e00c      	b.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	43da      	mvns	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d116      	bne.n	8001bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f043 0220 	orr.w	r2, r3, #32
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e023      	b.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	0c1b      	lsrs	r3, r3, #16
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10d      	bne.n	8001bd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	e00c      	b.n	8001bf0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4013      	ands	r3, r2
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	461a      	mov	r2, r3
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d093      	beq.n	8001b1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c0e:	e071      	b.n	8001cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1e:	d123      	bne.n	8001c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	f043 0204 	orr.w	r2, r3, #4
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e067      	b.n	8001d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6e:	d041      	beq.n	8001cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c70:	f7ff f976 	bl	8000f60 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d302      	bcc.n	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d136      	bne.n	8001cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	0c1b      	lsrs	r3, r3, #16
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d10c      	bne.n	8001caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	bf14      	ite	ne
 8001ca2:	2301      	movne	r3, #1
 8001ca4:	2300      	moveq	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	e00b      	b.n	8001cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d016      	beq.n	8001cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	f043 0220 	orr.w	r2, r3, #32
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e021      	b.n	8001d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	0c1b      	lsrs	r3, r3, #16
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d10c      	bne.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	43da      	mvns	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf14      	ite	ne
 8001d10:	2301      	movne	r3, #1
 8001d12:	2300      	moveq	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e00b      	b.n	8001d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4013      	ands	r3, r2
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	bf14      	ite	ne
 8001d2a:	2301      	movne	r3, #1
 8001d2c:	2300      	moveq	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f47f af6d 	bne.w	8001c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d4c:	e034      	b.n	8001db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f886 	bl	8001e60 <I2C_IsAcknowledgeFailed>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e034      	b.n	8001dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d028      	beq.n	8001db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d66:	f7ff f8fb 	bl	8000f60 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d302      	bcc.n	8001d7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d11d      	bne.n	8001db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d86:	2b80      	cmp	r3, #128	@ 0x80
 8001d88:	d016      	beq.n	8001db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	f043 0220 	orr.w	r2, r3, #32
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e007      	b.n	8001dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc2:	2b80      	cmp	r3, #128	@ 0x80
 8001dc4:	d1c3      	bne.n	8001d4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ddc:	e034      	b.n	8001e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f83e 	bl	8001e60 <I2C_IsAcknowledgeFailed>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e034      	b.n	8001e58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d028      	beq.n	8001e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df6:	f7ff f8b3 	bl	8000f60 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d302      	bcc.n	8001e0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d11d      	bne.n	8001e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d016      	beq.n	8001e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	f043 0220 	orr.w	r2, r3, #32
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e007      	b.n	8001e58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d1c3      	bne.n	8001dde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e76:	d11b      	bne.n	8001eb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9c:	f043 0204 	orr.w	r2, r3, #4
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e272      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8087 	beq.w	8001fea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001edc:	4b92      	ldr	r3, [pc, #584]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d00c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee8:	4b8f      	ldr	r3, [pc, #572]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d112      	bne.n	8001f1a <HAL_RCC_OscConfig+0x5e>
 8001ef4:	4b8c      	ldr	r3, [pc, #560]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f00:	d10b      	bne.n	8001f1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f02:	4b89      	ldr	r3, [pc, #548]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d06c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x12c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d168      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e24c      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x76>
 8001f24:	4b80      	ldr	r3, [pc, #512]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a7f      	ldr	r2, [pc, #508]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e02e      	b.n	8001f90 <HAL_RCC_OscConfig+0xd4>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x98>
 8001f3a:	4b7b      	ldr	r3, [pc, #492]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a7a      	ldr	r2, [pc, #488]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b78      	ldr	r3, [pc, #480]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a77      	ldr	r2, [pc, #476]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e01d      	b.n	8001f90 <HAL_RCC_OscConfig+0xd4>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0xbc>
 8001f5e:	4b72      	ldr	r3, [pc, #456]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a71      	ldr	r2, [pc, #452]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0xd4>
 8001f78:	4b6b      	ldr	r3, [pc, #428]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b68      	ldr	r3, [pc, #416]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a67      	ldr	r2, [pc, #412]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d013      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7fe ffe2 	bl	8000f60 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7fe ffde 	bl	8000f60 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	@ 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e200      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xe4>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ffce 	bl	8000f60 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7fe ffca 	bl	8000f60 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	@ 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1ec      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	4b53      	ldr	r3, [pc, #332]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x10c>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d063      	beq.n	80020be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff6:	4b4c      	ldr	r3, [pc, #304]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002002:	4b49      	ldr	r3, [pc, #292]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b08      	cmp	r3, #8
 800200c:	d11c      	bne.n	8002048 <HAL_RCC_OscConfig+0x18c>
 800200e:	4b46      	ldr	r3, [pc, #280]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d116      	bne.n	8002048 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201a:	4b43      	ldr	r3, [pc, #268]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_RCC_OscConfig+0x176>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e1c0      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4b3d      	ldr	r3, [pc, #244]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4939      	ldr	r1, [pc, #228]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002046:	e03a      	b.n	80020be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d020      	beq.n	8002092 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002050:	4b36      	ldr	r3, [pc, #216]	@ (800212c <HAL_RCC_OscConfig+0x270>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7fe ff83 	bl	8000f60 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205e:	f7fe ff7f 	bl	8000f60 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1a1      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	4b2d      	ldr	r3, [pc, #180]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207c:	4b2a      	ldr	r3, [pc, #168]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4927      	ldr	r1, [pc, #156]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002092:	4b26      	ldr	r3, [pc, #152]	@ (800212c <HAL_RCC_OscConfig+0x270>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe ff62 	bl	8000f60 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a0:	f7fe ff5e 	bl	8000f60 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e180      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d03a      	beq.n	8002140 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d019      	beq.n	8002106 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d2:	4b17      	ldr	r3, [pc, #92]	@ (8002130 <HAL_RCC_OscConfig+0x274>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d8:	f7fe ff42 	bl	8000f60 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e0:	f7fe ff3e 	bl	8000f60 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e160      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020fe:	2001      	movs	r0, #1
 8002100:	f000 face 	bl	80026a0 <RCC_Delay>
 8002104:	e01c      	b.n	8002140 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <HAL_RCC_OscConfig+0x274>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210c:	f7fe ff28 	bl	8000f60 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002112:	e00f      	b.n	8002134 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002114:	f7fe ff24 	bl	8000f60 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d908      	bls.n	8002134 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e146      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	42420000 	.word	0x42420000
 8002130:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	4b92      	ldr	r3, [pc, #584]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1e9      	bne.n	8002114 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80a6 	beq.w	800229a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002152:	4b8b      	ldr	r3, [pc, #556]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b88      	ldr	r3, [pc, #544]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a87      	ldr	r2, [pc, #540]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002168:	61d3      	str	r3, [r2, #28]
 800216a:	4b85      	ldr	r3, [pc, #532]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4b82      	ldr	r3, [pc, #520]	@ (8002384 <HAL_RCC_OscConfig+0x4c8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002186:	4b7f      	ldr	r3, [pc, #508]	@ (8002384 <HAL_RCC_OscConfig+0x4c8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a7e      	ldr	r2, [pc, #504]	@ (8002384 <HAL_RCC_OscConfig+0x4c8>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002192:	f7fe fee5 	bl	8000f60 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7fe fee1 	bl	8000f60 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b64      	cmp	r3, #100	@ 0x64
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e103      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	4b75      	ldr	r3, [pc, #468]	@ (8002384 <HAL_RCC_OscConfig+0x4c8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x312>
 80021c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	e02d      	b.n	800222a <HAL_RCC_OscConfig+0x36e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x334>
 80021d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a69      	ldr	r2, [pc, #420]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	4b67      	ldr	r3, [pc, #412]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a66      	ldr	r2, [pc, #408]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	6213      	str	r3, [r2, #32]
 80021ee:	e01c      	b.n	800222a <HAL_RCC_OscConfig+0x36e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d10c      	bne.n	8002212 <HAL_RCC_OscConfig+0x356>
 80021f8:	4b61      	ldr	r3, [pc, #388]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a60      	ldr	r2, [pc, #384]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	4b5e      	ldr	r3, [pc, #376]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a5d      	ldr	r2, [pc, #372]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	e00b      	b.n	800222a <HAL_RCC_OscConfig+0x36e>
 8002212:	4b5b      	ldr	r3, [pc, #364]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a5a      	ldr	r2, [pc, #360]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6213      	str	r3, [r2, #32]
 800221e:	4b58      	ldr	r3, [pc, #352]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a57      	ldr	r2, [pc, #348]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d015      	beq.n	800225e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7fe fe95 	bl	8000f60 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fe91 	bl	8000f60 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0b1      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	4b4b      	ldr	r3, [pc, #300]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ee      	beq.n	800223a <HAL_RCC_OscConfig+0x37e>
 800225c:	e014      	b.n	8002288 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7fe fe7f 	bl	8000f60 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7fe fe7b 	bl	8000f60 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e09b      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	4b40      	ldr	r3, [pc, #256]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ee      	bne.n	8002266 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d105      	bne.n	800229a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228e:	4b3c      	ldr	r3, [pc, #240]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a3b      	ldr	r2, [pc, #236]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002298:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8087 	beq.w	80023b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a4:	4b36      	ldr	r3, [pc, #216]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d061      	beq.n	8002374 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d146      	bne.n	8002346 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b33      	ldr	r3, [pc, #204]	@ (8002388 <HAL_RCC_OscConfig+0x4cc>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe fe4f 	bl	8000f60 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c6:	f7fe fe4b 	bl	8000f60 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e06d      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f0      	bne.n	80022c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ec:	d108      	bne.n	8002300 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ee:	4b24      	ldr	r3, [pc, #144]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	4921      	ldr	r1, [pc, #132]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002300:	4b1f      	ldr	r3, [pc, #124]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a19      	ldr	r1, [r3, #32]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	430b      	orrs	r3, r1
 8002312:	491b      	ldr	r1, [pc, #108]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002318:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <HAL_RCC_OscConfig+0x4cc>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fe1f 	bl	8000f60 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002326:	f7fe fe1b 	bl	8000f60 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e03d      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002338:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x46a>
 8002344:	e035      	b.n	80023b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <HAL_RCC_OscConfig+0x4cc>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7fe fe08 	bl	8000f60 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7fe fe04 	bl	8000f60 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e026      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002366:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x498>
 8002372:	e01e      	b.n	80023b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e019      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
 8002380:	40021000 	.word	0x40021000
 8002384:	40007000 	.word	0x40007000
 8002388:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_RCC_OscConfig+0x500>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	429a      	cmp	r2, r3
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0d0      	b.n	8002576 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d910      	bls.n	8002404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b67      	ldr	r3, [pc, #412]	@ (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 0207 	bic.w	r2, r3, #7
 80023ea:	4965      	ldr	r1, [pc, #404]	@ (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b63      	ldr	r3, [pc, #396]	@ (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0b8      	b.n	8002576 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800241c:	4b59      	ldr	r3, [pc, #356]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4a58      	ldr	r2, [pc, #352]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002426:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002434:	4b53      	ldr	r3, [pc, #332]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a52      	ldr	r2, [pc, #328]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800243e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002440:	4b50      	ldr	r3, [pc, #320]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	494d      	ldr	r1, [pc, #308]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d040      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	4b47      	ldr	r3, [pc, #284]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d115      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e07f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247e:	4b41      	ldr	r3, [pc, #260]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e073      	b.n	8002576 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	4b3d      	ldr	r3, [pc, #244]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e06b      	b.n	8002576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249e:	4b39      	ldr	r3, [pc, #228]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f023 0203 	bic.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4936      	ldr	r1, [pc, #216]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b0:	f7fe fd56 	bl	8000f60 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b8:	f7fe fd52 	bl	8000f60 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e053      	b.n	8002576 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 020c 	and.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1eb      	bne.n	80024b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	4b27      	ldr	r3, [pc, #156]	@ (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d210      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b24      	ldr	r3, [pc, #144]	@ (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 0207 	bic.w	r2, r3, #7
 80024f6:	4922      	ldr	r1, [pc, #136]	@ (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e032      	b.n	8002576 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4916      	ldr	r1, [pc, #88]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800253a:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	490e      	ldr	r1, [pc, #56]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800254e:	f000 f821 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8002552:	4602      	mov	r2, r0
 8002554:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	490a      	ldr	r1, [pc, #40]	@ (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002560:	5ccb      	ldrb	r3, [r1, r3]
 8002562:	fa22 f303 	lsr.w	r3, r2, r3
 8002566:	4a09      	ldr	r2, [pc, #36]	@ (800258c <HAL_RCC_ClockConfig+0x1cc>)
 8002568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_RCC_ClockConfig+0x1d0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fcb4 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40022000 	.word	0x40022000
 8002584:	40021000 	.word	0x40021000
 8002588:	08004148 	.word	0x08004148
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x94>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d002      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x30>
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d003      	beq.n	80025ca <HAL_RCC_GetSysClockFreq+0x36>
 80025c2:	e027      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c4:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HAL_RCC_GetSysClockFreq+0x98>)
 80025c6:	613b      	str	r3, [r7, #16]
      break;
 80025c8:	e027      	b.n	800261a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	0c9b      	lsrs	r3, r3, #18
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	4a17      	ldr	r2, [pc, #92]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
 80025d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d010      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025e2:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x94>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	0c5b      	lsrs	r3, r3, #17
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	4a11      	ldr	r2, [pc, #68]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a0d      	ldr	r2, [pc, #52]	@ (800262c <HAL_RCC_GetSysClockFreq+0x98>)
 80025f6:	fb03 f202 	mul.w	r2, r3, r2
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e004      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a0c      	ldr	r2, [pc, #48]	@ (8002638 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	613b      	str	r3, [r7, #16]
      break;
 8002612:	e002      	b.n	800261a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002614:	4b05      	ldr	r3, [pc, #20]	@ (800262c <HAL_RCC_GetSysClockFreq+0x98>)
 8002616:	613b      	str	r3, [r7, #16]
      break;
 8002618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800261a:	693b      	ldr	r3, [r7, #16]
}
 800261c:	4618      	mov	r0, r3
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	007a1200 	.word	0x007a1200
 8002630:	08004160 	.word	0x08004160
 8002634:	08004170 	.word	0x08004170
 8002638:	003d0900 	.word	0x003d0900

0800263c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002640:	4b02      	ldr	r3, [pc, #8]	@ (800264c <HAL_RCC_GetHCLKFreq+0x10>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	20000000 	.word	0x20000000

08002650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002654:	f7ff fff2 	bl	800263c <HAL_RCC_GetHCLKFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	4903      	ldr	r1, [pc, #12]	@ (8002674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	08004158 	.word	0x08004158

08002678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800267c:	f7ff ffde 	bl	800263c <HAL_RCC_GetHCLKFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	0adb      	lsrs	r3, r3, #11
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	4903      	ldr	r1, [pc, #12]	@ (800269c <HAL_RCC_GetPCLK2Freq+0x24>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002694:	4618      	mov	r0, r3
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	08004158 	.word	0x08004158

080026a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026a8:	4b0a      	ldr	r3, [pc, #40]	@ (80026d4 <RCC_Delay+0x34>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0a      	ldr	r2, [pc, #40]	@ (80026d8 <RCC_Delay+0x38>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0a5b      	lsrs	r3, r3, #9
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026bc:	bf00      	nop
  }
  while (Delay --);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1e5a      	subs	r2, r3, #1
 80026c2:	60fa      	str	r2, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f9      	bne.n	80026bc <RCC_Delay+0x1c>
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	20000000 	.word	0x20000000
 80026d8:	10624dd3 	.word	0x10624dd3

080026dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e041      	b.n	8002772 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe fa7a 	bl	8000bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3304      	adds	r3, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4610      	mov	r0, r2
 800271c:	f000 f940 	bl	80029a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d001      	beq.n	8002794 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e032      	b.n	80027fa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a18      	ldr	r2, [pc, #96]	@ (8002804 <HAL_TIM_Base_Start+0x88>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00e      	beq.n	80027c4 <HAL_TIM_Base_Start+0x48>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ae:	d009      	beq.n	80027c4 <HAL_TIM_Base_Start+0x48>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a14      	ldr	r2, [pc, #80]	@ (8002808 <HAL_TIM_Base_Start+0x8c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_TIM_Base_Start+0x48>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a13      	ldr	r2, [pc, #76]	@ (800280c <HAL_TIM_Base_Start+0x90>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d111      	bne.n	80027e8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d010      	beq.n	80027f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e6:	e007      	b.n	80027f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	40012c00 	.word	0x40012c00
 8002808:	40000400 	.word	0x40000400
 800280c:	40000800 	.word	0x40000800

08002810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_TIM_ConfigClockSource+0x1c>
 8002828:	2302      	movs	r3, #2
 800282a:	e0b4      	b.n	8002996 <HAL_TIM_ConfigClockSource+0x186>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800284a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002864:	d03e      	beq.n	80028e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800286a:	f200 8087 	bhi.w	800297c <HAL_TIM_ConfigClockSource+0x16c>
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002872:	f000 8086 	beq.w	8002982 <HAL_TIM_ConfigClockSource+0x172>
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800287a:	d87f      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 800287c:	2b70      	cmp	r3, #112	@ 0x70
 800287e:	d01a      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002880:	2b70      	cmp	r3, #112	@ 0x70
 8002882:	d87b      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 8002884:	2b60      	cmp	r3, #96	@ 0x60
 8002886:	d050      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x11a>
 8002888:	2b60      	cmp	r3, #96	@ 0x60
 800288a:	d877      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 800288c:	2b50      	cmp	r3, #80	@ 0x50
 800288e:	d03c      	beq.n	800290a <HAL_TIM_ConfigClockSource+0xfa>
 8002890:	2b50      	cmp	r3, #80	@ 0x50
 8002892:	d873      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 8002894:	2b40      	cmp	r3, #64	@ 0x40
 8002896:	d058      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x13a>
 8002898:	2b40      	cmp	r3, #64	@ 0x40
 800289a:	d86f      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 800289c:	2b30      	cmp	r3, #48	@ 0x30
 800289e:	d064      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x15a>
 80028a0:	2b30      	cmp	r3, #48	@ 0x30
 80028a2:	d86b      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d060      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x15a>
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d867      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d05c      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x15a>
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d05a      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x15a>
 80028b4:	e062      	b.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028c6:	f000 f950 	bl	8002b6a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	609a      	str	r2, [r3, #8]
      break;
 80028e2:	e04f      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028f4:	f000 f939 	bl	8002b6a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002906:	609a      	str	r2, [r3, #8]
      break;
 8002908:	e03c      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002916:	461a      	mov	r2, r3
 8002918:	f000 f8b0 	bl	8002a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2150      	movs	r1, #80	@ 0x50
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f907 	bl	8002b36 <TIM_ITRx_SetConfig>
      break;
 8002928:	e02c      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002936:	461a      	mov	r2, r3
 8002938:	f000 f8ce 	bl	8002ad8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2160      	movs	r1, #96	@ 0x60
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f8f7 	bl	8002b36 <TIM_ITRx_SetConfig>
      break;
 8002948:	e01c      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002956:	461a      	mov	r2, r3
 8002958:	f000 f890 	bl	8002a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2140      	movs	r1, #64	@ 0x40
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f8e7 	bl	8002b36 <TIM_ITRx_SetConfig>
      break;
 8002968:	e00c      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4619      	mov	r1, r3
 8002974:	4610      	mov	r0, r2
 8002976:	f000 f8de 	bl	8002b36 <TIM_ITRx_SetConfig>
      break;
 800297a:	e003      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
      break;
 8002980:	e000      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a70 <TIM_Base_SetConfig+0xd0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00b      	beq.n	80029d0 <TIM_Base_SetConfig+0x30>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029be:	d007      	beq.n	80029d0 <TIM_Base_SetConfig+0x30>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a74 <TIM_Base_SetConfig+0xd4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d003      	beq.n	80029d0 <TIM_Base_SetConfig+0x30>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002a78 <TIM_Base_SetConfig+0xd8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d108      	bne.n	80029e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a22      	ldr	r2, [pc, #136]	@ (8002a70 <TIM_Base_SetConfig+0xd0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00b      	beq.n	8002a02 <TIM_Base_SetConfig+0x62>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f0:	d007      	beq.n	8002a02 <TIM_Base_SetConfig+0x62>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a74 <TIM_Base_SetConfig+0xd4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d003      	beq.n	8002a02 <TIM_Base_SetConfig+0x62>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a78 <TIM_Base_SetConfig+0xd8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d108      	bne.n	8002a14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002a70 <TIM_Base_SetConfig+0xd0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d103      	bne.n	8002a48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f023 0201 	bic.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]
  }
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800

08002a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	f023 0201 	bic.w	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f023 030a 	bic.w	r3, r3, #10
 8002ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	621a      	str	r2, [r3, #32]
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	f023 0210 	bic.w	r2, r3, #16
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	031b      	lsls	r3, r3, #12
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	621a      	str	r2, [r3, #32]
}
 8002b2c:	bf00      	nop
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f043 0307 	orr.w	r3, r3, #7
 8002b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	609a      	str	r2, [r3, #8]
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b087      	sub	sp, #28
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	021a      	lsls	r2, r3, #8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	609a      	str	r2, [r3, #8]
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e046      	b.n	8002c4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a16      	ldr	r2, [pc, #88]	@ (8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00e      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0c:	d009      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d004      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a10      	ldr	r2, [pc, #64]	@ (8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10c      	bne.n	8002c3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800

08002c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e042      	b.n	8002cfc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fd ffd2 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2224      	movs	r2, #36	@ 0x24
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f971 	bl	8002f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	@ 0x28
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d175      	bne.n	8002e10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_UART_Transmit+0x2c>
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e06e      	b.n	8002e12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2221      	movs	r2, #33	@ 0x21
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d42:	f7fe f90d 	bl	8000f60 <HAL_GetTick>
 8002d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5c:	d108      	bne.n	8002d70 <HAL_UART_Transmit+0x6c>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d104      	bne.n	8002d70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	e003      	b.n	8002d78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d78:	e02e      	b.n	8002dd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2180      	movs	r1, #128	@ 0x80
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f848 	bl	8002e1a <UART_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e03a      	b.n	8002e12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10b      	bne.n	8002dba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	3302      	adds	r3, #2
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	e007      	b.n	8002dca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1cb      	bne.n	8002d7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	2140      	movs	r1, #64	@ 0x40
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f814 	bl	8002e1a <UART_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e006      	b.n	8002e12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2a:	e03b      	b.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d037      	beq.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e34:	f7fe f894 	bl	8000f60 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	6a3a      	ldr	r2, [r7, #32]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d302      	bcc.n	8002e4a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e03a      	b.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d023      	beq.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b80      	cmp	r3, #128	@ 0x80
 8002e60:	d020      	beq.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b40      	cmp	r3, #64	@ 0x40
 8002e66:	d01d      	beq.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d116      	bne.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f81d 	bl	8002ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2208      	movs	r2, #8
 8002e96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e00f      	b.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d0b4      	beq.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b095      	sub	sp, #84	@ 0x54
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ede:	e853 3f00 	ldrex	r3, [r3]
 8002ee2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ef4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002efa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002efc:	e841 2300 	strex	r3, r2, [r1]
 8002f00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e5      	bne.n	8002ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3314      	adds	r3, #20
 8002f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	e853 3f00 	ldrex	r3, [r3]
 8002f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3314      	adds	r3, #20
 8002f26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f30:	e841 2300 	strex	r3, r2, [r1]
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e5      	bne.n	8002f08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d119      	bne.n	8002f78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f023 0310 	bic.w	r3, r3, #16
 8002f5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f64:	61ba      	str	r2, [r7, #24]
 8002f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f68:	6979      	ldr	r1, [r7, #20]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	e841 2300 	strex	r3, r2, [r1]
 8002f70:	613b      	str	r3, [r7, #16]
   return(result);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e5      	bne.n	8002f44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f86:	bf00      	nop
 8002f88:	3754      	adds	r7, #84	@ 0x54
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002fca:	f023 030c 	bic.w	r3, r3, #12
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a2c      	ldr	r2, [pc, #176]	@ (80030a4 <UART_SetConfig+0x114>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d103      	bne.n	8003000 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ff8:	f7ff fb3e 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	e002      	b.n	8003006 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003000:	f7ff fb26 	bl	8002650 <HAL_RCC_GetPCLK1Freq>
 8003004:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009a      	lsls	r2, r3, #2
 8003010:	441a      	add	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	4a22      	ldr	r2, [pc, #136]	@ (80030a8 <UART_SetConfig+0x118>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	0119      	lsls	r1, r3, #4
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	009a      	lsls	r2, r3, #2
 8003030:	441a      	add	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	fbb2 f2f3 	udiv	r2, r2, r3
 800303c:	4b1a      	ldr	r3, [pc, #104]	@ (80030a8 <UART_SetConfig+0x118>)
 800303e:	fba3 0302 	umull	r0, r3, r3, r2
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	2064      	movs	r0, #100	@ 0x64
 8003046:	fb00 f303 	mul.w	r3, r0, r3
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	3332      	adds	r3, #50	@ 0x32
 8003050:	4a15      	ldr	r2, [pc, #84]	@ (80030a8 <UART_SetConfig+0x118>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800305c:	4419      	add	r1, r3
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009a      	lsls	r2, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	fbb2 f2f3 	udiv	r2, r2, r3
 8003074:	4b0c      	ldr	r3, [pc, #48]	@ (80030a8 <UART_SetConfig+0x118>)
 8003076:	fba3 0302 	umull	r0, r3, r3, r2
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	2064      	movs	r0, #100	@ 0x64
 800307e:	fb00 f303 	mul.w	r3, r0, r3
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	3332      	adds	r3, #50	@ 0x32
 8003088:	4a07      	ldr	r2, [pc, #28]	@ (80030a8 <UART_SetConfig+0x118>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	f003 020f 	and.w	r2, r3, #15
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	440a      	add	r2, r1
 800309a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40013800 	.word	0x40013800
 80030a8:	51eb851f 	.word	0x51eb851f

080030ac <std>:
 80030ac:	2300      	movs	r3, #0
 80030ae:	b510      	push	{r4, lr}
 80030b0:	4604      	mov	r4, r0
 80030b2:	e9c0 3300 	strd	r3, r3, [r0]
 80030b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030ba:	6083      	str	r3, [r0, #8]
 80030bc:	8181      	strh	r1, [r0, #12]
 80030be:	6643      	str	r3, [r0, #100]	@ 0x64
 80030c0:	81c2      	strh	r2, [r0, #14]
 80030c2:	6183      	str	r3, [r0, #24]
 80030c4:	4619      	mov	r1, r3
 80030c6:	2208      	movs	r2, #8
 80030c8:	305c      	adds	r0, #92	@ 0x5c
 80030ca:	f000 f9b3 	bl	8003434 <memset>
 80030ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003104 <std+0x58>)
 80030d0:	6224      	str	r4, [r4, #32]
 80030d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80030d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003108 <std+0x5c>)
 80030d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030d8:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <std+0x60>)
 80030da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <std+0x64>)
 80030de:	6323      	str	r3, [r4, #48]	@ 0x30
 80030e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <std+0x68>)
 80030e2:	429c      	cmp	r4, r3
 80030e4:	d006      	beq.n	80030f4 <std+0x48>
 80030e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80030ea:	4294      	cmp	r4, r2
 80030ec:	d002      	beq.n	80030f4 <std+0x48>
 80030ee:	33d0      	adds	r3, #208	@ 0xd0
 80030f0:	429c      	cmp	r4, r3
 80030f2:	d105      	bne.n	8003100 <std+0x54>
 80030f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80030f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030fc:	f000 ba12 	b.w	8003524 <__retarget_lock_init_recursive>
 8003100:	bd10      	pop	{r4, pc}
 8003102:	bf00      	nop
 8003104:	08003285 	.word	0x08003285
 8003108:	080032a7 	.word	0x080032a7
 800310c:	080032df 	.word	0x080032df
 8003110:	08003303 	.word	0x08003303
 8003114:	20000248 	.word	0x20000248

08003118 <stdio_exit_handler>:
 8003118:	4a02      	ldr	r2, [pc, #8]	@ (8003124 <stdio_exit_handler+0xc>)
 800311a:	4903      	ldr	r1, [pc, #12]	@ (8003128 <stdio_exit_handler+0x10>)
 800311c:	4803      	ldr	r0, [pc, #12]	@ (800312c <stdio_exit_handler+0x14>)
 800311e:	f000 b869 	b.w	80031f4 <_fwalk_sglue>
 8003122:	bf00      	nop
 8003124:	2000000c 	.word	0x2000000c
 8003128:	08003de9 	.word	0x08003de9
 800312c:	2000001c 	.word	0x2000001c

08003130 <cleanup_stdio>:
 8003130:	6841      	ldr	r1, [r0, #4]
 8003132:	4b0c      	ldr	r3, [pc, #48]	@ (8003164 <cleanup_stdio+0x34>)
 8003134:	b510      	push	{r4, lr}
 8003136:	4299      	cmp	r1, r3
 8003138:	4604      	mov	r4, r0
 800313a:	d001      	beq.n	8003140 <cleanup_stdio+0x10>
 800313c:	f000 fe54 	bl	8003de8 <_fflush_r>
 8003140:	68a1      	ldr	r1, [r4, #8]
 8003142:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <cleanup_stdio+0x38>)
 8003144:	4299      	cmp	r1, r3
 8003146:	d002      	beq.n	800314e <cleanup_stdio+0x1e>
 8003148:	4620      	mov	r0, r4
 800314a:	f000 fe4d 	bl	8003de8 <_fflush_r>
 800314e:	68e1      	ldr	r1, [r4, #12]
 8003150:	4b06      	ldr	r3, [pc, #24]	@ (800316c <cleanup_stdio+0x3c>)
 8003152:	4299      	cmp	r1, r3
 8003154:	d004      	beq.n	8003160 <cleanup_stdio+0x30>
 8003156:	4620      	mov	r0, r4
 8003158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800315c:	f000 be44 	b.w	8003de8 <_fflush_r>
 8003160:	bd10      	pop	{r4, pc}
 8003162:	bf00      	nop
 8003164:	20000248 	.word	0x20000248
 8003168:	200002b0 	.word	0x200002b0
 800316c:	20000318 	.word	0x20000318

08003170 <global_stdio_init.part.0>:
 8003170:	b510      	push	{r4, lr}
 8003172:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <global_stdio_init.part.0+0x30>)
 8003174:	4c0b      	ldr	r4, [pc, #44]	@ (80031a4 <global_stdio_init.part.0+0x34>)
 8003176:	4a0c      	ldr	r2, [pc, #48]	@ (80031a8 <global_stdio_init.part.0+0x38>)
 8003178:	4620      	mov	r0, r4
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	2104      	movs	r1, #4
 800317e:	2200      	movs	r2, #0
 8003180:	f7ff ff94 	bl	80030ac <std>
 8003184:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003188:	2201      	movs	r2, #1
 800318a:	2109      	movs	r1, #9
 800318c:	f7ff ff8e 	bl	80030ac <std>
 8003190:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003194:	2202      	movs	r2, #2
 8003196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800319a:	2112      	movs	r1, #18
 800319c:	f7ff bf86 	b.w	80030ac <std>
 80031a0:	20000380 	.word	0x20000380
 80031a4:	20000248 	.word	0x20000248
 80031a8:	08003119 	.word	0x08003119

080031ac <__sfp_lock_acquire>:
 80031ac:	4801      	ldr	r0, [pc, #4]	@ (80031b4 <__sfp_lock_acquire+0x8>)
 80031ae:	f000 b9ba 	b.w	8003526 <__retarget_lock_acquire_recursive>
 80031b2:	bf00      	nop
 80031b4:	20000389 	.word	0x20000389

080031b8 <__sfp_lock_release>:
 80031b8:	4801      	ldr	r0, [pc, #4]	@ (80031c0 <__sfp_lock_release+0x8>)
 80031ba:	f000 b9b5 	b.w	8003528 <__retarget_lock_release_recursive>
 80031be:	bf00      	nop
 80031c0:	20000389 	.word	0x20000389

080031c4 <__sinit>:
 80031c4:	b510      	push	{r4, lr}
 80031c6:	4604      	mov	r4, r0
 80031c8:	f7ff fff0 	bl	80031ac <__sfp_lock_acquire>
 80031cc:	6a23      	ldr	r3, [r4, #32]
 80031ce:	b11b      	cbz	r3, 80031d8 <__sinit+0x14>
 80031d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031d4:	f7ff bff0 	b.w	80031b8 <__sfp_lock_release>
 80031d8:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <__sinit+0x28>)
 80031da:	6223      	str	r3, [r4, #32]
 80031dc:	4b04      	ldr	r3, [pc, #16]	@ (80031f0 <__sinit+0x2c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f5      	bne.n	80031d0 <__sinit+0xc>
 80031e4:	f7ff ffc4 	bl	8003170 <global_stdio_init.part.0>
 80031e8:	e7f2      	b.n	80031d0 <__sinit+0xc>
 80031ea:	bf00      	nop
 80031ec:	08003131 	.word	0x08003131
 80031f0:	20000380 	.word	0x20000380

080031f4 <_fwalk_sglue>:
 80031f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031f8:	4607      	mov	r7, r0
 80031fa:	4688      	mov	r8, r1
 80031fc:	4614      	mov	r4, r2
 80031fe:	2600      	movs	r6, #0
 8003200:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003204:	f1b9 0901 	subs.w	r9, r9, #1
 8003208:	d505      	bpl.n	8003216 <_fwalk_sglue+0x22>
 800320a:	6824      	ldr	r4, [r4, #0]
 800320c:	2c00      	cmp	r4, #0
 800320e:	d1f7      	bne.n	8003200 <_fwalk_sglue+0xc>
 8003210:	4630      	mov	r0, r6
 8003212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003216:	89ab      	ldrh	r3, [r5, #12]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d907      	bls.n	800322c <_fwalk_sglue+0x38>
 800321c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003220:	3301      	adds	r3, #1
 8003222:	d003      	beq.n	800322c <_fwalk_sglue+0x38>
 8003224:	4629      	mov	r1, r5
 8003226:	4638      	mov	r0, r7
 8003228:	47c0      	blx	r8
 800322a:	4306      	orrs	r6, r0
 800322c:	3568      	adds	r5, #104	@ 0x68
 800322e:	e7e9      	b.n	8003204 <_fwalk_sglue+0x10>

08003230 <putchar>:
 8003230:	4b02      	ldr	r3, [pc, #8]	@ (800323c <putchar+0xc>)
 8003232:	4601      	mov	r1, r0
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	6882      	ldr	r2, [r0, #8]
 8003238:	f000 be5f 	b.w	8003efa <_putc_r>
 800323c:	20000018 	.word	0x20000018

08003240 <siprintf>:
 8003240:	b40e      	push	{r1, r2, r3}
 8003242:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003246:	b510      	push	{r4, lr}
 8003248:	2400      	movs	r4, #0
 800324a:	b09d      	sub	sp, #116	@ 0x74
 800324c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800324e:	9002      	str	r0, [sp, #8]
 8003250:	9006      	str	r0, [sp, #24]
 8003252:	9107      	str	r1, [sp, #28]
 8003254:	9104      	str	r1, [sp, #16]
 8003256:	4809      	ldr	r0, [pc, #36]	@ (800327c <siprintf+0x3c>)
 8003258:	4909      	ldr	r1, [pc, #36]	@ (8003280 <siprintf+0x40>)
 800325a:	f853 2b04 	ldr.w	r2, [r3], #4
 800325e:	9105      	str	r1, [sp, #20]
 8003260:	6800      	ldr	r0, [r0, #0]
 8003262:	a902      	add	r1, sp, #8
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003268:	f000 fab2 	bl	80037d0 <_svfiprintf_r>
 800326c:	9b02      	ldr	r3, [sp, #8]
 800326e:	701c      	strb	r4, [r3, #0]
 8003270:	b01d      	add	sp, #116	@ 0x74
 8003272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003276:	b003      	add	sp, #12
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000018 	.word	0x20000018
 8003280:	ffff0208 	.word	0xffff0208

08003284 <__sread>:
 8003284:	b510      	push	{r4, lr}
 8003286:	460c      	mov	r4, r1
 8003288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800328c:	f000 f8fc 	bl	8003488 <_read_r>
 8003290:	2800      	cmp	r0, #0
 8003292:	bfab      	itete	ge
 8003294:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003296:	89a3      	ldrhlt	r3, [r4, #12]
 8003298:	181b      	addge	r3, r3, r0
 800329a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800329e:	bfac      	ite	ge
 80032a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80032a2:	81a3      	strhlt	r3, [r4, #12]
 80032a4:	bd10      	pop	{r4, pc}

080032a6 <__swrite>:
 80032a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032aa:	461f      	mov	r7, r3
 80032ac:	898b      	ldrh	r3, [r1, #12]
 80032ae:	4605      	mov	r5, r0
 80032b0:	05db      	lsls	r3, r3, #23
 80032b2:	460c      	mov	r4, r1
 80032b4:	4616      	mov	r6, r2
 80032b6:	d505      	bpl.n	80032c4 <__swrite+0x1e>
 80032b8:	2302      	movs	r3, #2
 80032ba:	2200      	movs	r2, #0
 80032bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c0:	f000 f8d0 	bl	8003464 <_lseek_r>
 80032c4:	89a3      	ldrh	r3, [r4, #12]
 80032c6:	4632      	mov	r2, r6
 80032c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032cc:	81a3      	strh	r3, [r4, #12]
 80032ce:	4628      	mov	r0, r5
 80032d0:	463b      	mov	r3, r7
 80032d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032da:	f000 b8e7 	b.w	80034ac <_write_r>

080032de <__sseek>:
 80032de:	b510      	push	{r4, lr}
 80032e0:	460c      	mov	r4, r1
 80032e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032e6:	f000 f8bd 	bl	8003464 <_lseek_r>
 80032ea:	1c43      	adds	r3, r0, #1
 80032ec:	89a3      	ldrh	r3, [r4, #12]
 80032ee:	bf15      	itete	ne
 80032f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80032f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80032fa:	81a3      	strheq	r3, [r4, #12]
 80032fc:	bf18      	it	ne
 80032fe:	81a3      	strhne	r3, [r4, #12]
 8003300:	bd10      	pop	{r4, pc}

08003302 <__sclose>:
 8003302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003306:	f000 b89d 	b.w	8003444 <_close_r>

0800330a <__swbuf_r>:
 800330a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330c:	460e      	mov	r6, r1
 800330e:	4614      	mov	r4, r2
 8003310:	4605      	mov	r5, r0
 8003312:	b118      	cbz	r0, 800331c <__swbuf_r+0x12>
 8003314:	6a03      	ldr	r3, [r0, #32]
 8003316:	b90b      	cbnz	r3, 800331c <__swbuf_r+0x12>
 8003318:	f7ff ff54 	bl	80031c4 <__sinit>
 800331c:	69a3      	ldr	r3, [r4, #24]
 800331e:	60a3      	str	r3, [r4, #8]
 8003320:	89a3      	ldrh	r3, [r4, #12]
 8003322:	071a      	lsls	r2, r3, #28
 8003324:	d501      	bpl.n	800332a <__swbuf_r+0x20>
 8003326:	6923      	ldr	r3, [r4, #16]
 8003328:	b943      	cbnz	r3, 800333c <__swbuf_r+0x32>
 800332a:	4621      	mov	r1, r4
 800332c:	4628      	mov	r0, r5
 800332e:	f000 f82b 	bl	8003388 <__swsetup_r>
 8003332:	b118      	cbz	r0, 800333c <__swbuf_r+0x32>
 8003334:	f04f 37ff 	mov.w	r7, #4294967295
 8003338:	4638      	mov	r0, r7
 800333a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	6922      	ldr	r2, [r4, #16]
 8003340:	b2f6      	uxtb	r6, r6
 8003342:	1a98      	subs	r0, r3, r2
 8003344:	6963      	ldr	r3, [r4, #20]
 8003346:	4637      	mov	r7, r6
 8003348:	4283      	cmp	r3, r0
 800334a:	dc05      	bgt.n	8003358 <__swbuf_r+0x4e>
 800334c:	4621      	mov	r1, r4
 800334e:	4628      	mov	r0, r5
 8003350:	f000 fd4a 	bl	8003de8 <_fflush_r>
 8003354:	2800      	cmp	r0, #0
 8003356:	d1ed      	bne.n	8003334 <__swbuf_r+0x2a>
 8003358:	68a3      	ldr	r3, [r4, #8]
 800335a:	3b01      	subs	r3, #1
 800335c:	60a3      	str	r3, [r4, #8]
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	6022      	str	r2, [r4, #0]
 8003364:	701e      	strb	r6, [r3, #0]
 8003366:	6962      	ldr	r2, [r4, #20]
 8003368:	1c43      	adds	r3, r0, #1
 800336a:	429a      	cmp	r2, r3
 800336c:	d004      	beq.n	8003378 <__swbuf_r+0x6e>
 800336e:	89a3      	ldrh	r3, [r4, #12]
 8003370:	07db      	lsls	r3, r3, #31
 8003372:	d5e1      	bpl.n	8003338 <__swbuf_r+0x2e>
 8003374:	2e0a      	cmp	r6, #10
 8003376:	d1df      	bne.n	8003338 <__swbuf_r+0x2e>
 8003378:	4621      	mov	r1, r4
 800337a:	4628      	mov	r0, r5
 800337c:	f000 fd34 	bl	8003de8 <_fflush_r>
 8003380:	2800      	cmp	r0, #0
 8003382:	d0d9      	beq.n	8003338 <__swbuf_r+0x2e>
 8003384:	e7d6      	b.n	8003334 <__swbuf_r+0x2a>
	...

08003388 <__swsetup_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4b29      	ldr	r3, [pc, #164]	@ (8003430 <__swsetup_r+0xa8>)
 800338c:	4605      	mov	r5, r0
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	460c      	mov	r4, r1
 8003392:	b118      	cbz	r0, 800339c <__swsetup_r+0x14>
 8003394:	6a03      	ldr	r3, [r0, #32]
 8003396:	b90b      	cbnz	r3, 800339c <__swsetup_r+0x14>
 8003398:	f7ff ff14 	bl	80031c4 <__sinit>
 800339c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033a0:	0719      	lsls	r1, r3, #28
 80033a2:	d422      	bmi.n	80033ea <__swsetup_r+0x62>
 80033a4:	06da      	lsls	r2, r3, #27
 80033a6:	d407      	bmi.n	80033b8 <__swsetup_r+0x30>
 80033a8:	2209      	movs	r2, #9
 80033aa:	602a      	str	r2, [r5, #0]
 80033ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033b0:	f04f 30ff 	mov.w	r0, #4294967295
 80033b4:	81a3      	strh	r3, [r4, #12]
 80033b6:	e033      	b.n	8003420 <__swsetup_r+0x98>
 80033b8:	0758      	lsls	r0, r3, #29
 80033ba:	d512      	bpl.n	80033e2 <__swsetup_r+0x5a>
 80033bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033be:	b141      	cbz	r1, 80033d2 <__swsetup_r+0x4a>
 80033c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80033c4:	4299      	cmp	r1, r3
 80033c6:	d002      	beq.n	80033ce <__swsetup_r+0x46>
 80033c8:	4628      	mov	r0, r5
 80033ca:	f000 f8af 	bl	800352c <_free_r>
 80033ce:	2300      	movs	r3, #0
 80033d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80033d8:	81a3      	strh	r3, [r4, #12]
 80033da:	2300      	movs	r3, #0
 80033dc:	6063      	str	r3, [r4, #4]
 80033de:	6923      	ldr	r3, [r4, #16]
 80033e0:	6023      	str	r3, [r4, #0]
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	f043 0308 	orr.w	r3, r3, #8
 80033e8:	81a3      	strh	r3, [r4, #12]
 80033ea:	6923      	ldr	r3, [r4, #16]
 80033ec:	b94b      	cbnz	r3, 8003402 <__swsetup_r+0x7a>
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80033f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033f8:	d003      	beq.n	8003402 <__swsetup_r+0x7a>
 80033fa:	4621      	mov	r1, r4
 80033fc:	4628      	mov	r0, r5
 80033fe:	f000 fd40 	bl	8003e82 <__smakebuf_r>
 8003402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003406:	f013 0201 	ands.w	r2, r3, #1
 800340a:	d00a      	beq.n	8003422 <__swsetup_r+0x9a>
 800340c:	2200      	movs	r2, #0
 800340e:	60a2      	str	r2, [r4, #8]
 8003410:	6962      	ldr	r2, [r4, #20]
 8003412:	4252      	negs	r2, r2
 8003414:	61a2      	str	r2, [r4, #24]
 8003416:	6922      	ldr	r2, [r4, #16]
 8003418:	b942      	cbnz	r2, 800342c <__swsetup_r+0xa4>
 800341a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800341e:	d1c5      	bne.n	80033ac <__swsetup_r+0x24>
 8003420:	bd38      	pop	{r3, r4, r5, pc}
 8003422:	0799      	lsls	r1, r3, #30
 8003424:	bf58      	it	pl
 8003426:	6962      	ldrpl	r2, [r4, #20]
 8003428:	60a2      	str	r2, [r4, #8]
 800342a:	e7f4      	b.n	8003416 <__swsetup_r+0x8e>
 800342c:	2000      	movs	r0, #0
 800342e:	e7f7      	b.n	8003420 <__swsetup_r+0x98>
 8003430:	20000018 	.word	0x20000018

08003434 <memset>:
 8003434:	4603      	mov	r3, r0
 8003436:	4402      	add	r2, r0
 8003438:	4293      	cmp	r3, r2
 800343a:	d100      	bne.n	800343e <memset+0xa>
 800343c:	4770      	bx	lr
 800343e:	f803 1b01 	strb.w	r1, [r3], #1
 8003442:	e7f9      	b.n	8003438 <memset+0x4>

08003444 <_close_r>:
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	2300      	movs	r3, #0
 8003448:	4d05      	ldr	r5, [pc, #20]	@ (8003460 <_close_r+0x1c>)
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	602b      	str	r3, [r5, #0]
 8003450:	f7fd fc9b 	bl	8000d8a <_close>
 8003454:	1c43      	adds	r3, r0, #1
 8003456:	d102      	bne.n	800345e <_close_r+0x1a>
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	b103      	cbz	r3, 800345e <_close_r+0x1a>
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	bd38      	pop	{r3, r4, r5, pc}
 8003460:	20000384 	.word	0x20000384

08003464 <_lseek_r>:
 8003464:	b538      	push	{r3, r4, r5, lr}
 8003466:	4604      	mov	r4, r0
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	2200      	movs	r2, #0
 800346e:	4d05      	ldr	r5, [pc, #20]	@ (8003484 <_lseek_r+0x20>)
 8003470:	602a      	str	r2, [r5, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	f7fd fcad 	bl	8000dd2 <_lseek>
 8003478:	1c43      	adds	r3, r0, #1
 800347a:	d102      	bne.n	8003482 <_lseek_r+0x1e>
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	b103      	cbz	r3, 8003482 <_lseek_r+0x1e>
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	bd38      	pop	{r3, r4, r5, pc}
 8003484:	20000384 	.word	0x20000384

08003488 <_read_r>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4604      	mov	r4, r0
 800348c:	4608      	mov	r0, r1
 800348e:	4611      	mov	r1, r2
 8003490:	2200      	movs	r2, #0
 8003492:	4d05      	ldr	r5, [pc, #20]	@ (80034a8 <_read_r+0x20>)
 8003494:	602a      	str	r2, [r5, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	f7fd fc3e 	bl	8000d18 <_read>
 800349c:	1c43      	adds	r3, r0, #1
 800349e:	d102      	bne.n	80034a6 <_read_r+0x1e>
 80034a0:	682b      	ldr	r3, [r5, #0]
 80034a2:	b103      	cbz	r3, 80034a6 <_read_r+0x1e>
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	bd38      	pop	{r3, r4, r5, pc}
 80034a8:	20000384 	.word	0x20000384

080034ac <_write_r>:
 80034ac:	b538      	push	{r3, r4, r5, lr}
 80034ae:	4604      	mov	r4, r0
 80034b0:	4608      	mov	r0, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	2200      	movs	r2, #0
 80034b6:	4d05      	ldr	r5, [pc, #20]	@ (80034cc <_write_r+0x20>)
 80034b8:	602a      	str	r2, [r5, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f7fd fc49 	bl	8000d52 <_write>
 80034c0:	1c43      	adds	r3, r0, #1
 80034c2:	d102      	bne.n	80034ca <_write_r+0x1e>
 80034c4:	682b      	ldr	r3, [r5, #0]
 80034c6:	b103      	cbz	r3, 80034ca <_write_r+0x1e>
 80034c8:	6023      	str	r3, [r4, #0]
 80034ca:	bd38      	pop	{r3, r4, r5, pc}
 80034cc:	20000384 	.word	0x20000384

080034d0 <__errno>:
 80034d0:	4b01      	ldr	r3, [pc, #4]	@ (80034d8 <__errno+0x8>)
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000018 	.word	0x20000018

080034dc <__libc_init_array>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	2600      	movs	r6, #0
 80034e0:	4d0c      	ldr	r5, [pc, #48]	@ (8003514 <__libc_init_array+0x38>)
 80034e2:	4c0d      	ldr	r4, [pc, #52]	@ (8003518 <__libc_init_array+0x3c>)
 80034e4:	1b64      	subs	r4, r4, r5
 80034e6:	10a4      	asrs	r4, r4, #2
 80034e8:	42a6      	cmp	r6, r4
 80034ea:	d109      	bne.n	8003500 <__libc_init_array+0x24>
 80034ec:	f000 fdd8 	bl	80040a0 <_init>
 80034f0:	2600      	movs	r6, #0
 80034f2:	4d0a      	ldr	r5, [pc, #40]	@ (800351c <__libc_init_array+0x40>)
 80034f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003520 <__libc_init_array+0x44>)
 80034f6:	1b64      	subs	r4, r4, r5
 80034f8:	10a4      	asrs	r4, r4, #2
 80034fa:	42a6      	cmp	r6, r4
 80034fc:	d105      	bne.n	800350a <__libc_init_array+0x2e>
 80034fe:	bd70      	pop	{r4, r5, r6, pc}
 8003500:	f855 3b04 	ldr.w	r3, [r5], #4
 8003504:	4798      	blx	r3
 8003506:	3601      	adds	r6, #1
 8003508:	e7ee      	b.n	80034e8 <__libc_init_array+0xc>
 800350a:	f855 3b04 	ldr.w	r3, [r5], #4
 800350e:	4798      	blx	r3
 8003510:	3601      	adds	r6, #1
 8003512:	e7f2      	b.n	80034fa <__libc_init_array+0x1e>
 8003514:	080041b0 	.word	0x080041b0
 8003518:	080041b0 	.word	0x080041b0
 800351c:	080041b0 	.word	0x080041b0
 8003520:	080041b4 	.word	0x080041b4

08003524 <__retarget_lock_init_recursive>:
 8003524:	4770      	bx	lr

08003526 <__retarget_lock_acquire_recursive>:
 8003526:	4770      	bx	lr

08003528 <__retarget_lock_release_recursive>:
 8003528:	4770      	bx	lr
	...

0800352c <_free_r>:
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	4605      	mov	r5, r0
 8003530:	2900      	cmp	r1, #0
 8003532:	d040      	beq.n	80035b6 <_free_r+0x8a>
 8003534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003538:	1f0c      	subs	r4, r1, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	bfb8      	it	lt
 800353e:	18e4      	addlt	r4, r4, r3
 8003540:	f000 f8de 	bl	8003700 <__malloc_lock>
 8003544:	4a1c      	ldr	r2, [pc, #112]	@ (80035b8 <_free_r+0x8c>)
 8003546:	6813      	ldr	r3, [r2, #0]
 8003548:	b933      	cbnz	r3, 8003558 <_free_r+0x2c>
 800354a:	6063      	str	r3, [r4, #4]
 800354c:	6014      	str	r4, [r2, #0]
 800354e:	4628      	mov	r0, r5
 8003550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003554:	f000 b8da 	b.w	800370c <__malloc_unlock>
 8003558:	42a3      	cmp	r3, r4
 800355a:	d908      	bls.n	800356e <_free_r+0x42>
 800355c:	6820      	ldr	r0, [r4, #0]
 800355e:	1821      	adds	r1, r4, r0
 8003560:	428b      	cmp	r3, r1
 8003562:	bf01      	itttt	eq
 8003564:	6819      	ldreq	r1, [r3, #0]
 8003566:	685b      	ldreq	r3, [r3, #4]
 8003568:	1809      	addeq	r1, r1, r0
 800356a:	6021      	streq	r1, [r4, #0]
 800356c:	e7ed      	b.n	800354a <_free_r+0x1e>
 800356e:	461a      	mov	r2, r3
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	b10b      	cbz	r3, 8003578 <_free_r+0x4c>
 8003574:	42a3      	cmp	r3, r4
 8003576:	d9fa      	bls.n	800356e <_free_r+0x42>
 8003578:	6811      	ldr	r1, [r2, #0]
 800357a:	1850      	adds	r0, r2, r1
 800357c:	42a0      	cmp	r0, r4
 800357e:	d10b      	bne.n	8003598 <_free_r+0x6c>
 8003580:	6820      	ldr	r0, [r4, #0]
 8003582:	4401      	add	r1, r0
 8003584:	1850      	adds	r0, r2, r1
 8003586:	4283      	cmp	r3, r0
 8003588:	6011      	str	r1, [r2, #0]
 800358a:	d1e0      	bne.n	800354e <_free_r+0x22>
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4408      	add	r0, r1
 8003592:	6010      	str	r0, [r2, #0]
 8003594:	6053      	str	r3, [r2, #4]
 8003596:	e7da      	b.n	800354e <_free_r+0x22>
 8003598:	d902      	bls.n	80035a0 <_free_r+0x74>
 800359a:	230c      	movs	r3, #12
 800359c:	602b      	str	r3, [r5, #0]
 800359e:	e7d6      	b.n	800354e <_free_r+0x22>
 80035a0:	6820      	ldr	r0, [r4, #0]
 80035a2:	1821      	adds	r1, r4, r0
 80035a4:	428b      	cmp	r3, r1
 80035a6:	bf01      	itttt	eq
 80035a8:	6819      	ldreq	r1, [r3, #0]
 80035aa:	685b      	ldreq	r3, [r3, #4]
 80035ac:	1809      	addeq	r1, r1, r0
 80035ae:	6021      	streq	r1, [r4, #0]
 80035b0:	6063      	str	r3, [r4, #4]
 80035b2:	6054      	str	r4, [r2, #4]
 80035b4:	e7cb      	b.n	800354e <_free_r+0x22>
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	20000390 	.word	0x20000390

080035bc <sbrk_aligned>:
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	4e0f      	ldr	r6, [pc, #60]	@ (80035fc <sbrk_aligned+0x40>)
 80035c0:	460c      	mov	r4, r1
 80035c2:	6831      	ldr	r1, [r6, #0]
 80035c4:	4605      	mov	r5, r0
 80035c6:	b911      	cbnz	r1, 80035ce <sbrk_aligned+0x12>
 80035c8:	f000 fd08 	bl	8003fdc <_sbrk_r>
 80035cc:	6030      	str	r0, [r6, #0]
 80035ce:	4621      	mov	r1, r4
 80035d0:	4628      	mov	r0, r5
 80035d2:	f000 fd03 	bl	8003fdc <_sbrk_r>
 80035d6:	1c43      	adds	r3, r0, #1
 80035d8:	d103      	bne.n	80035e2 <sbrk_aligned+0x26>
 80035da:	f04f 34ff 	mov.w	r4, #4294967295
 80035de:	4620      	mov	r0, r4
 80035e0:	bd70      	pop	{r4, r5, r6, pc}
 80035e2:	1cc4      	adds	r4, r0, #3
 80035e4:	f024 0403 	bic.w	r4, r4, #3
 80035e8:	42a0      	cmp	r0, r4
 80035ea:	d0f8      	beq.n	80035de <sbrk_aligned+0x22>
 80035ec:	1a21      	subs	r1, r4, r0
 80035ee:	4628      	mov	r0, r5
 80035f0:	f000 fcf4 	bl	8003fdc <_sbrk_r>
 80035f4:	3001      	adds	r0, #1
 80035f6:	d1f2      	bne.n	80035de <sbrk_aligned+0x22>
 80035f8:	e7ef      	b.n	80035da <sbrk_aligned+0x1e>
 80035fa:	bf00      	nop
 80035fc:	2000038c 	.word	0x2000038c

08003600 <_malloc_r>:
 8003600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003604:	1ccd      	adds	r5, r1, #3
 8003606:	f025 0503 	bic.w	r5, r5, #3
 800360a:	3508      	adds	r5, #8
 800360c:	2d0c      	cmp	r5, #12
 800360e:	bf38      	it	cc
 8003610:	250c      	movcc	r5, #12
 8003612:	2d00      	cmp	r5, #0
 8003614:	4606      	mov	r6, r0
 8003616:	db01      	blt.n	800361c <_malloc_r+0x1c>
 8003618:	42a9      	cmp	r1, r5
 800361a:	d904      	bls.n	8003626 <_malloc_r+0x26>
 800361c:	230c      	movs	r3, #12
 800361e:	6033      	str	r3, [r6, #0]
 8003620:	2000      	movs	r0, #0
 8003622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036fc <_malloc_r+0xfc>
 800362a:	f000 f869 	bl	8003700 <__malloc_lock>
 800362e:	f8d8 3000 	ldr.w	r3, [r8]
 8003632:	461c      	mov	r4, r3
 8003634:	bb44      	cbnz	r4, 8003688 <_malloc_r+0x88>
 8003636:	4629      	mov	r1, r5
 8003638:	4630      	mov	r0, r6
 800363a:	f7ff ffbf 	bl	80035bc <sbrk_aligned>
 800363e:	1c43      	adds	r3, r0, #1
 8003640:	4604      	mov	r4, r0
 8003642:	d158      	bne.n	80036f6 <_malloc_r+0xf6>
 8003644:	f8d8 4000 	ldr.w	r4, [r8]
 8003648:	4627      	mov	r7, r4
 800364a:	2f00      	cmp	r7, #0
 800364c:	d143      	bne.n	80036d6 <_malloc_r+0xd6>
 800364e:	2c00      	cmp	r4, #0
 8003650:	d04b      	beq.n	80036ea <_malloc_r+0xea>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	4639      	mov	r1, r7
 8003656:	4630      	mov	r0, r6
 8003658:	eb04 0903 	add.w	r9, r4, r3
 800365c:	f000 fcbe 	bl	8003fdc <_sbrk_r>
 8003660:	4581      	cmp	r9, r0
 8003662:	d142      	bne.n	80036ea <_malloc_r+0xea>
 8003664:	6821      	ldr	r1, [r4, #0]
 8003666:	4630      	mov	r0, r6
 8003668:	1a6d      	subs	r5, r5, r1
 800366a:	4629      	mov	r1, r5
 800366c:	f7ff ffa6 	bl	80035bc <sbrk_aligned>
 8003670:	3001      	adds	r0, #1
 8003672:	d03a      	beq.n	80036ea <_malloc_r+0xea>
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	442b      	add	r3, r5
 8003678:	6023      	str	r3, [r4, #0]
 800367a:	f8d8 3000 	ldr.w	r3, [r8]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	bb62      	cbnz	r2, 80036dc <_malloc_r+0xdc>
 8003682:	f8c8 7000 	str.w	r7, [r8]
 8003686:	e00f      	b.n	80036a8 <_malloc_r+0xa8>
 8003688:	6822      	ldr	r2, [r4, #0]
 800368a:	1b52      	subs	r2, r2, r5
 800368c:	d420      	bmi.n	80036d0 <_malloc_r+0xd0>
 800368e:	2a0b      	cmp	r2, #11
 8003690:	d917      	bls.n	80036c2 <_malloc_r+0xc2>
 8003692:	1961      	adds	r1, r4, r5
 8003694:	42a3      	cmp	r3, r4
 8003696:	6025      	str	r5, [r4, #0]
 8003698:	bf18      	it	ne
 800369a:	6059      	strne	r1, [r3, #4]
 800369c:	6863      	ldr	r3, [r4, #4]
 800369e:	bf08      	it	eq
 80036a0:	f8c8 1000 	streq.w	r1, [r8]
 80036a4:	5162      	str	r2, [r4, r5]
 80036a6:	604b      	str	r3, [r1, #4]
 80036a8:	4630      	mov	r0, r6
 80036aa:	f000 f82f 	bl	800370c <__malloc_unlock>
 80036ae:	f104 000b 	add.w	r0, r4, #11
 80036b2:	1d23      	adds	r3, r4, #4
 80036b4:	f020 0007 	bic.w	r0, r0, #7
 80036b8:	1ac2      	subs	r2, r0, r3
 80036ba:	bf1c      	itt	ne
 80036bc:	1a1b      	subne	r3, r3, r0
 80036be:	50a3      	strne	r3, [r4, r2]
 80036c0:	e7af      	b.n	8003622 <_malloc_r+0x22>
 80036c2:	6862      	ldr	r2, [r4, #4]
 80036c4:	42a3      	cmp	r3, r4
 80036c6:	bf0c      	ite	eq
 80036c8:	f8c8 2000 	streq.w	r2, [r8]
 80036cc:	605a      	strne	r2, [r3, #4]
 80036ce:	e7eb      	b.n	80036a8 <_malloc_r+0xa8>
 80036d0:	4623      	mov	r3, r4
 80036d2:	6864      	ldr	r4, [r4, #4]
 80036d4:	e7ae      	b.n	8003634 <_malloc_r+0x34>
 80036d6:	463c      	mov	r4, r7
 80036d8:	687f      	ldr	r7, [r7, #4]
 80036da:	e7b6      	b.n	800364a <_malloc_r+0x4a>
 80036dc:	461a      	mov	r2, r3
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	42a3      	cmp	r3, r4
 80036e2:	d1fb      	bne.n	80036dc <_malloc_r+0xdc>
 80036e4:	2300      	movs	r3, #0
 80036e6:	6053      	str	r3, [r2, #4]
 80036e8:	e7de      	b.n	80036a8 <_malloc_r+0xa8>
 80036ea:	230c      	movs	r3, #12
 80036ec:	4630      	mov	r0, r6
 80036ee:	6033      	str	r3, [r6, #0]
 80036f0:	f000 f80c 	bl	800370c <__malloc_unlock>
 80036f4:	e794      	b.n	8003620 <_malloc_r+0x20>
 80036f6:	6005      	str	r5, [r0, #0]
 80036f8:	e7d6      	b.n	80036a8 <_malloc_r+0xa8>
 80036fa:	bf00      	nop
 80036fc:	20000390 	.word	0x20000390

08003700 <__malloc_lock>:
 8003700:	4801      	ldr	r0, [pc, #4]	@ (8003708 <__malloc_lock+0x8>)
 8003702:	f7ff bf10 	b.w	8003526 <__retarget_lock_acquire_recursive>
 8003706:	bf00      	nop
 8003708:	20000388 	.word	0x20000388

0800370c <__malloc_unlock>:
 800370c:	4801      	ldr	r0, [pc, #4]	@ (8003714 <__malloc_unlock+0x8>)
 800370e:	f7ff bf0b 	b.w	8003528 <__retarget_lock_release_recursive>
 8003712:	bf00      	nop
 8003714:	20000388 	.word	0x20000388

08003718 <__ssputs_r>:
 8003718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800371c:	461f      	mov	r7, r3
 800371e:	688e      	ldr	r6, [r1, #8]
 8003720:	4682      	mov	sl, r0
 8003722:	42be      	cmp	r6, r7
 8003724:	460c      	mov	r4, r1
 8003726:	4690      	mov	r8, r2
 8003728:	680b      	ldr	r3, [r1, #0]
 800372a:	d82d      	bhi.n	8003788 <__ssputs_r+0x70>
 800372c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003730:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003734:	d026      	beq.n	8003784 <__ssputs_r+0x6c>
 8003736:	6965      	ldr	r5, [r4, #20]
 8003738:	6909      	ldr	r1, [r1, #16]
 800373a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800373e:	eba3 0901 	sub.w	r9, r3, r1
 8003742:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003746:	1c7b      	adds	r3, r7, #1
 8003748:	444b      	add	r3, r9
 800374a:	106d      	asrs	r5, r5, #1
 800374c:	429d      	cmp	r5, r3
 800374e:	bf38      	it	cc
 8003750:	461d      	movcc	r5, r3
 8003752:	0553      	lsls	r3, r2, #21
 8003754:	d527      	bpl.n	80037a6 <__ssputs_r+0x8e>
 8003756:	4629      	mov	r1, r5
 8003758:	f7ff ff52 	bl	8003600 <_malloc_r>
 800375c:	4606      	mov	r6, r0
 800375e:	b360      	cbz	r0, 80037ba <__ssputs_r+0xa2>
 8003760:	464a      	mov	r2, r9
 8003762:	6921      	ldr	r1, [r4, #16]
 8003764:	f000 fc58 	bl	8004018 <memcpy>
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800376e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003772:	81a3      	strh	r3, [r4, #12]
 8003774:	6126      	str	r6, [r4, #16]
 8003776:	444e      	add	r6, r9
 8003778:	6026      	str	r6, [r4, #0]
 800377a:	463e      	mov	r6, r7
 800377c:	6165      	str	r5, [r4, #20]
 800377e:	eba5 0509 	sub.w	r5, r5, r9
 8003782:	60a5      	str	r5, [r4, #8]
 8003784:	42be      	cmp	r6, r7
 8003786:	d900      	bls.n	800378a <__ssputs_r+0x72>
 8003788:	463e      	mov	r6, r7
 800378a:	4632      	mov	r2, r6
 800378c:	4641      	mov	r1, r8
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	f000 fbe7 	bl	8003f62 <memmove>
 8003794:	2000      	movs	r0, #0
 8003796:	68a3      	ldr	r3, [r4, #8]
 8003798:	1b9b      	subs	r3, r3, r6
 800379a:	60a3      	str	r3, [r4, #8]
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	4433      	add	r3, r6
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a6:	462a      	mov	r2, r5
 80037a8:	f000 fc44 	bl	8004034 <_realloc_r>
 80037ac:	4606      	mov	r6, r0
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d1e0      	bne.n	8003774 <__ssputs_r+0x5c>
 80037b2:	4650      	mov	r0, sl
 80037b4:	6921      	ldr	r1, [r4, #16]
 80037b6:	f7ff feb9 	bl	800352c <_free_r>
 80037ba:	230c      	movs	r3, #12
 80037bc:	f8ca 3000 	str.w	r3, [sl]
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	f04f 30ff 	mov.w	r0, #4294967295
 80037c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037ca:	81a3      	strh	r3, [r4, #12]
 80037cc:	e7e9      	b.n	80037a2 <__ssputs_r+0x8a>
	...

080037d0 <_svfiprintf_r>:
 80037d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d4:	4698      	mov	r8, r3
 80037d6:	898b      	ldrh	r3, [r1, #12]
 80037d8:	4607      	mov	r7, r0
 80037da:	061b      	lsls	r3, r3, #24
 80037dc:	460d      	mov	r5, r1
 80037de:	4614      	mov	r4, r2
 80037e0:	b09d      	sub	sp, #116	@ 0x74
 80037e2:	d510      	bpl.n	8003806 <_svfiprintf_r+0x36>
 80037e4:	690b      	ldr	r3, [r1, #16]
 80037e6:	b973      	cbnz	r3, 8003806 <_svfiprintf_r+0x36>
 80037e8:	2140      	movs	r1, #64	@ 0x40
 80037ea:	f7ff ff09 	bl	8003600 <_malloc_r>
 80037ee:	6028      	str	r0, [r5, #0]
 80037f0:	6128      	str	r0, [r5, #16]
 80037f2:	b930      	cbnz	r0, 8003802 <_svfiprintf_r+0x32>
 80037f4:	230c      	movs	r3, #12
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	b01d      	add	sp, #116	@ 0x74
 80037fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003802:	2340      	movs	r3, #64	@ 0x40
 8003804:	616b      	str	r3, [r5, #20]
 8003806:	2300      	movs	r3, #0
 8003808:	9309      	str	r3, [sp, #36]	@ 0x24
 800380a:	2320      	movs	r3, #32
 800380c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003810:	2330      	movs	r3, #48	@ 0x30
 8003812:	f04f 0901 	mov.w	r9, #1
 8003816:	f8cd 800c 	str.w	r8, [sp, #12]
 800381a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80039b4 <_svfiprintf_r+0x1e4>
 800381e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003822:	4623      	mov	r3, r4
 8003824:	469a      	mov	sl, r3
 8003826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800382a:	b10a      	cbz	r2, 8003830 <_svfiprintf_r+0x60>
 800382c:	2a25      	cmp	r2, #37	@ 0x25
 800382e:	d1f9      	bne.n	8003824 <_svfiprintf_r+0x54>
 8003830:	ebba 0b04 	subs.w	fp, sl, r4
 8003834:	d00b      	beq.n	800384e <_svfiprintf_r+0x7e>
 8003836:	465b      	mov	r3, fp
 8003838:	4622      	mov	r2, r4
 800383a:	4629      	mov	r1, r5
 800383c:	4638      	mov	r0, r7
 800383e:	f7ff ff6b 	bl	8003718 <__ssputs_r>
 8003842:	3001      	adds	r0, #1
 8003844:	f000 80a7 	beq.w	8003996 <_svfiprintf_r+0x1c6>
 8003848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800384a:	445a      	add	r2, fp
 800384c:	9209      	str	r2, [sp, #36]	@ 0x24
 800384e:	f89a 3000 	ldrb.w	r3, [sl]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 809f 	beq.w	8003996 <_svfiprintf_r+0x1c6>
 8003858:	2300      	movs	r3, #0
 800385a:	f04f 32ff 	mov.w	r2, #4294967295
 800385e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003862:	f10a 0a01 	add.w	sl, sl, #1
 8003866:	9304      	str	r3, [sp, #16]
 8003868:	9307      	str	r3, [sp, #28]
 800386a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800386e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003870:	4654      	mov	r4, sl
 8003872:	2205      	movs	r2, #5
 8003874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003878:	484e      	ldr	r0, [pc, #312]	@ (80039b4 <_svfiprintf_r+0x1e4>)
 800387a:	f000 fbbf 	bl	8003ffc <memchr>
 800387e:	9a04      	ldr	r2, [sp, #16]
 8003880:	b9d8      	cbnz	r0, 80038ba <_svfiprintf_r+0xea>
 8003882:	06d0      	lsls	r0, r2, #27
 8003884:	bf44      	itt	mi
 8003886:	2320      	movmi	r3, #32
 8003888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800388c:	0711      	lsls	r1, r2, #28
 800388e:	bf44      	itt	mi
 8003890:	232b      	movmi	r3, #43	@ 0x2b
 8003892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003896:	f89a 3000 	ldrb.w	r3, [sl]
 800389a:	2b2a      	cmp	r3, #42	@ 0x2a
 800389c:	d015      	beq.n	80038ca <_svfiprintf_r+0xfa>
 800389e:	4654      	mov	r4, sl
 80038a0:	2000      	movs	r0, #0
 80038a2:	f04f 0c0a 	mov.w	ip, #10
 80038a6:	9a07      	ldr	r2, [sp, #28]
 80038a8:	4621      	mov	r1, r4
 80038aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038ae:	3b30      	subs	r3, #48	@ 0x30
 80038b0:	2b09      	cmp	r3, #9
 80038b2:	d94b      	bls.n	800394c <_svfiprintf_r+0x17c>
 80038b4:	b1b0      	cbz	r0, 80038e4 <_svfiprintf_r+0x114>
 80038b6:	9207      	str	r2, [sp, #28]
 80038b8:	e014      	b.n	80038e4 <_svfiprintf_r+0x114>
 80038ba:	eba0 0308 	sub.w	r3, r0, r8
 80038be:	fa09 f303 	lsl.w	r3, r9, r3
 80038c2:	4313      	orrs	r3, r2
 80038c4:	46a2      	mov	sl, r4
 80038c6:	9304      	str	r3, [sp, #16]
 80038c8:	e7d2      	b.n	8003870 <_svfiprintf_r+0xa0>
 80038ca:	9b03      	ldr	r3, [sp, #12]
 80038cc:	1d19      	adds	r1, r3, #4
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	9103      	str	r1, [sp, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bfbb      	ittet	lt
 80038d6:	425b      	neglt	r3, r3
 80038d8:	f042 0202 	orrlt.w	r2, r2, #2
 80038dc:	9307      	strge	r3, [sp, #28]
 80038de:	9307      	strlt	r3, [sp, #28]
 80038e0:	bfb8      	it	lt
 80038e2:	9204      	strlt	r2, [sp, #16]
 80038e4:	7823      	ldrb	r3, [r4, #0]
 80038e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80038e8:	d10a      	bne.n	8003900 <_svfiprintf_r+0x130>
 80038ea:	7863      	ldrb	r3, [r4, #1]
 80038ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80038ee:	d132      	bne.n	8003956 <_svfiprintf_r+0x186>
 80038f0:	9b03      	ldr	r3, [sp, #12]
 80038f2:	3402      	adds	r4, #2
 80038f4:	1d1a      	adds	r2, r3, #4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	9203      	str	r2, [sp, #12]
 80038fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038fe:	9305      	str	r3, [sp, #20]
 8003900:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80039b8 <_svfiprintf_r+0x1e8>
 8003904:	2203      	movs	r2, #3
 8003906:	4650      	mov	r0, sl
 8003908:	7821      	ldrb	r1, [r4, #0]
 800390a:	f000 fb77 	bl	8003ffc <memchr>
 800390e:	b138      	cbz	r0, 8003920 <_svfiprintf_r+0x150>
 8003910:	2240      	movs	r2, #64	@ 0x40
 8003912:	9b04      	ldr	r3, [sp, #16]
 8003914:	eba0 000a 	sub.w	r0, r0, sl
 8003918:	4082      	lsls	r2, r0
 800391a:	4313      	orrs	r3, r2
 800391c:	3401      	adds	r4, #1
 800391e:	9304      	str	r3, [sp, #16]
 8003920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003924:	2206      	movs	r2, #6
 8003926:	4825      	ldr	r0, [pc, #148]	@ (80039bc <_svfiprintf_r+0x1ec>)
 8003928:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800392c:	f000 fb66 	bl	8003ffc <memchr>
 8003930:	2800      	cmp	r0, #0
 8003932:	d036      	beq.n	80039a2 <_svfiprintf_r+0x1d2>
 8003934:	4b22      	ldr	r3, [pc, #136]	@ (80039c0 <_svfiprintf_r+0x1f0>)
 8003936:	bb1b      	cbnz	r3, 8003980 <_svfiprintf_r+0x1b0>
 8003938:	9b03      	ldr	r3, [sp, #12]
 800393a:	3307      	adds	r3, #7
 800393c:	f023 0307 	bic.w	r3, r3, #7
 8003940:	3308      	adds	r3, #8
 8003942:	9303      	str	r3, [sp, #12]
 8003944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003946:	4433      	add	r3, r6
 8003948:	9309      	str	r3, [sp, #36]	@ 0x24
 800394a:	e76a      	b.n	8003822 <_svfiprintf_r+0x52>
 800394c:	460c      	mov	r4, r1
 800394e:	2001      	movs	r0, #1
 8003950:	fb0c 3202 	mla	r2, ip, r2, r3
 8003954:	e7a8      	b.n	80038a8 <_svfiprintf_r+0xd8>
 8003956:	2300      	movs	r3, #0
 8003958:	f04f 0c0a 	mov.w	ip, #10
 800395c:	4619      	mov	r1, r3
 800395e:	3401      	adds	r4, #1
 8003960:	9305      	str	r3, [sp, #20]
 8003962:	4620      	mov	r0, r4
 8003964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003968:	3a30      	subs	r2, #48	@ 0x30
 800396a:	2a09      	cmp	r2, #9
 800396c:	d903      	bls.n	8003976 <_svfiprintf_r+0x1a6>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0c6      	beq.n	8003900 <_svfiprintf_r+0x130>
 8003972:	9105      	str	r1, [sp, #20]
 8003974:	e7c4      	b.n	8003900 <_svfiprintf_r+0x130>
 8003976:	4604      	mov	r4, r0
 8003978:	2301      	movs	r3, #1
 800397a:	fb0c 2101 	mla	r1, ip, r1, r2
 800397e:	e7f0      	b.n	8003962 <_svfiprintf_r+0x192>
 8003980:	ab03      	add	r3, sp, #12
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	462a      	mov	r2, r5
 8003986:	4638      	mov	r0, r7
 8003988:	4b0e      	ldr	r3, [pc, #56]	@ (80039c4 <_svfiprintf_r+0x1f4>)
 800398a:	a904      	add	r1, sp, #16
 800398c:	f3af 8000 	nop.w
 8003990:	1c42      	adds	r2, r0, #1
 8003992:	4606      	mov	r6, r0
 8003994:	d1d6      	bne.n	8003944 <_svfiprintf_r+0x174>
 8003996:	89ab      	ldrh	r3, [r5, #12]
 8003998:	065b      	lsls	r3, r3, #25
 800399a:	f53f af2d 	bmi.w	80037f8 <_svfiprintf_r+0x28>
 800399e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039a0:	e72c      	b.n	80037fc <_svfiprintf_r+0x2c>
 80039a2:	ab03      	add	r3, sp, #12
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	462a      	mov	r2, r5
 80039a8:	4638      	mov	r0, r7
 80039aa:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <_svfiprintf_r+0x1f4>)
 80039ac:	a904      	add	r1, sp, #16
 80039ae:	f000 f87d 	bl	8003aac <_printf_i>
 80039b2:	e7ed      	b.n	8003990 <_svfiprintf_r+0x1c0>
 80039b4:	08004172 	.word	0x08004172
 80039b8:	08004178 	.word	0x08004178
 80039bc:	0800417c 	.word	0x0800417c
 80039c0:	00000000 	.word	0x00000000
 80039c4:	08003719 	.word	0x08003719

080039c8 <_printf_common>:
 80039c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039cc:	4616      	mov	r6, r2
 80039ce:	4698      	mov	r8, r3
 80039d0:	688a      	ldr	r2, [r1, #8]
 80039d2:	690b      	ldr	r3, [r1, #16]
 80039d4:	4607      	mov	r7, r0
 80039d6:	4293      	cmp	r3, r2
 80039d8:	bfb8      	it	lt
 80039da:	4613      	movlt	r3, r2
 80039dc:	6033      	str	r3, [r6, #0]
 80039de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039e2:	460c      	mov	r4, r1
 80039e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039e8:	b10a      	cbz	r2, 80039ee <_printf_common+0x26>
 80039ea:	3301      	adds	r3, #1
 80039ec:	6033      	str	r3, [r6, #0]
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	0699      	lsls	r1, r3, #26
 80039f2:	bf42      	ittt	mi
 80039f4:	6833      	ldrmi	r3, [r6, #0]
 80039f6:	3302      	addmi	r3, #2
 80039f8:	6033      	strmi	r3, [r6, #0]
 80039fa:	6825      	ldr	r5, [r4, #0]
 80039fc:	f015 0506 	ands.w	r5, r5, #6
 8003a00:	d106      	bne.n	8003a10 <_printf_common+0x48>
 8003a02:	f104 0a19 	add.w	sl, r4, #25
 8003a06:	68e3      	ldr	r3, [r4, #12]
 8003a08:	6832      	ldr	r2, [r6, #0]
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	42ab      	cmp	r3, r5
 8003a0e:	dc2b      	bgt.n	8003a68 <_printf_common+0xa0>
 8003a10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a14:	6822      	ldr	r2, [r4, #0]
 8003a16:	3b00      	subs	r3, #0
 8003a18:	bf18      	it	ne
 8003a1a:	2301      	movne	r3, #1
 8003a1c:	0692      	lsls	r2, r2, #26
 8003a1e:	d430      	bmi.n	8003a82 <_printf_common+0xba>
 8003a20:	4641      	mov	r1, r8
 8003a22:	4638      	mov	r0, r7
 8003a24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a28:	47c8      	blx	r9
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d023      	beq.n	8003a76 <_printf_common+0xae>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	6922      	ldr	r2, [r4, #16]
 8003a32:	f003 0306 	and.w	r3, r3, #6
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	bf14      	ite	ne
 8003a3a:	2500      	movne	r5, #0
 8003a3c:	6833      	ldreq	r3, [r6, #0]
 8003a3e:	f04f 0600 	mov.w	r6, #0
 8003a42:	bf08      	it	eq
 8003a44:	68e5      	ldreq	r5, [r4, #12]
 8003a46:	f104 041a 	add.w	r4, r4, #26
 8003a4a:	bf08      	it	eq
 8003a4c:	1aed      	subeq	r5, r5, r3
 8003a4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003a52:	bf08      	it	eq
 8003a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	bfc4      	itt	gt
 8003a5c:	1a9b      	subgt	r3, r3, r2
 8003a5e:	18ed      	addgt	r5, r5, r3
 8003a60:	42b5      	cmp	r5, r6
 8003a62:	d11a      	bne.n	8003a9a <_printf_common+0xd2>
 8003a64:	2000      	movs	r0, #0
 8003a66:	e008      	b.n	8003a7a <_printf_common+0xb2>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	4652      	mov	r2, sl
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	4638      	mov	r0, r7
 8003a70:	47c8      	blx	r9
 8003a72:	3001      	adds	r0, #1
 8003a74:	d103      	bne.n	8003a7e <_printf_common+0xb6>
 8003a76:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a7e:	3501      	adds	r5, #1
 8003a80:	e7c1      	b.n	8003a06 <_printf_common+0x3e>
 8003a82:	2030      	movs	r0, #48	@ 0x30
 8003a84:	18e1      	adds	r1, r4, r3
 8003a86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a90:	4422      	add	r2, r4
 8003a92:	3302      	adds	r3, #2
 8003a94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a98:	e7c2      	b.n	8003a20 <_printf_common+0x58>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	4622      	mov	r2, r4
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	4638      	mov	r0, r7
 8003aa2:	47c8      	blx	r9
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d0e6      	beq.n	8003a76 <_printf_common+0xae>
 8003aa8:	3601      	adds	r6, #1
 8003aaa:	e7d9      	b.n	8003a60 <_printf_common+0x98>

08003aac <_printf_i>:
 8003aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab0:	7e0f      	ldrb	r7, [r1, #24]
 8003ab2:	4691      	mov	r9, r2
 8003ab4:	2f78      	cmp	r7, #120	@ 0x78
 8003ab6:	4680      	mov	r8, r0
 8003ab8:	460c      	mov	r4, r1
 8003aba:	469a      	mov	sl, r3
 8003abc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003abe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ac2:	d807      	bhi.n	8003ad4 <_printf_i+0x28>
 8003ac4:	2f62      	cmp	r7, #98	@ 0x62
 8003ac6:	d80a      	bhi.n	8003ade <_printf_i+0x32>
 8003ac8:	2f00      	cmp	r7, #0
 8003aca:	f000 80d1 	beq.w	8003c70 <_printf_i+0x1c4>
 8003ace:	2f58      	cmp	r7, #88	@ 0x58
 8003ad0:	f000 80b8 	beq.w	8003c44 <_printf_i+0x198>
 8003ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ad8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003adc:	e03a      	b.n	8003b54 <_printf_i+0xa8>
 8003ade:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ae2:	2b15      	cmp	r3, #21
 8003ae4:	d8f6      	bhi.n	8003ad4 <_printf_i+0x28>
 8003ae6:	a101      	add	r1, pc, #4	@ (adr r1, 8003aec <_printf_i+0x40>)
 8003ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003aec:	08003b45 	.word	0x08003b45
 8003af0:	08003b59 	.word	0x08003b59
 8003af4:	08003ad5 	.word	0x08003ad5
 8003af8:	08003ad5 	.word	0x08003ad5
 8003afc:	08003ad5 	.word	0x08003ad5
 8003b00:	08003ad5 	.word	0x08003ad5
 8003b04:	08003b59 	.word	0x08003b59
 8003b08:	08003ad5 	.word	0x08003ad5
 8003b0c:	08003ad5 	.word	0x08003ad5
 8003b10:	08003ad5 	.word	0x08003ad5
 8003b14:	08003ad5 	.word	0x08003ad5
 8003b18:	08003c57 	.word	0x08003c57
 8003b1c:	08003b83 	.word	0x08003b83
 8003b20:	08003c11 	.word	0x08003c11
 8003b24:	08003ad5 	.word	0x08003ad5
 8003b28:	08003ad5 	.word	0x08003ad5
 8003b2c:	08003c79 	.word	0x08003c79
 8003b30:	08003ad5 	.word	0x08003ad5
 8003b34:	08003b83 	.word	0x08003b83
 8003b38:	08003ad5 	.word	0x08003ad5
 8003b3c:	08003ad5 	.word	0x08003ad5
 8003b40:	08003c19 	.word	0x08003c19
 8003b44:	6833      	ldr	r3, [r6, #0]
 8003b46:	1d1a      	adds	r2, r3, #4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6032      	str	r2, [r6, #0]
 8003b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b54:	2301      	movs	r3, #1
 8003b56:	e09c      	b.n	8003c92 <_printf_i+0x1e6>
 8003b58:	6833      	ldr	r3, [r6, #0]
 8003b5a:	6820      	ldr	r0, [r4, #0]
 8003b5c:	1d19      	adds	r1, r3, #4
 8003b5e:	6031      	str	r1, [r6, #0]
 8003b60:	0606      	lsls	r6, r0, #24
 8003b62:	d501      	bpl.n	8003b68 <_printf_i+0xbc>
 8003b64:	681d      	ldr	r5, [r3, #0]
 8003b66:	e003      	b.n	8003b70 <_printf_i+0xc4>
 8003b68:	0645      	lsls	r5, r0, #25
 8003b6a:	d5fb      	bpl.n	8003b64 <_printf_i+0xb8>
 8003b6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b70:	2d00      	cmp	r5, #0
 8003b72:	da03      	bge.n	8003b7c <_printf_i+0xd0>
 8003b74:	232d      	movs	r3, #45	@ 0x2d
 8003b76:	426d      	negs	r5, r5
 8003b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b7c:	230a      	movs	r3, #10
 8003b7e:	4858      	ldr	r0, [pc, #352]	@ (8003ce0 <_printf_i+0x234>)
 8003b80:	e011      	b.n	8003ba6 <_printf_i+0xfa>
 8003b82:	6821      	ldr	r1, [r4, #0]
 8003b84:	6833      	ldr	r3, [r6, #0]
 8003b86:	0608      	lsls	r0, r1, #24
 8003b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b8c:	d402      	bmi.n	8003b94 <_printf_i+0xe8>
 8003b8e:	0649      	lsls	r1, r1, #25
 8003b90:	bf48      	it	mi
 8003b92:	b2ad      	uxthmi	r5, r5
 8003b94:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b96:	6033      	str	r3, [r6, #0]
 8003b98:	bf14      	ite	ne
 8003b9a:	230a      	movne	r3, #10
 8003b9c:	2308      	moveq	r3, #8
 8003b9e:	4850      	ldr	r0, [pc, #320]	@ (8003ce0 <_printf_i+0x234>)
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ba6:	6866      	ldr	r6, [r4, #4]
 8003ba8:	2e00      	cmp	r6, #0
 8003baa:	60a6      	str	r6, [r4, #8]
 8003bac:	db05      	blt.n	8003bba <_printf_i+0x10e>
 8003bae:	6821      	ldr	r1, [r4, #0]
 8003bb0:	432e      	orrs	r6, r5
 8003bb2:	f021 0104 	bic.w	r1, r1, #4
 8003bb6:	6021      	str	r1, [r4, #0]
 8003bb8:	d04b      	beq.n	8003c52 <_printf_i+0x1a6>
 8003bba:	4616      	mov	r6, r2
 8003bbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bc0:	fb03 5711 	mls	r7, r3, r1, r5
 8003bc4:	5dc7      	ldrb	r7, [r0, r7]
 8003bc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bca:	462f      	mov	r7, r5
 8003bcc:	42bb      	cmp	r3, r7
 8003bce:	460d      	mov	r5, r1
 8003bd0:	d9f4      	bls.n	8003bbc <_printf_i+0x110>
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d10b      	bne.n	8003bee <_printf_i+0x142>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	07df      	lsls	r7, r3, #31
 8003bda:	d508      	bpl.n	8003bee <_printf_i+0x142>
 8003bdc:	6923      	ldr	r3, [r4, #16]
 8003bde:	6861      	ldr	r1, [r4, #4]
 8003be0:	4299      	cmp	r1, r3
 8003be2:	bfde      	ittt	le
 8003be4:	2330      	movle	r3, #48	@ 0x30
 8003be6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bee:	1b92      	subs	r2, r2, r6
 8003bf0:	6122      	str	r2, [r4, #16]
 8003bf2:	464b      	mov	r3, r9
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	f8cd a000 	str.w	sl, [sp]
 8003bfc:	aa03      	add	r2, sp, #12
 8003bfe:	f7ff fee3 	bl	80039c8 <_printf_common>
 8003c02:	3001      	adds	r0, #1
 8003c04:	d14a      	bne.n	8003c9c <_printf_i+0x1f0>
 8003c06:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0a:	b004      	add	sp, #16
 8003c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	f043 0320 	orr.w	r3, r3, #32
 8003c16:	6023      	str	r3, [r4, #0]
 8003c18:	2778      	movs	r7, #120	@ 0x78
 8003c1a:	4832      	ldr	r0, [pc, #200]	@ (8003ce4 <_printf_i+0x238>)
 8003c1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	6831      	ldr	r1, [r6, #0]
 8003c24:	061f      	lsls	r7, r3, #24
 8003c26:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c2a:	d402      	bmi.n	8003c32 <_printf_i+0x186>
 8003c2c:	065f      	lsls	r7, r3, #25
 8003c2e:	bf48      	it	mi
 8003c30:	b2ad      	uxthmi	r5, r5
 8003c32:	6031      	str	r1, [r6, #0]
 8003c34:	07d9      	lsls	r1, r3, #31
 8003c36:	bf44      	itt	mi
 8003c38:	f043 0320 	orrmi.w	r3, r3, #32
 8003c3c:	6023      	strmi	r3, [r4, #0]
 8003c3e:	b11d      	cbz	r5, 8003c48 <_printf_i+0x19c>
 8003c40:	2310      	movs	r3, #16
 8003c42:	e7ad      	b.n	8003ba0 <_printf_i+0xf4>
 8003c44:	4826      	ldr	r0, [pc, #152]	@ (8003ce0 <_printf_i+0x234>)
 8003c46:	e7e9      	b.n	8003c1c <_printf_i+0x170>
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	f023 0320 	bic.w	r3, r3, #32
 8003c4e:	6023      	str	r3, [r4, #0]
 8003c50:	e7f6      	b.n	8003c40 <_printf_i+0x194>
 8003c52:	4616      	mov	r6, r2
 8003c54:	e7bd      	b.n	8003bd2 <_printf_i+0x126>
 8003c56:	6833      	ldr	r3, [r6, #0]
 8003c58:	6825      	ldr	r5, [r4, #0]
 8003c5a:	1d18      	adds	r0, r3, #4
 8003c5c:	6961      	ldr	r1, [r4, #20]
 8003c5e:	6030      	str	r0, [r6, #0]
 8003c60:	062e      	lsls	r6, r5, #24
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	d501      	bpl.n	8003c6a <_printf_i+0x1be>
 8003c66:	6019      	str	r1, [r3, #0]
 8003c68:	e002      	b.n	8003c70 <_printf_i+0x1c4>
 8003c6a:	0668      	lsls	r0, r5, #25
 8003c6c:	d5fb      	bpl.n	8003c66 <_printf_i+0x1ba>
 8003c6e:	8019      	strh	r1, [r3, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	4616      	mov	r6, r2
 8003c74:	6123      	str	r3, [r4, #16]
 8003c76:	e7bc      	b.n	8003bf2 <_printf_i+0x146>
 8003c78:	6833      	ldr	r3, [r6, #0]
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	1d1a      	adds	r2, r3, #4
 8003c7e:	6032      	str	r2, [r6, #0]
 8003c80:	681e      	ldr	r6, [r3, #0]
 8003c82:	6862      	ldr	r2, [r4, #4]
 8003c84:	4630      	mov	r0, r6
 8003c86:	f000 f9b9 	bl	8003ffc <memchr>
 8003c8a:	b108      	cbz	r0, 8003c90 <_printf_i+0x1e4>
 8003c8c:	1b80      	subs	r0, r0, r6
 8003c8e:	6060      	str	r0, [r4, #4]
 8003c90:	6863      	ldr	r3, [r4, #4]
 8003c92:	6123      	str	r3, [r4, #16]
 8003c94:	2300      	movs	r3, #0
 8003c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c9a:	e7aa      	b.n	8003bf2 <_printf_i+0x146>
 8003c9c:	4632      	mov	r2, r6
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	6923      	ldr	r3, [r4, #16]
 8003ca4:	47d0      	blx	sl
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d0ad      	beq.n	8003c06 <_printf_i+0x15a>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	079b      	lsls	r3, r3, #30
 8003cae:	d413      	bmi.n	8003cd8 <_printf_i+0x22c>
 8003cb0:	68e0      	ldr	r0, [r4, #12]
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	4298      	cmp	r0, r3
 8003cb6:	bfb8      	it	lt
 8003cb8:	4618      	movlt	r0, r3
 8003cba:	e7a6      	b.n	8003c0a <_printf_i+0x15e>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	47d0      	blx	sl
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	d09d      	beq.n	8003c06 <_printf_i+0x15a>
 8003cca:	3501      	adds	r5, #1
 8003ccc:	68e3      	ldr	r3, [r4, #12]
 8003cce:	9903      	ldr	r1, [sp, #12]
 8003cd0:	1a5b      	subs	r3, r3, r1
 8003cd2:	42ab      	cmp	r3, r5
 8003cd4:	dcf2      	bgt.n	8003cbc <_printf_i+0x210>
 8003cd6:	e7eb      	b.n	8003cb0 <_printf_i+0x204>
 8003cd8:	2500      	movs	r5, #0
 8003cda:	f104 0619 	add.w	r6, r4, #25
 8003cde:	e7f5      	b.n	8003ccc <_printf_i+0x220>
 8003ce0:	08004183 	.word	0x08004183
 8003ce4:	08004194 	.word	0x08004194

08003ce8 <__sflush_r>:
 8003ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	0716      	lsls	r6, r2, #28
 8003cf0:	4605      	mov	r5, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	d454      	bmi.n	8003da0 <__sflush_r+0xb8>
 8003cf6:	684b      	ldr	r3, [r1, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	dc02      	bgt.n	8003d02 <__sflush_r+0x1a>
 8003cfc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	dd48      	ble.n	8003d94 <__sflush_r+0xac>
 8003d02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d04:	2e00      	cmp	r6, #0
 8003d06:	d045      	beq.n	8003d94 <__sflush_r+0xac>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003d0e:	682f      	ldr	r7, [r5, #0]
 8003d10:	6a21      	ldr	r1, [r4, #32]
 8003d12:	602b      	str	r3, [r5, #0]
 8003d14:	d030      	beq.n	8003d78 <__sflush_r+0x90>
 8003d16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	0759      	lsls	r1, r3, #29
 8003d1c:	d505      	bpl.n	8003d2a <__sflush_r+0x42>
 8003d1e:	6863      	ldr	r3, [r4, #4]
 8003d20:	1ad2      	subs	r2, r2, r3
 8003d22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d24:	b10b      	cbz	r3, 8003d2a <__sflush_r+0x42>
 8003d26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d28:	1ad2      	subs	r2, r2, r3
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d30:	6a21      	ldr	r1, [r4, #32]
 8003d32:	47b0      	blx	r6
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	89a3      	ldrh	r3, [r4, #12]
 8003d38:	d106      	bne.n	8003d48 <__sflush_r+0x60>
 8003d3a:	6829      	ldr	r1, [r5, #0]
 8003d3c:	291d      	cmp	r1, #29
 8003d3e:	d82b      	bhi.n	8003d98 <__sflush_r+0xb0>
 8003d40:	4a28      	ldr	r2, [pc, #160]	@ (8003de4 <__sflush_r+0xfc>)
 8003d42:	40ca      	lsrs	r2, r1
 8003d44:	07d6      	lsls	r6, r2, #31
 8003d46:	d527      	bpl.n	8003d98 <__sflush_r+0xb0>
 8003d48:	2200      	movs	r2, #0
 8003d4a:	6062      	str	r2, [r4, #4]
 8003d4c:	6922      	ldr	r2, [r4, #16]
 8003d4e:	04d9      	lsls	r1, r3, #19
 8003d50:	6022      	str	r2, [r4, #0]
 8003d52:	d504      	bpl.n	8003d5e <__sflush_r+0x76>
 8003d54:	1c42      	adds	r2, r0, #1
 8003d56:	d101      	bne.n	8003d5c <__sflush_r+0x74>
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	b903      	cbnz	r3, 8003d5e <__sflush_r+0x76>
 8003d5c:	6560      	str	r0, [r4, #84]	@ 0x54
 8003d5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d60:	602f      	str	r7, [r5, #0]
 8003d62:	b1b9      	cbz	r1, 8003d94 <__sflush_r+0xac>
 8003d64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d68:	4299      	cmp	r1, r3
 8003d6a:	d002      	beq.n	8003d72 <__sflush_r+0x8a>
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	f7ff fbdd 	bl	800352c <_free_r>
 8003d72:	2300      	movs	r3, #0
 8003d74:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d76:	e00d      	b.n	8003d94 <__sflush_r+0xac>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	47b0      	blx	r6
 8003d7e:	4602      	mov	r2, r0
 8003d80:	1c50      	adds	r0, r2, #1
 8003d82:	d1c9      	bne.n	8003d18 <__sflush_r+0x30>
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0c6      	beq.n	8003d18 <__sflush_r+0x30>
 8003d8a:	2b1d      	cmp	r3, #29
 8003d8c:	d001      	beq.n	8003d92 <__sflush_r+0xaa>
 8003d8e:	2b16      	cmp	r3, #22
 8003d90:	d11d      	bne.n	8003dce <__sflush_r+0xe6>
 8003d92:	602f      	str	r7, [r5, #0]
 8003d94:	2000      	movs	r0, #0
 8003d96:	e021      	b.n	8003ddc <__sflush_r+0xf4>
 8003d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d9c:	b21b      	sxth	r3, r3
 8003d9e:	e01a      	b.n	8003dd6 <__sflush_r+0xee>
 8003da0:	690f      	ldr	r7, [r1, #16]
 8003da2:	2f00      	cmp	r7, #0
 8003da4:	d0f6      	beq.n	8003d94 <__sflush_r+0xac>
 8003da6:	0793      	lsls	r3, r2, #30
 8003da8:	bf18      	it	ne
 8003daa:	2300      	movne	r3, #0
 8003dac:	680e      	ldr	r6, [r1, #0]
 8003dae:	bf08      	it	eq
 8003db0:	694b      	ldreq	r3, [r1, #20]
 8003db2:	1bf6      	subs	r6, r6, r7
 8003db4:	600f      	str	r7, [r1, #0]
 8003db6:	608b      	str	r3, [r1, #8]
 8003db8:	2e00      	cmp	r6, #0
 8003dba:	ddeb      	ble.n	8003d94 <__sflush_r+0xac>
 8003dbc:	4633      	mov	r3, r6
 8003dbe:	463a      	mov	r2, r7
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	6a21      	ldr	r1, [r4, #32]
 8003dc4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003dc8:	47e0      	blx	ip
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	dc07      	bgt.n	8003dde <__sflush_r+0xf6>
 8003dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dda:	81a3      	strh	r3, [r4, #12]
 8003ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dde:	4407      	add	r7, r0
 8003de0:	1a36      	subs	r6, r6, r0
 8003de2:	e7e9      	b.n	8003db8 <__sflush_r+0xd0>
 8003de4:	20400001 	.word	0x20400001

08003de8 <_fflush_r>:
 8003de8:	b538      	push	{r3, r4, r5, lr}
 8003dea:	690b      	ldr	r3, [r1, #16]
 8003dec:	4605      	mov	r5, r0
 8003dee:	460c      	mov	r4, r1
 8003df0:	b913      	cbnz	r3, 8003df8 <_fflush_r+0x10>
 8003df2:	2500      	movs	r5, #0
 8003df4:	4628      	mov	r0, r5
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	b118      	cbz	r0, 8003e02 <_fflush_r+0x1a>
 8003dfa:	6a03      	ldr	r3, [r0, #32]
 8003dfc:	b90b      	cbnz	r3, 8003e02 <_fflush_r+0x1a>
 8003dfe:	f7ff f9e1 	bl	80031c4 <__sinit>
 8003e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f3      	beq.n	8003df2 <_fflush_r+0xa>
 8003e0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003e0c:	07d0      	lsls	r0, r2, #31
 8003e0e:	d404      	bmi.n	8003e1a <_fflush_r+0x32>
 8003e10:	0599      	lsls	r1, r3, #22
 8003e12:	d402      	bmi.n	8003e1a <_fflush_r+0x32>
 8003e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e16:	f7ff fb86 	bl	8003526 <__retarget_lock_acquire_recursive>
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	f7ff ff63 	bl	8003ce8 <__sflush_r>
 8003e22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e24:	4605      	mov	r5, r0
 8003e26:	07da      	lsls	r2, r3, #31
 8003e28:	d4e4      	bmi.n	8003df4 <_fflush_r+0xc>
 8003e2a:	89a3      	ldrh	r3, [r4, #12]
 8003e2c:	059b      	lsls	r3, r3, #22
 8003e2e:	d4e1      	bmi.n	8003df4 <_fflush_r+0xc>
 8003e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e32:	f7ff fb79 	bl	8003528 <__retarget_lock_release_recursive>
 8003e36:	e7dd      	b.n	8003df4 <_fflush_r+0xc>

08003e38 <__swhatbuf_r>:
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	460c      	mov	r4, r1
 8003e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e40:	4615      	mov	r5, r2
 8003e42:	2900      	cmp	r1, #0
 8003e44:	461e      	mov	r6, r3
 8003e46:	b096      	sub	sp, #88	@ 0x58
 8003e48:	da0c      	bge.n	8003e64 <__swhatbuf_r+0x2c>
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e52:	bf14      	ite	ne
 8003e54:	2340      	movne	r3, #64	@ 0x40
 8003e56:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	6031      	str	r1, [r6, #0]
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	b016      	add	sp, #88	@ 0x58
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	466a      	mov	r2, sp
 8003e66:	f000 f897 	bl	8003f98 <_fstat_r>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	dbed      	blt.n	8003e4a <__swhatbuf_r+0x12>
 8003e6e:	9901      	ldr	r1, [sp, #4]
 8003e70:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e74:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e78:	4259      	negs	r1, r3
 8003e7a:	4159      	adcs	r1, r3
 8003e7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e80:	e7eb      	b.n	8003e5a <__swhatbuf_r+0x22>

08003e82 <__smakebuf_r>:
 8003e82:	898b      	ldrh	r3, [r1, #12]
 8003e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e86:	079d      	lsls	r5, r3, #30
 8003e88:	4606      	mov	r6, r0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	d507      	bpl.n	8003e9e <__smakebuf_r+0x1c>
 8003e8e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003e92:	6023      	str	r3, [r4, #0]
 8003e94:	6123      	str	r3, [r4, #16]
 8003e96:	2301      	movs	r3, #1
 8003e98:	6163      	str	r3, [r4, #20]
 8003e9a:	b003      	add	sp, #12
 8003e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e9e:	466a      	mov	r2, sp
 8003ea0:	ab01      	add	r3, sp, #4
 8003ea2:	f7ff ffc9 	bl	8003e38 <__swhatbuf_r>
 8003ea6:	9f00      	ldr	r7, [sp, #0]
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	4639      	mov	r1, r7
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7ff fba7 	bl	8003600 <_malloc_r>
 8003eb2:	b948      	cbnz	r0, 8003ec8 <__smakebuf_r+0x46>
 8003eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eb8:	059a      	lsls	r2, r3, #22
 8003eba:	d4ee      	bmi.n	8003e9a <__smakebuf_r+0x18>
 8003ebc:	f023 0303 	bic.w	r3, r3, #3
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	81a3      	strh	r3, [r4, #12]
 8003ec6:	e7e2      	b.n	8003e8e <__smakebuf_r+0xc>
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ed2:	81a3      	strh	r3, [r4, #12]
 8003ed4:	9b01      	ldr	r3, [sp, #4]
 8003ed6:	6020      	str	r0, [r4, #0]
 8003ed8:	b15b      	cbz	r3, 8003ef2 <__smakebuf_r+0x70>
 8003eda:	4630      	mov	r0, r6
 8003edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ee0:	f000 f86c 	bl	8003fbc <_isatty_r>
 8003ee4:	b128      	cbz	r0, 8003ef2 <__smakebuf_r+0x70>
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	f023 0303 	bic.w	r3, r3, #3
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	81a3      	strh	r3, [r4, #12]
 8003ef2:	89a3      	ldrh	r3, [r4, #12]
 8003ef4:	431d      	orrs	r5, r3
 8003ef6:	81a5      	strh	r5, [r4, #12]
 8003ef8:	e7cf      	b.n	8003e9a <__smakebuf_r+0x18>

08003efa <_putc_r>:
 8003efa:	b570      	push	{r4, r5, r6, lr}
 8003efc:	460d      	mov	r5, r1
 8003efe:	4614      	mov	r4, r2
 8003f00:	4606      	mov	r6, r0
 8003f02:	b118      	cbz	r0, 8003f0c <_putc_r+0x12>
 8003f04:	6a03      	ldr	r3, [r0, #32]
 8003f06:	b90b      	cbnz	r3, 8003f0c <_putc_r+0x12>
 8003f08:	f7ff f95c 	bl	80031c4 <__sinit>
 8003f0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f0e:	07d8      	lsls	r0, r3, #31
 8003f10:	d405      	bmi.n	8003f1e <_putc_r+0x24>
 8003f12:	89a3      	ldrh	r3, [r4, #12]
 8003f14:	0599      	lsls	r1, r3, #22
 8003f16:	d402      	bmi.n	8003f1e <_putc_r+0x24>
 8003f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f1a:	f7ff fb04 	bl	8003526 <__retarget_lock_acquire_recursive>
 8003f1e:	68a3      	ldr	r3, [r4, #8]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	60a3      	str	r3, [r4, #8]
 8003f26:	da05      	bge.n	8003f34 <_putc_r+0x3a>
 8003f28:	69a2      	ldr	r2, [r4, #24]
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	db12      	blt.n	8003f54 <_putc_r+0x5a>
 8003f2e:	b2eb      	uxtb	r3, r5
 8003f30:	2b0a      	cmp	r3, #10
 8003f32:	d00f      	beq.n	8003f54 <_putc_r+0x5a>
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	6022      	str	r2, [r4, #0]
 8003f3a:	701d      	strb	r5, [r3, #0]
 8003f3c:	b2ed      	uxtb	r5, r5
 8003f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f40:	07da      	lsls	r2, r3, #31
 8003f42:	d405      	bmi.n	8003f50 <_putc_r+0x56>
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	059b      	lsls	r3, r3, #22
 8003f48:	d402      	bmi.n	8003f50 <_putc_r+0x56>
 8003f4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f4c:	f7ff faec 	bl	8003528 <__retarget_lock_release_recursive>
 8003f50:	4628      	mov	r0, r5
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	4629      	mov	r1, r5
 8003f56:	4622      	mov	r2, r4
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f7ff f9d6 	bl	800330a <__swbuf_r>
 8003f5e:	4605      	mov	r5, r0
 8003f60:	e7ed      	b.n	8003f3e <_putc_r+0x44>

08003f62 <memmove>:
 8003f62:	4288      	cmp	r0, r1
 8003f64:	b510      	push	{r4, lr}
 8003f66:	eb01 0402 	add.w	r4, r1, r2
 8003f6a:	d902      	bls.n	8003f72 <memmove+0x10>
 8003f6c:	4284      	cmp	r4, r0
 8003f6e:	4623      	mov	r3, r4
 8003f70:	d807      	bhi.n	8003f82 <memmove+0x20>
 8003f72:	1e43      	subs	r3, r0, #1
 8003f74:	42a1      	cmp	r1, r4
 8003f76:	d008      	beq.n	8003f8a <memmove+0x28>
 8003f78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f80:	e7f8      	b.n	8003f74 <memmove+0x12>
 8003f82:	4601      	mov	r1, r0
 8003f84:	4402      	add	r2, r0
 8003f86:	428a      	cmp	r2, r1
 8003f88:	d100      	bne.n	8003f8c <memmove+0x2a>
 8003f8a:	bd10      	pop	{r4, pc}
 8003f8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f90:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f94:	e7f7      	b.n	8003f86 <memmove+0x24>
	...

08003f98 <_fstat_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	4d06      	ldr	r5, [pc, #24]	@ (8003fb8 <_fstat_r+0x20>)
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	602b      	str	r3, [r5, #0]
 8003fa6:	f7fc fefb 	bl	8000da0 <_fstat>
 8003faa:	1c43      	adds	r3, r0, #1
 8003fac:	d102      	bne.n	8003fb4 <_fstat_r+0x1c>
 8003fae:	682b      	ldr	r3, [r5, #0]
 8003fb0:	b103      	cbz	r3, 8003fb4 <_fstat_r+0x1c>
 8003fb2:	6023      	str	r3, [r4, #0]
 8003fb4:	bd38      	pop	{r3, r4, r5, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000384 	.word	0x20000384

08003fbc <_isatty_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	4d05      	ldr	r5, [pc, #20]	@ (8003fd8 <_isatty_r+0x1c>)
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	f7fc fef9 	bl	8000dbe <_isatty>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d102      	bne.n	8003fd6 <_isatty_r+0x1a>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	b103      	cbz	r3, 8003fd6 <_isatty_r+0x1a>
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
 8003fd8:	20000384 	.word	0x20000384

08003fdc <_sbrk_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	2300      	movs	r3, #0
 8003fe0:	4d05      	ldr	r5, [pc, #20]	@ (8003ff8 <_sbrk_r+0x1c>)
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	4608      	mov	r0, r1
 8003fe6:	602b      	str	r3, [r5, #0]
 8003fe8:	f7fc ff00 	bl	8000dec <_sbrk>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	d102      	bne.n	8003ff6 <_sbrk_r+0x1a>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	b103      	cbz	r3, 8003ff6 <_sbrk_r+0x1a>
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	bd38      	pop	{r3, r4, r5, pc}
 8003ff8:	20000384 	.word	0x20000384

08003ffc <memchr>:
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	b510      	push	{r4, lr}
 8004000:	b2c9      	uxtb	r1, r1
 8004002:	4402      	add	r2, r0
 8004004:	4293      	cmp	r3, r2
 8004006:	4618      	mov	r0, r3
 8004008:	d101      	bne.n	800400e <memchr+0x12>
 800400a:	2000      	movs	r0, #0
 800400c:	e003      	b.n	8004016 <memchr+0x1a>
 800400e:	7804      	ldrb	r4, [r0, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	428c      	cmp	r4, r1
 8004014:	d1f6      	bne.n	8004004 <memchr+0x8>
 8004016:	bd10      	pop	{r4, pc}

08004018 <memcpy>:
 8004018:	440a      	add	r2, r1
 800401a:	4291      	cmp	r1, r2
 800401c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004020:	d100      	bne.n	8004024 <memcpy+0xc>
 8004022:	4770      	bx	lr
 8004024:	b510      	push	{r4, lr}
 8004026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800402a:	4291      	cmp	r1, r2
 800402c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004030:	d1f9      	bne.n	8004026 <memcpy+0xe>
 8004032:	bd10      	pop	{r4, pc}

08004034 <_realloc_r>:
 8004034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004038:	4607      	mov	r7, r0
 800403a:	4614      	mov	r4, r2
 800403c:	460d      	mov	r5, r1
 800403e:	b921      	cbnz	r1, 800404a <_realloc_r+0x16>
 8004040:	4611      	mov	r1, r2
 8004042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004046:	f7ff badb 	b.w	8003600 <_malloc_r>
 800404a:	b92a      	cbnz	r2, 8004058 <_realloc_r+0x24>
 800404c:	f7ff fa6e 	bl	800352c <_free_r>
 8004050:	4625      	mov	r5, r4
 8004052:	4628      	mov	r0, r5
 8004054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004058:	f000 f81a 	bl	8004090 <_malloc_usable_size_r>
 800405c:	4284      	cmp	r4, r0
 800405e:	4606      	mov	r6, r0
 8004060:	d802      	bhi.n	8004068 <_realloc_r+0x34>
 8004062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004066:	d8f4      	bhi.n	8004052 <_realloc_r+0x1e>
 8004068:	4621      	mov	r1, r4
 800406a:	4638      	mov	r0, r7
 800406c:	f7ff fac8 	bl	8003600 <_malloc_r>
 8004070:	4680      	mov	r8, r0
 8004072:	b908      	cbnz	r0, 8004078 <_realloc_r+0x44>
 8004074:	4645      	mov	r5, r8
 8004076:	e7ec      	b.n	8004052 <_realloc_r+0x1e>
 8004078:	42b4      	cmp	r4, r6
 800407a:	4622      	mov	r2, r4
 800407c:	4629      	mov	r1, r5
 800407e:	bf28      	it	cs
 8004080:	4632      	movcs	r2, r6
 8004082:	f7ff ffc9 	bl	8004018 <memcpy>
 8004086:	4629      	mov	r1, r5
 8004088:	4638      	mov	r0, r7
 800408a:	f7ff fa4f 	bl	800352c <_free_r>
 800408e:	e7f1      	b.n	8004074 <_realloc_r+0x40>

08004090 <_malloc_usable_size_r>:
 8004090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004094:	1f18      	subs	r0, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	bfbc      	itt	lt
 800409a:	580b      	ldrlt	r3, [r1, r0]
 800409c:	18c0      	addlt	r0, r0, r3
 800409e:	4770      	bx	lr

080040a0 <_init>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr

080040ac <_fini>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr
