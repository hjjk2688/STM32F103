
Smart_Car_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000386c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003978  08003978  00004978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a00  08003a00  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003a00  08003a00  0000506c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003a00  08003a00  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a00  08003a00  00004a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a04  08003a04  00004a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003a08  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000006c  08003a74  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08003a74  000052c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2ea  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dfa  00000000  00000000  0001137f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00013180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a20  00000000  00000000  00013e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187af  00000000  00000000  00014898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000def5  00000000  00000000  0002d047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c571  00000000  00000000  0003af3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c74ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c38  00000000  00000000  000c74f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cb128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003960 	.word	0x08003960

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003960 	.word	0x08003960

0800014c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f002 f93c 	bl	80023e0 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f002 f935 	bl	80023e0 <HAL_UART_Transmit>

	return ch;
 8000176:	687b      	ldr	r3, [r7, #4]

}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08003978 	.word	0x08003978
 8000184:	20000118 	.word	0x20000118

08000188 <Smartcar_forward>:

void Smartcar_forward(){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RR_F_GPIO_Port, RR_F_Pin, 1); // PB8  뒤앞   21 22  RR_F /Right_RearForward
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000192:	4816      	ldr	r0, [pc, #88]	@ (80001ec <Smartcar_forward+0x64>)
 8000194:	f001 f9c5 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_B_GPIO_Port, RR_B_Pin, 0); // PB9  뒤백	RR_B Right_RearBack
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800019e:	4813      	ldr	r0, [pc, #76]	@ (80001ec <Smartcar_forward+0x64>)
 80001a0:	f001 f9bf 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RF_F_GPIO_Port, RF_F_Pin, 1); // PB4 앞앞  17 16 RF_F
 80001a4:	2201      	movs	r2, #1
 80001a6:	2110      	movs	r1, #16
 80001a8:	4810      	ldr	r0, [pc, #64]	@ (80001ec <Smartcar_forward+0x64>)
 80001aa:	f001 f9ba 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_B_GPIO_Port, RF_B_Pin, 0); // PB5 앞백 RF_B
 80001ae:	2200      	movs	r2, #0
 80001b0:	2120      	movs	r1, #32
 80001b2:	480e      	ldr	r0, [pc, #56]	@ (80001ec <Smartcar_forward+0x64>)
 80001b4:	f001 f9b5 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LR_F_GPIO_Port, LR_F_Pin, 1); // PA9  뒤앞 LR_F 12  27 left_RearForward
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001be:	480c      	ldr	r0, [pc, #48]	@ (80001f0 <Smartcar_forward+0x68>)
 80001c0:	f001 f9af 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_B_GPIO_Port, LR_B_Pin, 0); // PB10 뒤백 LR_B left_RearBack
 80001c4:	2200      	movs	r2, #0
 80001c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001ca:	4808      	ldr	r0, [pc, #32]	@ (80001ec <Smartcar_forward+0x64>)
 80001cc:	f001 f9a9 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LF_F_GPIO_Port, LF_F_Pin, 1); // 앞앞 PB3 25 26 LF_F left_ForwardForward
 80001d0:	2201      	movs	r2, #1
 80001d2:	2108      	movs	r1, #8
 80001d4:	4805      	ldr	r0, [pc, #20]	@ (80001ec <Smartcar_forward+0x64>)
 80001d6:	f001 f9a4 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_B_GPIO_Port, LF_B_Pin, 0); // 앞백 PA10 LF_B left_ForwardBack
 80001da:	2200      	movs	r2, #0
 80001dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <Smartcar_forward+0x68>)
 80001e2:	f001 f99e 	bl	8001522 <HAL_GPIO_WritePin>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010c00 	.word	0x40010c00
 80001f0:	40010800 	.word	0x40010800

080001f4 <smartcar_back>:

void smartcar_back(){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RR_F_GPIO_Port, RR_F_Pin, 0); // PB8  뒤앞   21 22  RR_F /Right_RearForward
 80001f8:	2200      	movs	r2, #0
 80001fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001fe:	4816      	ldr	r0, [pc, #88]	@ (8000258 <smartcar_back+0x64>)
 8000200:	f001 f98f 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_B_GPIO_Port, RR_B_Pin, 1); // PB9  뒤백	RR_B Right_RearBack
 8000204:	2201      	movs	r2, #1
 8000206:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800020a:	4813      	ldr	r0, [pc, #76]	@ (8000258 <smartcar_back+0x64>)
 800020c:	f001 f989 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RF_F_GPIO_Port, RF_F_Pin, 0); // PB4 앞앞  17 16 RF_F
 8000210:	2200      	movs	r2, #0
 8000212:	2110      	movs	r1, #16
 8000214:	4810      	ldr	r0, [pc, #64]	@ (8000258 <smartcar_back+0x64>)
 8000216:	f001 f984 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_B_GPIO_Port, RF_B_Pin, 1); // PB5 앞백 RF_B
 800021a:	2201      	movs	r2, #1
 800021c:	2120      	movs	r1, #32
 800021e:	480e      	ldr	r0, [pc, #56]	@ (8000258 <smartcar_back+0x64>)
 8000220:	f001 f97f 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LR_F_GPIO_Port, LR_F_Pin, 0); // PA9  뒤앞 LR_F 12  27 left_RearForward
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800022a:	480c      	ldr	r0, [pc, #48]	@ (800025c <smartcar_back+0x68>)
 800022c:	f001 f979 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_B_GPIO_Port, LR_B_Pin, 1); // PB10 뒤백 LR_B left_RearBack
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000236:	4808      	ldr	r0, [pc, #32]	@ (8000258 <smartcar_back+0x64>)
 8000238:	f001 f973 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LF_F_GPIO_Port, LF_F_Pin, 0); // 앞앞 PB3 25 26 LF_F left_ForwardForward
 800023c:	2200      	movs	r2, #0
 800023e:	2108      	movs	r1, #8
 8000240:	4805      	ldr	r0, [pc, #20]	@ (8000258 <smartcar_back+0x64>)
 8000242:	f001 f96e 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_B_GPIO_Port, LF_B_Pin, 1); // 앞백 PA10 LF_B left_ForwardBack
 8000246:	2201      	movs	r2, #1
 8000248:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800024c:	4803      	ldr	r0, [pc, #12]	@ (800025c <smartcar_back+0x68>)
 800024e:	f001 f968 	bl	8001522 <HAL_GPIO_WritePin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010c00 	.word	0x40010c00
 800025c:	40010800 	.word	0x40010800

08000260 <smartcar_left>:

void smartcar_left(){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RR_F_GPIO_Port, RR_F_Pin, 1); // PB8  뒤앞   21 22  RR_F /Right_RearForward
 8000264:	2201      	movs	r2, #1
 8000266:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800026a:	4816      	ldr	r0, [pc, #88]	@ (80002c4 <smartcar_left+0x64>)
 800026c:	f001 f959 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_B_GPIO_Port, RR_B_Pin, 0); // PB9  뒤백	RR_B Right_RearBack
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000276:	4813      	ldr	r0, [pc, #76]	@ (80002c4 <smartcar_left+0x64>)
 8000278:	f001 f953 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RF_F_GPIO_Port, RF_F_Pin, 1); // PB4 앞앞  17 16 RF_F
 800027c:	2201      	movs	r2, #1
 800027e:	2110      	movs	r1, #16
 8000280:	4810      	ldr	r0, [pc, #64]	@ (80002c4 <smartcar_left+0x64>)
 8000282:	f001 f94e 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_B_GPIO_Port, RF_B_Pin, 0); // PB5 앞백 RF_B
 8000286:	2200      	movs	r2, #0
 8000288:	2120      	movs	r1, #32
 800028a:	480e      	ldr	r0, [pc, #56]	@ (80002c4 <smartcar_left+0x64>)
 800028c:	f001 f949 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LR_F_GPIO_Port, LR_F_Pin, 0); // PA9  뒤앞 LR_F 12  27 left_RearForward
 8000290:	2200      	movs	r2, #0
 8000292:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000296:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <smartcar_left+0x68>)
 8000298:	f001 f943 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_B_GPIO_Port, LR_B_Pin, 1); // PB10 뒤백 LR_B left_RearBack
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002a2:	4808      	ldr	r0, [pc, #32]	@ (80002c4 <smartcar_left+0x64>)
 80002a4:	f001 f93d 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LF_F_GPIO_Port, LF_F_Pin, 0); // 앞앞 PB3 25 26 LF_F left_ForwardForward
 80002a8:	2200      	movs	r2, #0
 80002aa:	2108      	movs	r1, #8
 80002ac:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <smartcar_left+0x64>)
 80002ae:	f001 f938 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_B_GPIO_Port, LF_B_Pin, 1); // 앞백 PA10 LF_B left_ForwardBack
 80002b2:	2201      	movs	r2, #1
 80002b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002b8:	4803      	ldr	r0, [pc, #12]	@ (80002c8 <smartcar_left+0x68>)
 80002ba:	f001 f932 	bl	8001522 <HAL_GPIO_WritePin>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010c00 	.word	0x40010c00
 80002c8:	40010800 	.word	0x40010800

080002cc <smartcar_right>:

void smartcar_right(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RR_F_GPIO_Port, RR_F_Pin, 0); // PB8  뒤앞   21 22  RR_F /Right_RearForward
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002d6:	4816      	ldr	r0, [pc, #88]	@ (8000330 <smartcar_right+0x64>)
 80002d8:	f001 f923 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_B_GPIO_Port, RR_B_Pin, 1); // PB9  뒤백	RR_B Right_RearBack
 80002dc:	2201      	movs	r2, #1
 80002de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002e2:	4813      	ldr	r0, [pc, #76]	@ (8000330 <smartcar_right+0x64>)
 80002e4:	f001 f91d 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RF_F_GPIO_Port, RF_F_Pin, 0); // PB4 앞앞  17 16 RF_F
 80002e8:	2200      	movs	r2, #0
 80002ea:	2110      	movs	r1, #16
 80002ec:	4810      	ldr	r0, [pc, #64]	@ (8000330 <smartcar_right+0x64>)
 80002ee:	f001 f918 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_B_GPIO_Port, RF_B_Pin, 1); // PB5 앞백 RF_B
 80002f2:	2201      	movs	r2, #1
 80002f4:	2120      	movs	r1, #32
 80002f6:	480e      	ldr	r0, [pc, #56]	@ (8000330 <smartcar_right+0x64>)
 80002f8:	f001 f913 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LR_F_GPIO_Port, LR_F_Pin, 1); // PA9  뒤앞 LR_F 12  27 left_RearForward
 80002fc:	2201      	movs	r2, #1
 80002fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000302:	480c      	ldr	r0, [pc, #48]	@ (8000334 <smartcar_right+0x68>)
 8000304:	f001 f90d 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_B_GPIO_Port, LR_B_Pin, 0); // PB10 뒤백 LR_B left_RearBack
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800030e:	4808      	ldr	r0, [pc, #32]	@ (8000330 <smartcar_right+0x64>)
 8000310:	f001 f907 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LF_F_GPIO_Port, LF_F_Pin, 1); // 앞앞 PB3 25 26 LF_F left_ForwardForward
 8000314:	2201      	movs	r2, #1
 8000316:	2108      	movs	r1, #8
 8000318:	4805      	ldr	r0, [pc, #20]	@ (8000330 <smartcar_right+0x64>)
 800031a:	f001 f902 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_B_GPIO_Port, LF_B_Pin, 0); // 앞백 PA10 LF_B left_ForwardBack
 800031e:	2200      	movs	r2, #0
 8000320:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000324:	4803      	ldr	r0, [pc, #12]	@ (8000334 <smartcar_right+0x68>)
 8000326:	f001 f8fc 	bl	8001522 <HAL_GPIO_WritePin>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40010c00 	.word	0x40010c00
 8000334:	40010800 	.word	0x40010800

08000338 <smartcar_stop>:

void smartcar_stop(){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RR_F_GPIO_Port, RR_F_Pin, 0); // PB8  뒤앞   21 22  RR_F /Right_RearForward
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000342:	4816      	ldr	r0, [pc, #88]	@ (800039c <smartcar_stop+0x64>)
 8000344:	f001 f8ed 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_B_GPIO_Port, RR_B_Pin, 0); // PB9  뒤백	RR_B Right_RearBack
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800034e:	4813      	ldr	r0, [pc, #76]	@ (800039c <smartcar_stop+0x64>)
 8000350:	f001 f8e7 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RF_F_GPIO_Port, RF_F_Pin, 0); // PB4 앞앞  17 16 RF_F
 8000354:	2200      	movs	r2, #0
 8000356:	2110      	movs	r1, #16
 8000358:	4810      	ldr	r0, [pc, #64]	@ (800039c <smartcar_stop+0x64>)
 800035a:	f001 f8e2 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_B_GPIO_Port, RF_B_Pin, 0); // PB5 앞백 RF_B
 800035e:	2200      	movs	r2, #0
 8000360:	2120      	movs	r1, #32
 8000362:	480e      	ldr	r0, [pc, #56]	@ (800039c <smartcar_stop+0x64>)
 8000364:	f001 f8dd 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LR_F_GPIO_Port, LR_F_Pin, 0); // PA9  뒤앞 LR_F 12  27 left_RearForward
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800036e:	480c      	ldr	r0, [pc, #48]	@ (80003a0 <smartcar_stop+0x68>)
 8000370:	f001 f8d7 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_B_GPIO_Port, LR_B_Pin, 0); // PB10 뒤백 LR_B left_RearBack
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800037a:	4808      	ldr	r0, [pc, #32]	@ (800039c <smartcar_stop+0x64>)
 800037c:	f001 f8d1 	bl	8001522 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LF_F_GPIO_Port, LF_F_Pin, 0); // 앞앞 PB3 25 26 LF_F left_ForwardForward
 8000380:	2200      	movs	r2, #0
 8000382:	2108      	movs	r1, #8
 8000384:	4805      	ldr	r0, [pc, #20]	@ (800039c <smartcar_stop+0x64>)
 8000386:	f001 f8cc 	bl	8001522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_B_GPIO_Port, LF_B_Pin, 0); // 앞백 PA10 LF_B left_ForwardBack
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000390:	4803      	ldr	r0, [pc, #12]	@ (80003a0 <smartcar_stop+0x68>)
 8000392:	f001 f8c6 	bl	8001522 <HAL_GPIO_WritePin>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	40010800 	.word	0x40010800

080003a4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
    // 수신 인터럽트가 발생한 UART가 USART2인지 확인
    if (huart->Instance == USART2)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a09      	ldr	r2, [pc, #36]	@ (80003d8 <HAL_UART_RxCpltCallback+0x34>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d10c      	bne.n	80003d0 <HAL_UART_RxCpltCallback+0x2c>
    {
        new_data_flag = 1;              // 새 데이터가 있다고 플래그 설정
 80003b6:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <HAL_UART_RxCpltCallback+0x38>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]
        last_rx_time = HAL_GetTick();   // 현재 시간(ms)을 기록
 80003bc:	f000 fd28 	bl	8000e10 <HAL_GetTick>
 80003c0:	4603      	mov	r3, r0
 80003c2:	4a07      	ldr	r2, [pc, #28]	@ (80003e0 <HAL_UART_RxCpltCallback+0x3c>)
 80003c4:	6013      	str	r3, [r2, #0]

        // 다음 1바이트를 수신하기 위해 다시 인터럽트를 활성화
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data, 1);
 80003c6:	2201      	movs	r2, #1
 80003c8:	4906      	ldr	r1, [pc, #24]	@ (80003e4 <HAL_UART_RxCpltCallback+0x40>)
 80003ca:	4807      	ldr	r0, [pc, #28]	@ (80003e8 <HAL_UART_RxCpltCallback+0x44>)
 80003cc:	f002 f893 	bl	80024f6 <HAL_UART_Receive_IT>
    }
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40004400 	.word	0x40004400
 80003dc:	20000161 	.word	0x20000161
 80003e0:	20000164 	.word	0x20000164
 80003e4:	20000160 	.word	0x20000160
 80003e8:	20000118 	.word	0x20000118

080003ec <timer_start>:

void timer_start(TIM_HandleTypeDef * htim) { //초기화
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f001 fd2f 	bl	8001e58 <HAL_TIM_Base_Start>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <delay_us>:

void delay_us(uint16_t us, TIM_HandleTypeDef * htim) { // us 딜레이
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	6039      	str	r1, [r7, #0]
 800040c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0); // initislize counter to start from 0
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2200      	movs	r2, #0
 8000414:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(htim)) < us)
 8000416:	bf00      	nop
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800041e:	88fb      	ldrh	r3, [r7, #6]
 8000420:	429a      	cmp	r2, r3
 8000422:	d3f9      	bcc.n	8000418 <delay_us+0x16>
		; // wait count until us
}
 8000424:	bf00      	nop
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <trig>:

void trig(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin, TIM_HandleTypeDef * htim) { // 트리거
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	460b      	mov	r3, r1
 800043a:	607a      	str	r2, [r7, #4]
 800043c:	817b      	strh	r3, [r7, #10]
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, HIGH);
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <trig+0x40>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	b2da      	uxtb	r2, r3
 8000444:	897b      	ldrh	r3, [r7, #10]
 8000446:	4619      	mov	r1, r3
 8000448:	68f8      	ldr	r0, [r7, #12]
 800044a:	f001 f86a 	bl	8001522 <HAL_GPIO_WritePin>

	delay_us(10,htim);
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	200a      	movs	r0, #10
 8000452:	f7ff ffd6 	bl	8000402 <delay_us>
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, LOW);
 8000456:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <trig+0x44>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	b2da      	uxtb	r2, r3
 800045c:	897b      	ldrh	r3, [r7, #10]
 800045e:	4619      	mov	r1, r3
 8000460:	68f8      	ldr	r0, [r7, #12]
 8000462:	f001 f85e 	bl	8001522 <HAL_GPIO_WritePin>
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000000 	.word	0x20000000
 8000474:	20000168 	.word	0x20000168

08000478 <echo>:

long unsigned int echo(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin, TIM_HandleTypeDef * htim) { // 에코
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	460b      	mov	r3, r1
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	817b      	strh	r3, [r7, #10]
	long unsigned int echo = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

	while (HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin) == LOW) {
 800048a:	bf00      	nop
 800048c:	897b      	ldrh	r3, [r7, #10]
 800048e:	4619      	mov	r1, r3
 8000490:	68f8      	ldr	r0, [r7, #12]
 8000492:	f001 f82f 	bl	80014f4 <HAL_GPIO_ReadPin>
 8000496:	4603      	mov	r3, r0
 8000498:	461a      	mov	r2, r3
 800049a:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <echo+0x70>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d0f4      	beq.n	800048c <echo+0x14>
	}
	__HAL_TIM_SET_COUNTER(htim, 0);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2200      	movs	r2, #0
 80004a8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin) == HIGH)
 80004aa:	bf00      	nop
 80004ac:	897b      	ldrh	r3, [r7, #10]
 80004ae:	4619      	mov	r1, r3
 80004b0:	68f8      	ldr	r0, [r7, #12]
 80004b2:	f001 f81f 	bl	80014f4 <HAL_GPIO_ReadPin>
 80004b6:	4603      	mov	r3, r0
 80004b8:	461a      	mov	r2, r3
 80004ba:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <echo+0x74>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d0f4      	beq.n	80004ac <echo+0x34>
		;
	echo = __HAL_TIM_GET_COUNTER(htim);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004c8:	617b      	str	r3, [r7, #20]
	if (echo >= 240 && echo <= 23000)
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	2bef      	cmp	r3, #239	@ 0xef
 80004ce:	d906      	bls.n	80004de <echo+0x66>
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	f645 12d8 	movw	r2, #23000	@ 0x59d8
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d801      	bhi.n	80004de <echo+0x66>
		return echo;
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	e000      	b.n	80004e0 <echo+0x68>
	else
		return 0;
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3718      	adds	r7, #24
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000168 	.word	0x20000168
 80004ec:	20000000 	.word	0x20000000

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fc33 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f8bf 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f9c5 	bl	800088c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000502:	f000 f999 	bl	8000838 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000506:	f000 f8fb 	bl	8000700 <MX_TIM1_Init>
  MX_TIM2_Init();
 800050a:	f000 f949 	bl	80007a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	4949      	ldr	r1, [pc, #292]	@ (8000638 <main+0x148>)
 8000512:	484a      	ldr	r0, [pc, #296]	@ (800063c <main+0x14c>)
 8000514:	f001 ffef 	bl	80024f6 <HAL_UART_Receive_IT>


	timer_start(&htim1);
 8000518:	4849      	ldr	r0, [pc, #292]	@ (8000640 <main+0x150>)
 800051a:	f7ff ff67 	bl	80003ec <timer_start>
	timer_start(&htim2);
 800051e:	4849      	ldr	r0, [pc, #292]	@ (8000644 <main+0x154>)
 8000520:	f7ff ff64 	bl	80003ec <timer_start>

	printf("Ranging with HC-SR04\n");
 8000524:	4848      	ldr	r0, [pc, #288]	@ (8000648 <main+0x158>)
 8000526:	f002 fe8d 	bl	8003244 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (new_data_flag)
 800052a:	4b48      	ldr	r3, [pc, #288]	@ (800064c <main+0x15c>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d03e      	beq.n	80005b2 <main+0xc2>
	  {
		  new_data_flag = 0; // 플래그 처리 완료
 8000534:	4b45      	ldr	r3, [pc, #276]	@ (800064c <main+0x15c>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]

		  if(rx_data == 'w'){
 800053a:	4b3f      	ldr	r3, [pc, #252]	@ (8000638 <main+0x148>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b77      	cmp	r3, #119	@ 0x77
 8000542:	d105      	bne.n	8000550 <main+0x60>
			  printf("forward\n");
 8000544:	4842      	ldr	r0, [pc, #264]	@ (8000650 <main+0x160>)
 8000546:	f002 fe7d 	bl	8003244 <puts>
			  Smartcar_forward();
 800054a:	f7ff fe1d 	bl	8000188 <Smartcar_forward>
 800054e:	e030      	b.n	80005b2 <main+0xc2>
		  }
		  else if(rx_data == 'a'){
 8000550:	4b39      	ldr	r3, [pc, #228]	@ (8000638 <main+0x148>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b61      	cmp	r3, #97	@ 0x61
 8000558:	d105      	bne.n	8000566 <main+0x76>
			  printf("left\n");
 800055a:	483e      	ldr	r0, [pc, #248]	@ (8000654 <main+0x164>)
 800055c:	f002 fe72 	bl	8003244 <puts>
			  smartcar_left();
 8000560:	f7ff fe7e 	bl	8000260 <smartcar_left>
 8000564:	e025      	b.n	80005b2 <main+0xc2>
		  }
		  else if(rx_data == 'd'){
 8000566:	4b34      	ldr	r3, [pc, #208]	@ (8000638 <main+0x148>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2b64      	cmp	r3, #100	@ 0x64
 800056e:	d105      	bne.n	800057c <main+0x8c>
			  printf("right\n");
 8000570:	4839      	ldr	r0, [pc, #228]	@ (8000658 <main+0x168>)
 8000572:	f002 fe67 	bl	8003244 <puts>
			  smartcar_right();
 8000576:	f7ff fea9 	bl	80002cc <smartcar_right>
 800057a:	e01a      	b.n	80005b2 <main+0xc2>
		  }
		  else if(rx_data == 's'){
 800057c:	4b2e      	ldr	r3, [pc, #184]	@ (8000638 <main+0x148>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b73      	cmp	r3, #115	@ 0x73
 8000584:	d105      	bne.n	8000592 <main+0xa2>
			  printf("back\n");
 8000586:	4835      	ldr	r0, [pc, #212]	@ (800065c <main+0x16c>)
 8000588:	f002 fe5c 	bl	8003244 <puts>
			  smartcar_back();
 800058c:	f7ff fe32 	bl	80001f4 <smartcar_back>
 8000590:	e00f      	b.n	80005b2 <main+0xc2>
		  }
		  else if(rx_data == 'f'){
 8000592:	4b29      	ldr	r3, [pc, #164]	@ (8000638 <main+0x148>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b66      	cmp	r3, #102	@ 0x66
 800059a:	d105      	bne.n	80005a8 <main+0xb8>
			  printf("stop\n");
 800059c:	4830      	ldr	r0, [pc, #192]	@ (8000660 <main+0x170>)
 800059e:	f002 fe51 	bl	8003244 <puts>
			  smartcar_stop();
 80005a2:	f7ff fec9 	bl	8000338 <smartcar_stop>
 80005a6:	e004      	b.n	80005b2 <main+0xc2>
		  }
		  else {
			  printf("Invalid value, stopping\n");
 80005a8:	482e      	ldr	r0, [pc, #184]	@ (8000664 <main+0x174>)
 80005aa:	f002 fe4b 	bl	8003244 <puts>
			  smartcar_stop();
 80005ae:	f7ff fec3 	bl	8000338 <smartcar_stop>
		  }
	  }

	  // 마지막 데이터 수신 후 100ms가 지났으면 자동차를 멈춤
	  if (HAL_GetTick() - last_rx_time > 100)
 80005b2:	f000 fc2d 	bl	8000e10 <HAL_GetTick>
 80005b6:	4602      	mov	r2, r0
 80005b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <main+0x178>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	2b64      	cmp	r3, #100	@ 0x64
 80005c0:	d901      	bls.n	80005c6 <main+0xd6>
	  {
		  smartcar_stop();
 80005c2:	f7ff feb9 	bl	8000338 <smartcar_stop>
	  }
		trig(Trigger_GPIO_Port,Trigger_Pin,&htim1);
 80005c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000640 <main+0x150>)
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	4828      	ldr	r0, [pc, #160]	@ (800066c <main+0x17c>)
 80005cc:	f7ff ff30 	bl	8000430 <trig>
		echo_time_right = echo(Echo_GPIO_Port, Echo_Pin,&htim1);
 80005d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000640 <main+0x150>)
 80005d2:	2101      	movs	r1, #1
 80005d4:	4826      	ldr	r0, [pc, #152]	@ (8000670 <main+0x180>)
 80005d6:	f7ff ff4f 	bl	8000478 <echo>
 80005da:	60f8      	str	r0, [r7, #12]

		trig(Trigger2_GPIO_Port,Trigger2_Pin,&htim2);
 80005dc:	4a19      	ldr	r2, [pc, #100]	@ (8000644 <main+0x154>)
 80005de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e2:	4824      	ldr	r0, [pc, #144]	@ (8000674 <main+0x184>)
 80005e4:	f7ff ff24 	bl	8000430 <trig>
		echo_time_left = echo(Echo2_GPIO_Port, Echo2_Pin,&htim2);
 80005e8:	4a16      	ldr	r2, [pc, #88]	@ (8000644 <main+0x154>)
 80005ea:	2110      	movs	r1, #16
 80005ec:	4821      	ldr	r0, [pc, #132]	@ (8000674 <main+0x184>)
 80005ee:	f7ff ff43 	bl	8000478 <echo>
 80005f2:	60b8      	str	r0, [r7, #8]

	    if( echo_time_right != 0 || echo_time_left !=0){
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d102      	bne.n	8000600 <main+0x110>
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d016      	beq.n	800062e <main+0x13e>
	        dist_right = (int)(17 * echo_time_right / 100);
 8000600:	68fa      	ldr	r2, [r7, #12]
 8000602:	4613      	mov	r3, r2
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	4413      	add	r3, r2
 8000608:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <main+0x188>)
 800060a:	fba2 2303 	umull	r2, r3, r2, r3
 800060e:	095b      	lsrs	r3, r3, #5
 8000610:	607b      	str	r3, [r7, #4]
	        dist_left = (int)(17 * echo_time_left / 100);
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	4613      	mov	r3, r2
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	4413      	add	r3, r2
 800061a:	4a17      	ldr	r2, [pc, #92]	@ (8000678 <main+0x188>)
 800061c:	fba2 2303 	umull	r2, r3, r2, r3
 8000620:	095b      	lsrs	r3, r3, #5
 8000622:	603b      	str	r3, [r7, #0]
	        //printf("1: Distance = %d(mm) | 2: Distance = %d(mm)\n", dist_right,dist_left);
	        HAL_Delay(500);
 8000624:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000628:	f000 fbfc 	bl	8000e24 <HAL_Delay>
 800062c:	e003      	b.n	8000636 <main+0x146>
	    }
	    else {
	    	//printf("Out of Range!\n");
	    	HAL_Delay(500);
 800062e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000632:	f000 fbf7 	bl	8000e24 <HAL_Delay>
	  if (new_data_flag)
 8000636:	e778      	b.n	800052a <main+0x3a>
 8000638:	20000160 	.word	0x20000160
 800063c:	20000118 	.word	0x20000118
 8000640:	20000088 	.word	0x20000088
 8000644:	200000d0 	.word	0x200000d0
 8000648:	0800397c 	.word	0x0800397c
 800064c:	20000161 	.word	0x20000161
 8000650:	08003994 	.word	0x08003994
 8000654:	0800399c 	.word	0x0800399c
 8000658:	080039a4 	.word	0x080039a4
 800065c:	080039ac 	.word	0x080039ac
 8000660:	080039b4 	.word	0x080039b4
 8000664:	080039bc 	.word	0x080039bc
 8000668:	20000164 	.word	0x20000164
 800066c:	40011000 	.word	0x40011000
 8000670:	40010c00 	.word	0x40010c00
 8000674:	40010800 	.word	0x40010800
 8000678:	51eb851f 	.word	0x51eb851f

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b090      	sub	sp, #64	@ 0x40
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	2228      	movs	r2, #40	@ 0x28
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f002 feba 	bl	8003404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069e:	2302      	movs	r3, #2
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a2:	2301      	movs	r3, #1
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006ae:	2300      	movs	r3, #0
 80006b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006b2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0318 	add.w	r3, r7, #24
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 ff6b 	bl	8001598 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006c8:	f000 f992 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 f9d8 	bl	8001a9c <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006f2:	f000 f97d 	bl	80009f0 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3740      	adds	r7, #64	@ 0x40
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_TIM1_Init+0x98>)
 800071e:	4a1f      	ldr	r2, [pc, #124]	@ (800079c <MX_TIM1_Init+0x9c>)
 8000720:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000722:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <MX_TIM1_Init+0x98>)
 8000724:	223f      	movs	r2, #63	@ 0x3f
 8000726:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_TIM1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800072e:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_TIM1_Init+0x98>)
 8000730:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_TIM1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800073c:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_TIM1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_TIM1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000748:	4813      	ldr	r0, [pc, #76]	@ (8000798 <MX_TIM1_Init+0x98>)
 800074a:	f001 fb35 	bl	8001db8 <HAL_TIM_Base_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000754:	f000 f94c 	bl	80009f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	480c      	ldr	r0, [pc, #48]	@ (8000798 <MX_TIM1_Init+0x98>)
 8000766:	f001 fbc1 	bl	8001eec <HAL_TIM_ConfigClockSource>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000770:	f000 f93e 	bl	80009f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_TIM1_Init+0x98>)
 8000782:	f001 fd7f 	bl	8002284 <HAL_TIMEx_MasterConfigSynchronization>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800078c:	f000 f930 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000088 	.word	0x20000088
 800079c:	40012c00 	.word	0x40012c00

080007a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_TIM2_Init+0x94>)
 80007be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_TIM2_Init+0x94>)
 80007c6:	223f      	movs	r2, #63	@ 0x3f
 80007c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_TIM2_Init+0x94>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007d0:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_TIM2_Init+0x94>)
 80007d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d8:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <MX_TIM2_Init+0x94>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007de:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_TIM2_Init+0x94>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e4:	4813      	ldr	r0, [pc, #76]	@ (8000834 <MX_TIM2_Init+0x94>)
 80007e6:	f001 fae7 	bl	8001db8 <HAL_TIM_Base_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007f0:	f000 f8fe 	bl	80009f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	4619      	mov	r1, r3
 8000800:	480c      	ldr	r0, [pc, #48]	@ (8000834 <MX_TIM2_Init+0x94>)
 8000802:	f001 fb73 	bl	8001eec <HAL_TIM_ConfigClockSource>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800080c:	f000 f8f0 	bl	80009f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_TIM2_Init+0x94>)
 800081e:	f001 fd31 	bl	8002284 <HAL_TIMEx_MasterConfigSynchronization>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000828:	f000 f8e2 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000d0 	.word	0x200000d0

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_USART2_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000870:	f001 fd66 	bl	8002340 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f8b9 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000118 	.word	0x20000118
 8000888:	40004400 	.word	0x40004400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a0:	4b4e      	ldr	r3, [pc, #312]	@ (80009dc <MX_GPIO_Init+0x150>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a4d      	ldr	r2, [pc, #308]	@ (80009dc <MX_GPIO_Init+0x150>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b4b      	ldr	r3, [pc, #300]	@ (80009dc <MX_GPIO_Init+0x150>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0310 	and.w	r3, r3, #16
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b8:	4b48      	ldr	r3, [pc, #288]	@ (80009dc <MX_GPIO_Init+0x150>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a47      	ldr	r2, [pc, #284]	@ (80009dc <MX_GPIO_Init+0x150>)
 80008be:	f043 0320 	orr.w	r3, r3, #32
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b45      	ldr	r3, [pc, #276]	@ (80009dc <MX_GPIO_Init+0x150>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b42      	ldr	r3, [pc, #264]	@ (80009dc <MX_GPIO_Init+0x150>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a41      	ldr	r2, [pc, #260]	@ (80009dc <MX_GPIO_Init+0x150>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b3f      	ldr	r3, [pc, #252]	@ (80009dc <MX_GPIO_Init+0x150>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e8:	4b3c      	ldr	r3, [pc, #240]	@ (80009dc <MX_GPIO_Init+0x150>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a3b      	ldr	r2, [pc, #236]	@ (80009dc <MX_GPIO_Init+0x150>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b39      	ldr	r3, [pc, #228]	@ (80009dc <MX_GPIO_Init+0x150>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0308 	and.w	r3, r3, #8
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LD2_Pin|Trigger2_Pin|LR_F_Pin
 8000900:	2200      	movs	r2, #0
 8000902:	f240 7121 	movw	r1, #1825	@ 0x721
 8000906:	4836      	ldr	r0, [pc, #216]	@ (80009e0 <MX_GPIO_Init+0x154>)
 8000908:	f000 fe0b 	bl	8001522 <HAL_GPIO_WritePin>
                          |LF_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LR_B_Pin|LF_F_Pin|RF_F_Pin|RF_B_Pin
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
 8000912:	4834      	ldr	r0, [pc, #208]	@ (80009e4 <MX_GPIO_Init+0x158>)
 8000914:	f000 fe05 	bl	8001522 <HAL_GPIO_WritePin>
                          |RR_F_Pin|RR_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2180      	movs	r1, #128	@ 0x80
 800091c:	4832      	ldr	r0, [pc, #200]	@ (80009e8 <MX_GPIO_Init+0x15c>)
 800091e:	f000 fe00 	bl	8001522 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000922:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000928:	4b30      	ldr	r3, [pc, #192]	@ (80009ec <MX_GPIO_Init+0x160>)
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4619      	mov	r1, r3
 8000936:	482c      	ldr	r0, [pc, #176]	@ (80009e8 <MX_GPIO_Init+0x15c>)
 8000938:	f000 fc58 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LD2_Pin Trigger2_Pin LR_F_Pin
                           LF_B_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LD2_Pin|Trigger2_Pin|LR_F_Pin
 800093c:	f240 7321 	movw	r3, #1825	@ 0x721
 8000940:	613b      	str	r3, [r7, #16]
                          |LF_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2302      	movs	r3, #2
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4619      	mov	r1, r3
 8000954:	4822      	ldr	r0, [pc, #136]	@ (80009e0 <MX_GPIO_Init+0x154>)
 8000956:	f000 fc49 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo2_Pin */
  GPIO_InitStruct.Pin = Echo2_Pin;
 800095a:	2310      	movs	r3, #16
 800095c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Echo2_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	4619      	mov	r1, r3
 800096c:	481c      	ldr	r0, [pc, #112]	@ (80009e0 <MX_GPIO_Init+0x154>)
 800096e:	f000 fc3d 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8000972:	2301      	movs	r3, #1
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	4817      	ldr	r0, [pc, #92]	@ (80009e4 <MX_GPIO_Init+0x158>)
 8000986:	f000 fc31 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_B_Pin LF_F_Pin RF_F_Pin RF_B_Pin
                           RR_F_Pin RR_B_Pin */
  GPIO_InitStruct.Pin = LR_B_Pin|LF_F_Pin|RF_F_Pin|RF_B_Pin
 800098a:	f44f 63e7 	mov.w	r3, #1848	@ 0x738
 800098e:	613b      	str	r3, [r7, #16]
                          |RR_F_Pin|RR_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	4810      	ldr	r0, [pc, #64]	@ (80009e4 <MX_GPIO_Init+0x158>)
 80009a4:	f000 fc22 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 80009a8:	2380      	movs	r3, #128	@ 0x80
 80009aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	480a      	ldr	r0, [pc, #40]	@ (80009e8 <MX_GPIO_Init+0x15c>)
 80009c0:	f000 fc14 	bl	80011ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2028      	movs	r0, #40	@ 0x28
 80009ca:	f000 fb26 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ce:	2028      	movs	r0, #40	@ 0x28
 80009d0:	f000 fb3f 	bl	8001052 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010800 	.word	0x40010800
 80009e4:	40010c00 	.word	0x40010c00
 80009e8:	40011000 	.word	0x40011000
 80009ec:	10110000 	.word	0x10110000

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <Error_Handler+0x8>

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_MspInit+0x5c>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	4a14      	ldr	r2, [pc, #80]	@ (8000a58 <HAL_MspInit+0x5c>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6193      	str	r3, [r2, #24]
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_MspInit+0x5c>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <HAL_MspInit+0x5c>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a58 <HAL_MspInit+0x5c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <HAL_MspInit+0x5c>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a32:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <HAL_MspInit+0x60>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <HAL_MspInit+0x60>)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010000 	.word	0x40010000

08000a60 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <HAL_TIM_Base_MspInit+0x58>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d10c      	bne.n	8000a8c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <HAL_TIM_Base_MspInit+0x5c>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a11      	ldr	r2, [pc, #68]	@ (8000abc <HAL_TIM_Base_MspInit+0x5c>)
 8000a78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <HAL_TIM_Base_MspInit+0x5c>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a8a:	e010      	b.n	8000aae <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a94:	d10b      	bne.n	8000aae <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_TIM_Base_MspInit+0x5c>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_TIM_Base_MspInit+0x5c>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	61d3      	str	r3, [r2, #28]
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_TIM_Base_MspInit+0x5c>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	40012c00 	.word	0x40012c00
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <HAL_UART_MspInit+0x80>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d12b      	bne.n	8000b38 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae0:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_UART_MspInit+0x84>)
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <HAL_UART_MspInit+0x84>)
 8000ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aea:	61d3      	str	r3, [r2, #28]
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_UART_MspInit+0x84>)
 8000aee:	69db      	ldr	r3, [r3, #28]
 8000af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_UART_MspInit+0x84>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a11      	ldr	r2, [pc, #68]	@ (8000b44 <HAL_UART_MspInit+0x84>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <HAL_UART_MspInit+0x84>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b10:	230c      	movs	r3, #12
 8000b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4619      	mov	r1, r3
 8000b22:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <HAL_UART_MspInit+0x88>)
 8000b24:	f000 fb62 	bl	80011ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2026      	movs	r0, #38	@ 0x26
 8000b2e:	f000 fa74 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b32:	2026      	movs	r0, #38	@ 0x26
 8000b34:	f000 fa8d 	bl	8001052 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010800 	.word	0x40010800

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f926 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <USART2_IRQHandler+0x10>)
 8000baa:	f001 fcc9 	bl	8002540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000118 	.word	0x20000118

08000bb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bc0:	f000 fcc8 	bl	8001554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e00a      	b.n	8000bf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bda:	f3af 8000 	nop.w
 8000bde:	4601      	mov	r1, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf0      	blt.n	8000bda <_read+0x12>
  }

  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e009      	b.n	8000c28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	60ba      	str	r2, [r7, #8]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fa95 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf1      	blt.n	8000c14 <_write+0x12>
  }
  return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_close>:

int _close(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c60:	605a      	str	r2, [r3, #4]
  return 0;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <_isatty>:

int _isatty(int file)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b085      	sub	sp, #20
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
	...

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f002 fbe8 	bl	80034a0 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20005000 	.word	0x20005000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	2000016c 	.word	0x2000016c
 8000d04:	200002c0 	.word	0x200002c0

08000d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff fff8 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480b      	ldr	r0, [pc, #44]	@ (8000d48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d1a:	490c      	ldr	r1, [pc, #48]	@ (8000d4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a09      	ldr	r2, [pc, #36]	@ (8000d54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d30:	4c09      	ldr	r4, [pc, #36]	@ (8000d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f002 fbb5 	bl	80034ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d42:	f7ff fbd5 	bl	80004f0 <main>
  bx lr
 8000d46:	4770      	bx	lr
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d50:	08003a08 	.word	0x08003a08
  ldr r2, =_sbss
 8000d54:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d58:	200002c0 	.word	0x200002c0

08000d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_2_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <HAL_Init+0x28>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	@ (8000d88 <HAL_Init+0x28>)
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f947 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fe3e 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40022000 	.word	0x40022000

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f95f 	bl	800106e <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 f927 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000004 	.word	0x20000004
 8000de4:	2000000c 	.word	0x2000000c
 8000de8:	20000008 	.word	0x20000008

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <HAL_IncTick+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a03      	ldr	r2, [pc, #12]	@ (8000e0c <HAL_IncTick+0x20>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	2000000c 	.word	0x2000000c
 8000e0c:	20000170 	.word	0x20000170

08000e10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b02      	ldr	r3, [pc, #8]	@ (8000e20 <HAL_GetTick+0x10>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	20000170 	.word	0x20000170

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff fff0 	bl	8000e10 <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffe0 	bl	8000e10 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000000c 	.word	0x2000000c

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4906      	ldr	r1, [pc, #24]	@ (8000f04 <__NVIC_EnableIRQ+0x34>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	@ (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	@ (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	@ 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff90 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff2d 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff42 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff90 	bl	8000f5c <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5f 	bl	8000f08 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff35 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa2 	bl	8000fc0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001086:	b480      	push	{r7}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d008      	beq.n	80010b0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2204      	movs	r2, #4
 80010a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e020      	b.n	80010f2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 020e 	bic.w	r2, r2, #14
 80010be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010d8:	2101      	movs	r1, #1
 80010da:	fa01 f202 	lsl.w	r2, r1, r2
 80010de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d005      	beq.n	8001120 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2204      	movs	r2, #4
 8001118:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	e051      	b.n	80011c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 020e 	bic.w	r2, r2, #14
 800112e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0201 	bic.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a22      	ldr	r2, [pc, #136]	@ (80011d0 <HAL_DMA_Abort_IT+0xd4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d029      	beq.n	800119e <HAL_DMA_Abort_IT+0xa2>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a21      	ldr	r2, [pc, #132]	@ (80011d4 <HAL_DMA_Abort_IT+0xd8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d022      	beq.n	800119a <HAL_DMA_Abort_IT+0x9e>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a1f      	ldr	r2, [pc, #124]	@ (80011d8 <HAL_DMA_Abort_IT+0xdc>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d01a      	beq.n	8001194 <HAL_DMA_Abort_IT+0x98>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a1e      	ldr	r2, [pc, #120]	@ (80011dc <HAL_DMA_Abort_IT+0xe0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d012      	beq.n	800118e <HAL_DMA_Abort_IT+0x92>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a1c      	ldr	r2, [pc, #112]	@ (80011e0 <HAL_DMA_Abort_IT+0xe4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d00a      	beq.n	8001188 <HAL_DMA_Abort_IT+0x8c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1b      	ldr	r2, [pc, #108]	@ (80011e4 <HAL_DMA_Abort_IT+0xe8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d102      	bne.n	8001182 <HAL_DMA_Abort_IT+0x86>
 800117c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001180:	e00e      	b.n	80011a0 <HAL_DMA_Abort_IT+0xa4>
 8001182:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001186:	e00b      	b.n	80011a0 <HAL_DMA_Abort_IT+0xa4>
 8001188:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800118c:	e008      	b.n	80011a0 <HAL_DMA_Abort_IT+0xa4>
 800118e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001192:	e005      	b.n	80011a0 <HAL_DMA_Abort_IT+0xa4>
 8001194:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001198:	e002      	b.n	80011a0 <HAL_DMA_Abort_IT+0xa4>
 800119a:	2310      	movs	r3, #16
 800119c:	e000      	b.n	80011a0 <HAL_DMA_Abort_IT+0xa4>
 800119e:	2301      	movs	r3, #1
 80011a0:	4a11      	ldr	r2, [pc, #68]	@ (80011e8 <HAL_DMA_Abort_IT+0xec>)
 80011a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	4798      	blx	r3
    } 
  }
  return status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40020008 	.word	0x40020008
 80011d4:	4002001c 	.word	0x4002001c
 80011d8:	40020030 	.word	0x40020030
 80011dc:	40020044 	.word	0x40020044
 80011e0:	40020058 	.word	0x40020058
 80011e4:	4002006c 	.word	0x4002006c
 80011e8:	40020000 	.word	0x40020000

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b08b      	sub	sp, #44	@ 0x2c
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fe:	e169      	b.n	80014d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001200:	2201      	movs	r2, #1
 8001202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	429a      	cmp	r2, r3
 800121a:	f040 8158 	bne.w	80014ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4a9a      	ldr	r2, [pc, #616]	@ (800148c <HAL_GPIO_Init+0x2a0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d05e      	beq.n	80012e6 <HAL_GPIO_Init+0xfa>
 8001228:	4a98      	ldr	r2, [pc, #608]	@ (800148c <HAL_GPIO_Init+0x2a0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d875      	bhi.n	800131a <HAL_GPIO_Init+0x12e>
 800122e:	4a98      	ldr	r2, [pc, #608]	@ (8001490 <HAL_GPIO_Init+0x2a4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d058      	beq.n	80012e6 <HAL_GPIO_Init+0xfa>
 8001234:	4a96      	ldr	r2, [pc, #600]	@ (8001490 <HAL_GPIO_Init+0x2a4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d86f      	bhi.n	800131a <HAL_GPIO_Init+0x12e>
 800123a:	4a96      	ldr	r2, [pc, #600]	@ (8001494 <HAL_GPIO_Init+0x2a8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d052      	beq.n	80012e6 <HAL_GPIO_Init+0xfa>
 8001240:	4a94      	ldr	r2, [pc, #592]	@ (8001494 <HAL_GPIO_Init+0x2a8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d869      	bhi.n	800131a <HAL_GPIO_Init+0x12e>
 8001246:	4a94      	ldr	r2, [pc, #592]	@ (8001498 <HAL_GPIO_Init+0x2ac>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d04c      	beq.n	80012e6 <HAL_GPIO_Init+0xfa>
 800124c:	4a92      	ldr	r2, [pc, #584]	@ (8001498 <HAL_GPIO_Init+0x2ac>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d863      	bhi.n	800131a <HAL_GPIO_Init+0x12e>
 8001252:	4a92      	ldr	r2, [pc, #584]	@ (800149c <HAL_GPIO_Init+0x2b0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d046      	beq.n	80012e6 <HAL_GPIO_Init+0xfa>
 8001258:	4a90      	ldr	r2, [pc, #576]	@ (800149c <HAL_GPIO_Init+0x2b0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d85d      	bhi.n	800131a <HAL_GPIO_Init+0x12e>
 800125e:	2b12      	cmp	r3, #18
 8001260:	d82a      	bhi.n	80012b8 <HAL_GPIO_Init+0xcc>
 8001262:	2b12      	cmp	r3, #18
 8001264:	d859      	bhi.n	800131a <HAL_GPIO_Init+0x12e>
 8001266:	a201      	add	r2, pc, #4	@ (adr r2, 800126c <HAL_GPIO_Init+0x80>)
 8001268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126c:	080012e7 	.word	0x080012e7
 8001270:	080012c1 	.word	0x080012c1
 8001274:	080012d3 	.word	0x080012d3
 8001278:	08001315 	.word	0x08001315
 800127c:	0800131b 	.word	0x0800131b
 8001280:	0800131b 	.word	0x0800131b
 8001284:	0800131b 	.word	0x0800131b
 8001288:	0800131b 	.word	0x0800131b
 800128c:	0800131b 	.word	0x0800131b
 8001290:	0800131b 	.word	0x0800131b
 8001294:	0800131b 	.word	0x0800131b
 8001298:	0800131b 	.word	0x0800131b
 800129c:	0800131b 	.word	0x0800131b
 80012a0:	0800131b 	.word	0x0800131b
 80012a4:	0800131b 	.word	0x0800131b
 80012a8:	0800131b 	.word	0x0800131b
 80012ac:	0800131b 	.word	0x0800131b
 80012b0:	080012c9 	.word	0x080012c9
 80012b4:	080012dd 	.word	0x080012dd
 80012b8:	4a79      	ldr	r2, [pc, #484]	@ (80014a0 <HAL_GPIO_Init+0x2b4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012be:	e02c      	b.n	800131a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e029      	b.n	800131c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	3304      	adds	r3, #4
 80012ce:	623b      	str	r3, [r7, #32]
          break;
 80012d0:	e024      	b.n	800131c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	3308      	adds	r3, #8
 80012d8:	623b      	str	r3, [r7, #32]
          break;
 80012da:	e01f      	b.n	800131c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	330c      	adds	r3, #12
 80012e2:	623b      	str	r3, [r7, #32]
          break;
 80012e4:	e01a      	b.n	800131c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ee:	2304      	movs	r3, #4
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e013      	b.n	800131c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d105      	bne.n	8001308 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012fc:	2308      	movs	r3, #8
 80012fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	611a      	str	r2, [r3, #16]
          break;
 8001306:	e009      	b.n	800131c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001308:	2308      	movs	r3, #8
 800130a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69fa      	ldr	r2, [r7, #28]
 8001310:	615a      	str	r2, [r3, #20]
          break;
 8001312:	e003      	b.n	800131c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x130>
          break;
 800131a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	2bff      	cmp	r3, #255	@ 0xff
 8001320:	d801      	bhi.n	8001326 <HAL_GPIO_Init+0x13a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	e001      	b.n	800132a <HAL_GPIO_Init+0x13e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3304      	adds	r3, #4
 800132a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2bff      	cmp	r3, #255	@ 0xff
 8001330:	d802      	bhi.n	8001338 <HAL_GPIO_Init+0x14c>
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	e002      	b.n	800133e <HAL_GPIO_Init+0x152>
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	3b08      	subs	r3, #8
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	210f      	movs	r1, #15
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	401a      	ands	r2, r3
 8001350:	6a39      	ldr	r1, [r7, #32]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	431a      	orrs	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80b1 	beq.w	80014ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800136c:	4b4d      	ldr	r3, [pc, #308]	@ (80014a4 <HAL_GPIO_Init+0x2b8>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a4c      	ldr	r2, [pc, #304]	@ (80014a4 <HAL_GPIO_Init+0x2b8>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b4a      	ldr	r3, [pc, #296]	@ (80014a4 <HAL_GPIO_Init+0x2b8>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001384:	4a48      	ldr	r2, [pc, #288]	@ (80014a8 <HAL_GPIO_Init+0x2bc>)
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	4013      	ands	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a40      	ldr	r2, [pc, #256]	@ (80014ac <HAL_GPIO_Init+0x2c0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d013      	beq.n	80013d8 <HAL_GPIO_Init+0x1ec>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a3f      	ldr	r2, [pc, #252]	@ (80014b0 <HAL_GPIO_Init+0x2c4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d00d      	beq.n	80013d4 <HAL_GPIO_Init+0x1e8>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a3e      	ldr	r2, [pc, #248]	@ (80014b4 <HAL_GPIO_Init+0x2c8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d007      	beq.n	80013d0 <HAL_GPIO_Init+0x1e4>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a3d      	ldr	r2, [pc, #244]	@ (80014b8 <HAL_GPIO_Init+0x2cc>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d101      	bne.n	80013cc <HAL_GPIO_Init+0x1e0>
 80013c8:	2303      	movs	r3, #3
 80013ca:	e006      	b.n	80013da <HAL_GPIO_Init+0x1ee>
 80013cc:	2304      	movs	r3, #4
 80013ce:	e004      	b.n	80013da <HAL_GPIO_Init+0x1ee>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e002      	b.n	80013da <HAL_GPIO_Init+0x1ee>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <HAL_GPIO_Init+0x1ee>
 80013d8:	2300      	movs	r3, #0
 80013da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013dc:	f002 0203 	and.w	r2, r2, #3
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	4093      	lsls	r3, r2
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ea:	492f      	ldr	r1, [pc, #188]	@ (80014a8 <HAL_GPIO_Init+0x2bc>)
 80013ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d006      	beq.n	8001412 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001404:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	492c      	ldr	r1, [pc, #176]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001412:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	43db      	mvns	r3, r3
 800141a:	4928      	ldr	r1, [pc, #160]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 800141c:	4013      	ands	r3, r2
 800141e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d006      	beq.n	800143a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800142c:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	4922      	ldr	r1, [pc, #136]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	60cb      	str	r3, [r1, #12]
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	43db      	mvns	r3, r3
 8001442:	491e      	ldr	r1, [pc, #120]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 8001444:	4013      	ands	r3, r2
 8001446:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	4918      	ldr	r1, [pc, #96]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001462:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	43db      	mvns	r3, r3
 800146a:	4914      	ldr	r1, [pc, #80]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 800146c:	4013      	ands	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d021      	beq.n	80014c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	490e      	ldr	r1, [pc, #56]	@ (80014bc <HAL_GPIO_Init+0x2d0>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
 8001488:	e021      	b.n	80014ce <HAL_GPIO_Init+0x2e2>
 800148a:	bf00      	nop
 800148c:	10320000 	.word	0x10320000
 8001490:	10310000 	.word	0x10310000
 8001494:	10220000 	.word	0x10220000
 8001498:	10210000 	.word	0x10210000
 800149c:	10120000 	.word	0x10120000
 80014a0:	10110000 	.word	0x10110000
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010000 	.word	0x40010000
 80014ac:	40010800 	.word	0x40010800
 80014b0:	40010c00 	.word	0x40010c00
 80014b4:	40011000 	.word	0x40011000
 80014b8:	40011400 	.word	0x40011400
 80014bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_GPIO_Init+0x304>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	4909      	ldr	r1, [pc, #36]	@ (80014f0 <HAL_GPIO_Init+0x304>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	3301      	adds	r3, #1
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	fa22 f303 	lsr.w	r3, r2, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f47f ae8e 	bne.w	8001200 <HAL_GPIO_Init+0x14>
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	372c      	adds	r7, #44	@ 0x2c
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40010400 	.word	0x40010400

080014f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e001      	b.n	8001516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	807b      	strh	r3, [r7, #2]
 800152e:	4613      	mov	r3, r2
 8001530:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001532:	787b      	ldrb	r3, [r7, #1]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001538:	887a      	ldrh	r2, [r7, #2]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800153e:	e003      	b.n	8001548 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	041a      	lsls	r2, r3, #16
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	611a      	str	r2, [r3, #16]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
	...

08001554 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	4013      	ands	r3, r2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f806 	bl	8001584 <HAL_GPIO_EXTI_Callback>
  }
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e272      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8087 	beq.w	80016c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b8:	4b92      	ldr	r3, [pc, #584]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d00c      	beq.n	80015de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d112      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
 80015d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015dc:	d10b      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	4b89      	ldr	r3, [pc, #548]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d06c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x12c>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d168      	bne.n	80016c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e24c      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x76>
 8001600:	4b80      	ldr	r3, [pc, #512]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a7f      	ldr	r2, [pc, #508]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e02e      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x98>
 8001616:	4b7b      	ldr	r3, [pc, #492]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a7a      	ldr	r2, [pc, #488]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 800161c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b78      	ldr	r3, [pc, #480]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a77      	ldr	r2, [pc, #476]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001628:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e01d      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0xbc>
 800163a:	4b72      	ldr	r3, [pc, #456]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a71      	ldr	r2, [pc, #452]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b6f      	ldr	r3, [pc, #444]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6e      	ldr	r2, [pc, #440]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 8001654:	4b6b      	ldr	r3, [pc, #428]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a6a      	ldr	r2, [pc, #424]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 800165a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b68      	ldr	r3, [pc, #416]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a67      	ldr	r2, [pc, #412]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800166a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fbcc 	bl	8000e10 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fbc8 	bl	8000e10 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	@ 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e200      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b5d      	ldr	r3, [pc, #372]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0xe4>
 800169a:	e014      	b.n	80016c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fbb8 	bl	8000e10 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff fbb4 	bl	8000e10 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	@ 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1ec      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	4b53      	ldr	r3, [pc, #332]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x10c>
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d063      	beq.n	800179a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016de:	4b49      	ldr	r3, [pc, #292]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d11c      	bne.n	8001724 <HAL_RCC_OscConfig+0x18c>
 80016ea:	4b46      	ldr	r3, [pc, #280]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d116      	bne.n	8001724 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	4b43      	ldr	r3, [pc, #268]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e1c0      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4939      	ldr	r1, [pc, #228]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	e03a      	b.n	800179a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172c:	4b36      	ldr	r3, [pc, #216]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff fb6d 	bl	8000e10 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff fb69 	bl	8000e10 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1a1      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001758:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4927      	ldr	r1, [pc, #156]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176e:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fb4c 	bl	8000e10 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177c:	f7ff fb48 	bl	8000e10 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e180      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d03a      	beq.n	800181c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d019      	beq.n	80017e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ae:	4b17      	ldr	r3, [pc, #92]	@ (800180c <HAL_RCC_OscConfig+0x274>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff fb2c 	bl	8000e10 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff fb28 	bl	8000e10 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e160      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 face 	bl	8001d7c <RCC_Delay>
 80017e0:	e01c      	b.n	800181c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <HAL_RCC_OscConfig+0x274>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff fb12 	bl	8000e10 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ee:	e00f      	b.n	8001810 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fb0e 	bl	8000e10 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d908      	bls.n	8001810 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e146      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	42420000 	.word	0x42420000
 800180c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001810:	4b92      	ldr	r3, [pc, #584]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1e9      	bne.n	80017f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80a6 	beq.w	8001976 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10d      	bne.n	8001856 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b88      	ldr	r3, [pc, #544]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a87      	ldr	r2, [pc, #540]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]
 8001846:	4b85      	ldr	r3, [pc, #532]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b82      	ldr	r3, [pc, #520]	@ (8001a60 <HAL_RCC_OscConfig+0x4c8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d118      	bne.n	8001894 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001862:	4b7f      	ldr	r3, [pc, #508]	@ (8001a60 <HAL_RCC_OscConfig+0x4c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a7e      	ldr	r2, [pc, #504]	@ (8001a60 <HAL_RCC_OscConfig+0x4c8>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7ff facf 	bl	8000e10 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001876:	f7ff facb 	bl	8000e10 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	@ 0x64
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e103      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b75      	ldr	r3, [pc, #468]	@ (8001a60 <HAL_RCC_OscConfig+0x4c8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x312>
 800189c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a6e      	ldr	r2, [pc, #440]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	e02d      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x334>
 80018b2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a69      	ldr	r2, [pc, #420]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6213      	str	r3, [r2, #32]
 80018be:	4b67      	ldr	r3, [pc, #412]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a66      	ldr	r2, [pc, #408]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	e01c      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d10c      	bne.n	80018ee <HAL_RCC_OscConfig+0x356>
 80018d4:	4b61      	ldr	r3, [pc, #388]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4a60      	ldr	r2, [pc, #384]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4a5d      	ldr	r2, [pc, #372]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	e00b      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018ee:	4b5b      	ldr	r3, [pc, #364]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a5a      	ldr	r2, [pc, #360]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	4b58      	ldr	r3, [pc, #352]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a57      	ldr	r2, [pc, #348]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d015      	beq.n	800193a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7ff fa7f 	bl	8000e10 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff fa7b 	bl	8000e10 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0b1      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ee      	beq.n	8001916 <HAL_RCC_OscConfig+0x37e>
 8001938:	e014      	b.n	8001964 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff fa69 	bl	8000e10 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff fa65 	bl	8000e10 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e09b      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	4b40      	ldr	r3, [pc, #256]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ee      	bne.n	8001942 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d105      	bne.n	8001976 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001974:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8087 	beq.w	8001a8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001980:	4b36      	ldr	r3, [pc, #216]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d061      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d146      	bne.n	8001a22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	4b33      	ldr	r3, [pc, #204]	@ (8001a64 <HAL_RCC_OscConfig+0x4cc>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff fa39 	bl	8000e10 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff fa35 	bl	8000e10 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e06d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b4:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c8:	d108      	bne.n	80019dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ca:	4b24      	ldr	r3, [pc, #144]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4921      	ldr	r1, [pc, #132]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019dc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a19      	ldr	r1, [r3, #32]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	430b      	orrs	r3, r1
 80019ee:	491b      	ldr	r1, [pc, #108]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_RCC_OscConfig+0x4cc>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fa09 	bl	8000e10 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff fa05 	bl	8000e10 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e03d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x46a>
 8001a20:	e035      	b.n	8001a8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_RCC_OscConfig+0x4cc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff f9f2 	bl	8000e10 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff f9ee 	bl	8000e10 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e026      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x498>
 8001a4e:	e01e      	b.n	8001a8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e019      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40007000 	.word	0x40007000
 8001a64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a68:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <HAL_RCC_OscConfig+0x500>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0d0      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d910      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b67      	ldr	r3, [pc, #412]	@ (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 0207 	bic.w	r2, r3, #7
 8001ac6:	4965      	ldr	r1, [pc, #404]	@ (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b63      	ldr	r3, [pc, #396]	@ (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b8      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4b59      	ldr	r3, [pc, #356]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b10:	4b53      	ldr	r3, [pc, #332]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a52      	ldr	r2, [pc, #328]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b50      	ldr	r3, [pc, #320]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	494d      	ldr	r1, [pc, #308]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d040      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b47      	ldr	r3, [pc, #284]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d115      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5a:	4b41      	ldr	r3, [pc, #260]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e073      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e06b      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4b39      	ldr	r3, [pc, #228]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f023 0203 	bic.w	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4936      	ldr	r1, [pc, #216]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f940 	bl	8000e10 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7ff f93c 	bl	8000e10 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e053      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b2d      	ldr	r3, [pc, #180]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 020c 	and.w	r2, r3, #12
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1eb      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d210      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0207 	bic.w	r2, r3, #7
 8001bd2:	4922      	ldr	r1, [pc, #136]	@ (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e032      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4916      	ldr	r1, [pc, #88]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c16:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490e      	ldr	r1, [pc, #56]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 f821 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	490a      	ldr	r1, [pc, #40]	@ (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <HAL_RCC_ClockConfig+0x1cc>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_RCC_ClockConfig+0x1d0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f89e 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	080039d4 	.word	0x080039d4
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	20000008 	.word	0x20000008

08001c70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d002      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x30>
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x36>
 8001c9e:	e027      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ca0:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ca2:	613b      	str	r3, [r7, #16]
      break;
 8001ca4:	e027      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	0c9b      	lsrs	r3, r3, #18
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	4a17      	ldr	r2, [pc, #92]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cb0:	5cd3      	ldrb	r3, [r2, r3]
 8001cb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d010      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cbe:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	0c5b      	lsrs	r3, r3, #17
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	4a11      	ldr	r2, [pc, #68]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cd2:	fb03 f202 	mul.w	r2, r3, r2
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e004      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ce4:	fb02 f303 	mul.w	r3, r2, r3
 8001ce8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	613b      	str	r3, [r7, #16]
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cf2:	613b      	str	r3, [r7, #16]
      break;
 8001cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf6:	693b      	ldr	r3, [r7, #16]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	007a1200 	.word	0x007a1200
 8001d0c:	080039ec 	.word	0x080039ec
 8001d10:	080039fc 	.word	0x080039fc
 8001d14:	003d0900 	.word	0x003d0900

08001d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d1c:	4b02      	ldr	r3, [pc, #8]	@ (8001d28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	20000004 	.word	0x20000004

08001d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d30:	f7ff fff2 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4903      	ldr	r1, [pc, #12]	@ (8001d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	080039e4 	.word	0x080039e4

08001d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d58:	f7ff ffde 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	0adb      	lsrs	r3, r3, #11
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4903      	ldr	r1, [pc, #12]	@ (8001d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	080039e4 	.word	0x080039e4

08001d7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d84:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <RCC_Delay+0x34>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <RCC_Delay+0x38>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0a5b      	lsrs	r3, r3, #9
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d98:	bf00      	nop
  }
  while (Delay --);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1e5a      	subs	r2, r3, #1
 8001d9e:	60fa      	str	r2, [r7, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f9      	bne.n	8001d98 <RCC_Delay+0x1c>
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	20000004 	.word	0x20000004
 8001db4:	10624dd3 	.word	0x10624dd3

08001db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e041      	b.n	8001e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe fe3e 	bl	8000a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3304      	adds	r3, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f000 f940 	bl	800207c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d001      	beq.n	8001e70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e032      	b.n	8001ed6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a18      	ldr	r2, [pc, #96]	@ (8001ee0 <HAL_TIM_Base_Start+0x88>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00e      	beq.n	8001ea0 <HAL_TIM_Base_Start+0x48>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e8a:	d009      	beq.n	8001ea0 <HAL_TIM_Base_Start+0x48>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a14      	ldr	r2, [pc, #80]	@ (8001ee4 <HAL_TIM_Base_Start+0x8c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d004      	beq.n	8001ea0 <HAL_TIM_Base_Start+0x48>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ee8 <HAL_TIM_Base_Start+0x90>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d111      	bne.n	8001ec4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d010      	beq.n	8001ed4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0201 	orr.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec2:	e007      	b.n	8001ed4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	40012c00 	.word	0x40012c00
 8001ee4:	40000400 	.word	0x40000400
 8001ee8:	40000800 	.word	0x40000800

08001eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_TIM_ConfigClockSource+0x1c>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e0b4      	b.n	8002072 <HAL_TIM_ConfigClockSource+0x186>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f40:	d03e      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0xd4>
 8001f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f46:	f200 8087 	bhi.w	8002058 <HAL_TIM_ConfigClockSource+0x16c>
 8001f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f4e:	f000 8086 	beq.w	800205e <HAL_TIM_ConfigClockSource+0x172>
 8001f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f56:	d87f      	bhi.n	8002058 <HAL_TIM_ConfigClockSource+0x16c>
 8001f58:	2b70      	cmp	r3, #112	@ 0x70
 8001f5a:	d01a      	beq.n	8001f92 <HAL_TIM_ConfigClockSource+0xa6>
 8001f5c:	2b70      	cmp	r3, #112	@ 0x70
 8001f5e:	d87b      	bhi.n	8002058 <HAL_TIM_ConfigClockSource+0x16c>
 8001f60:	2b60      	cmp	r3, #96	@ 0x60
 8001f62:	d050      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x11a>
 8001f64:	2b60      	cmp	r3, #96	@ 0x60
 8001f66:	d877      	bhi.n	8002058 <HAL_TIM_ConfigClockSource+0x16c>
 8001f68:	2b50      	cmp	r3, #80	@ 0x50
 8001f6a:	d03c      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0xfa>
 8001f6c:	2b50      	cmp	r3, #80	@ 0x50
 8001f6e:	d873      	bhi.n	8002058 <HAL_TIM_ConfigClockSource+0x16c>
 8001f70:	2b40      	cmp	r3, #64	@ 0x40
 8001f72:	d058      	beq.n	8002026 <HAL_TIM_ConfigClockSource+0x13a>
 8001f74:	2b40      	cmp	r3, #64	@ 0x40
 8001f76:	d86f      	bhi.n	8002058 <HAL_TIM_ConfigClockSource+0x16c>
 8001f78:	2b30      	cmp	r3, #48	@ 0x30
 8001f7a:	d064      	beq.n	8002046 <HAL_TIM_ConfigClockSource+0x15a>
 8001f7c:	2b30      	cmp	r3, #48	@ 0x30
 8001f7e:	d86b      	bhi.n	8002058 <HAL_TIM_ConfigClockSource+0x16c>
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d060      	beq.n	8002046 <HAL_TIM_ConfigClockSource+0x15a>
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d867      	bhi.n	8002058 <HAL_TIM_ConfigClockSource+0x16c>
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d05c      	beq.n	8002046 <HAL_TIM_ConfigClockSource+0x15a>
 8001f8c:	2b10      	cmp	r3, #16
 8001f8e:	d05a      	beq.n	8002046 <HAL_TIM_ConfigClockSource+0x15a>
 8001f90:	e062      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fa2:	f000 f950 	bl	8002246 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001fb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	609a      	str	r2, [r3, #8]
      break;
 8001fbe:	e04f      	b.n	8002060 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fd0:	f000 f939 	bl	8002246 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fe2:	609a      	str	r2, [r3, #8]
      break;
 8001fe4:	e03c      	b.n	8002060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f000 f8b0 	bl	8002158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2150      	movs	r1, #80	@ 0x50
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f907 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8002004:	e02c      	b.n	8002060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002012:	461a      	mov	r2, r3
 8002014:	f000 f8ce 	bl	80021b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2160      	movs	r1, #96	@ 0x60
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f8f7 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8002024:	e01c      	b.n	8002060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002032:	461a      	mov	r2, r3
 8002034:	f000 f890 	bl	8002158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2140      	movs	r1, #64	@ 0x40
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f8e7 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8002044:	e00c      	b.n	8002060 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f000 f8de 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8002056:	e003      	b.n	8002060 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
      break;
 800205c:	e000      	b.n	8002060 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800205e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a2f      	ldr	r2, [pc, #188]	@ (800214c <TIM_Base_SetConfig+0xd0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00b      	beq.n	80020ac <TIM_Base_SetConfig+0x30>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800209a:	d007      	beq.n	80020ac <TIM_Base_SetConfig+0x30>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a2c      	ldr	r2, [pc, #176]	@ (8002150 <TIM_Base_SetConfig+0xd4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d003      	beq.n	80020ac <TIM_Base_SetConfig+0x30>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002154 <TIM_Base_SetConfig+0xd8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d108      	bne.n	80020be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a22      	ldr	r2, [pc, #136]	@ (800214c <TIM_Base_SetConfig+0xd0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00b      	beq.n	80020de <TIM_Base_SetConfig+0x62>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020cc:	d007      	beq.n	80020de <TIM_Base_SetConfig+0x62>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002150 <TIM_Base_SetConfig+0xd4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0x62>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002154 <TIM_Base_SetConfig+0xd8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <TIM_Base_SetConfig+0xd0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f023 0201 	bic.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]
  }
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	40012c00 	.word	0x40012c00
 8002150:	40000400 	.word	0x40000400
 8002154:	40000800 	.word	0x40000800

08002158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	f023 0201 	bic.w	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f023 030a 	bic.w	r3, r3, #10
 8002194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4313      	orrs	r3, r2
 800219c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	621a      	str	r2, [r3, #32]
}
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f023 0210 	bic.w	r2, r3, #16
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80021de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	031b      	lsls	r3, r3, #12
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80021f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	621a      	str	r2, [r3, #32]
}
 8002208:	bf00      	nop
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	f043 0307 	orr.w	r3, r3, #7
 8002234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	609a      	str	r2, [r3, #8]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr

08002246 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002246:	b480      	push	{r7}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002260:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	021a      	lsls	r2, r3, #8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	431a      	orrs	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4313      	orrs	r3, r2
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	609a      	str	r2, [r3, #8]
}
 800227a:	bf00      	nop
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002298:	2302      	movs	r3, #2
 800229a:	e046      	b.n	800232a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a16      	ldr	r2, [pc, #88]	@ (8002334 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00e      	beq.n	80022fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e8:	d009      	beq.n	80022fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d004      	beq.n	80022fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a10      	ldr	r2, [pc, #64]	@ (800233c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d10c      	bne.n	8002318 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4313      	orrs	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40012c00 	.word	0x40012c00
 8002338:	40000400 	.word	0x40000400
 800233c:	40000800 	.word	0x40000800

08002340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e042      	b.n	80023d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe fbaa 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2224      	movs	r2, #36	@ 0x24
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fdb7 	bl	8002ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	@ 0x28
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d175      	bne.n	80024ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_UART_Transmit+0x2c>
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e06e      	b.n	80024ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2221      	movs	r2, #33	@ 0x21
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800241e:	f7fe fcf7 	bl	8000e10 <HAL_GetTick>
 8002422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	88fa      	ldrh	r2, [r7, #6]
 8002428:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	88fa      	ldrh	r2, [r7, #6]
 800242e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002438:	d108      	bne.n	800244c <HAL_UART_Transmit+0x6c>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d104      	bne.n	800244c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	e003      	b.n	8002454 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002454:	e02e      	b.n	80024b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2200      	movs	r2, #0
 800245e:	2180      	movs	r1, #128	@ 0x80
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fb1c 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e03a      	b.n	80024ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10b      	bne.n	8002496 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800248c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3302      	adds	r3, #2
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	e007      	b.n	80024a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	3301      	adds	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1cb      	bne.n	8002456 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2200      	movs	r2, #0
 80024c6:	2140      	movs	r1, #64	@ 0x40
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fae8 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e006      	b.n	80024ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e000      	b.n	80024ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	4613      	mov	r3, r2
 8002502:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b20      	cmp	r3, #32
 800250e:	d112      	bne.n	8002536 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_UART_Receive_IT+0x26>
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e00b      	b.n	8002538 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	461a      	mov	r2, r3
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fb0f 	bl	8002b50 <UART_Start_Receive_IT>
 8002532:	4603      	mov	r3, r0
 8002534:	e000      	b.n	8002538 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002536:	2302      	movs	r3, #2
  }
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b0ba      	sub	sp, #232	@ 0xe8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800257e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_UART_IRQHandler+0x66>
 8002592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fbec 	bl	8002d7c <UART_Receive_IT>
      return;
 80025a4:	e25b      	b.n	8002a5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80de 	beq.w	800276c <HAL_UART_IRQHandler+0x22c>
 80025b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d106      	bne.n	80025ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80d1 	beq.w	800276c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_UART_IRQHandler+0xae>
 80025d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	f043 0201 	orr.w	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00b      	beq.n	8002612 <HAL_UART_IRQHandler+0xd2>
 80025fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	f043 0202 	orr.w	r2, r3, #2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <HAL_UART_IRQHandler+0xf6>
 800261e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	f043 0204 	orr.w	r2, r3, #4
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d011      	beq.n	8002666 <HAL_UART_IRQHandler+0x126>
 8002642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800264e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	f043 0208 	orr.w	r2, r3, #8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 81f2 	beq.w	8002a54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_UART_IRQHandler+0x14e>
 800267c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fb77 	bl	8002d7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <HAL_UART_IRQHandler+0x17a>
 80026b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d04f      	beq.n	800275a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa81 	bl	8002bc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d041      	beq.n	8002752 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3314      	adds	r3, #20
 80026d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026dc:	e853 3f00 	ldrex	r3, [r3]
 80026e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80026e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3314      	adds	r3, #20
 80026f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80026fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800270a:	e841 2300 	strex	r3, r2, [r1]
 800270e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1d9      	bne.n	80026ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d013      	beq.n	800274a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002726:	4a7e      	ldr	r2, [pc, #504]	@ (8002920 <HAL_UART_IRQHandler+0x3e0>)
 8002728:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fce4 	bl	80010fc <HAL_DMA_Abort_IT>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d016      	beq.n	8002768 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002744:	4610      	mov	r0, r2
 8002746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002748:	e00e      	b.n	8002768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f993 	bl	8002a76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002750:	e00a      	b.n	8002768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f98f 	bl	8002a76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002758:	e006      	b.n	8002768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f98b 	bl	8002a76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002766:	e175      	b.n	8002a54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002768:	bf00      	nop
    return;
 800276a:	e173      	b.n	8002a54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	2b01      	cmp	r3, #1
 8002772:	f040 814f 	bne.w	8002a14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8148 	beq.w	8002a14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8141 	beq.w	8002a14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80b6 	beq.w	8002924 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8145 	beq.w	8002a58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80027d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027d6:	429a      	cmp	r2, r3
 80027d8:	f080 813e 	bcs.w	8002a58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	f000 8088 	beq.w	8002900 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027fe:	e853 3f00 	ldrex	r3, [r3]
 8002802:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002806:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800280a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800280e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	330c      	adds	r3, #12
 8002818:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800281c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002820:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002824:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002828:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800282c:	e841 2300 	strex	r3, r2, [r1]
 8002830:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1d9      	bne.n	80027f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3314      	adds	r3, #20
 8002842:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002844:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002846:	e853 3f00 	ldrex	r3, [r3]
 800284a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800284c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3314      	adds	r3, #20
 800285c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002860:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002864:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002868:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800286c:	e841 2300 	strex	r3, r2, [r1]
 8002870:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002872:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e1      	bne.n	800283c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3314      	adds	r3, #20
 800287e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002880:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002882:	e853 3f00 	ldrex	r3, [r3]
 8002886:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002888:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800288a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800288e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3314      	adds	r3, #20
 8002898:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800289c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800289e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80028a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80028a4:	e841 2300 	strex	r3, r2, [r1]
 80028a8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80028aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e3      	bne.n	8002878 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80028ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028d0:	f023 0310 	bic.w	r3, r3, #16
 80028d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80028e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80028e4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80028f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e3      	bne.n	80028be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fbc3 	bl	8001086 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800290e:	b29b      	uxth	r3, r3
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	b29b      	uxth	r3, r3
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f8b6 	bl	8002a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800291c:	e09c      	b.n	8002a58 <HAL_UART_IRQHandler+0x518>
 800291e:	bf00      	nop
 8002920:	08002c87 	.word	0x08002c87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800292c:	b29b      	uxth	r3, r3
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 808e 	beq.w	8002a5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8089 	beq.w	8002a5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002954:	e853 3f00 	ldrex	r3, [r3]
 8002958:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800295a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800295c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002960:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	330c      	adds	r3, #12
 800296a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800296e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002970:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002972:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002974:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002976:	e841 2300 	strex	r3, r2, [r1]
 800297a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800297c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e3      	bne.n	800294a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3314      	adds	r3, #20
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	623b      	str	r3, [r7, #32]
   return(result);
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3314      	adds	r3, #20
 80029a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80029a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ae:	e841 2300 	strex	r3, r2, [r1]
 80029b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80029b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1e3      	bne.n	8002982 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	330c      	adds	r3, #12
 80029ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0310 	bic.w	r3, r3, #16
 80029de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	330c      	adds	r3, #12
 80029e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80029ec:	61fa      	str	r2, [r7, #28]
 80029ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f0:	69b9      	ldr	r1, [r7, #24]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	e841 2300 	strex	r3, r2, [r1]
 80029f8:	617b      	str	r3, [r7, #20]
   return(result);
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e3      	bne.n	80029c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f83b 	bl	8002a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a12:	e023      	b.n	8002a5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <HAL_UART_IRQHandler+0x4f4>
 8002a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f93e 	bl	8002cae <UART_Transmit_IT>
    return;
 8002a32:	e014      	b.n	8002a5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <HAL_UART_IRQHandler+0x51e>
 8002a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f97d 	bl	8002d4c <UART_EndTransmit_IT>
    return;
 8002a52:	e004      	b.n	8002a5e <HAL_UART_IRQHandler+0x51e>
    return;
 8002a54:	bf00      	nop
 8002a56:	e002      	b.n	8002a5e <HAL_UART_IRQHandler+0x51e>
      return;
 8002a58:	bf00      	nop
 8002a5a:	e000      	b.n	8002a5e <HAL_UART_IRQHandler+0x51e>
      return;
 8002a5c:	bf00      	nop
  }
}
 8002a5e:	37e8      	adds	r7, #232	@ 0xe8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aae:	e03b      	b.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d037      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab8:	f7fe f9aa 	bl	8000e10 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	6a3a      	ldr	r2, [r7, #32]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d302      	bcc.n	8002ace <UART_WaitOnFlagUntilTimeout+0x30>
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e03a      	b.n	8002b48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d023      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b80      	cmp	r3, #128	@ 0x80
 8002ae4:	d020      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b40      	cmp	r3, #64	@ 0x40
 8002aea:	d01d      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d116      	bne.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f856 	bl	8002bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e00f      	b.n	8002b48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d0b4      	beq.n	8002ab0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	88fa      	ldrh	r2, [r7, #6]
 8002b68:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	88fa      	ldrh	r2, [r7, #6]
 8002b6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2222      	movs	r2, #34	@ 0x22
 8002b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0220 	orr.w	r2, r2, #32
 8002bb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b095      	sub	sp, #84	@ 0x54
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	330c      	adds	r3, #12
 8002be8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bea:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bf2:	e841 2300 	strex	r3, r2, [r1]
 8002bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1e5      	bne.n	8002bca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3314      	adds	r3, #20
 8002c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	e853 3f00 	ldrex	r3, [r3]
 8002c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3314      	adds	r3, #20
 8002c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c26:	e841 2300 	strex	r3, r2, [r1]
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1e5      	bne.n	8002bfe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d119      	bne.n	8002c6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	330c      	adds	r3, #12
 8002c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f023 0310 	bic.w	r3, r3, #16
 8002c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	330c      	adds	r3, #12
 8002c58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c5a:	61ba      	str	r2, [r7, #24]
 8002c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	6979      	ldr	r1, [r7, #20]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	613b      	str	r3, [r7, #16]
   return(result);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1e5      	bne.n	8002c3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c7c:	bf00      	nop
 8002c7e:	3754      	adds	r7, #84	@ 0x54
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7ff fee8 	bl	8002a76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b21      	cmp	r3, #33	@ 0x21
 8002cc0:	d13e      	bne.n	8002d40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cca:	d114      	bne.n	8002cf6 <UART_Transmit_IT+0x48>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d110      	bne.n	8002cf6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ce8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	1c9a      	adds	r2, r3, #2
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	621a      	str	r2, [r3, #32]
 8002cf4:	e008      	b.n	8002d08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	1c59      	adds	r1, r3, #1
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6211      	str	r1, [r2, #32]
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4619      	mov	r1, r3
 8002d16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10f      	bne.n	8002d3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff fe79 	bl	8002a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08c      	sub	sp, #48	@ 0x30
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b22      	cmp	r3, #34	@ 0x22
 8002d8e:	f040 80ae 	bne.w	8002eee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d9a:	d117      	bne.n	8002dcc <UART_Receive_IT+0x50>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d113      	bne.n	8002dcc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc4:	1c9a      	adds	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dca:	e026      	b.n	8002e1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dde:	d007      	beq.n	8002df0 <UART_Receive_IT+0x74>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <UART_Receive_IT+0x82>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d106      	bne.n	8002dfe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e008      	b.n	8002e10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4619      	mov	r1, r3
 8002e28:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d15d      	bne.n	8002eea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0220 	bic.w	r2, r2, #32
 8002e3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d135      	bne.n	8002ee0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	e853 3f00 	ldrex	r3, [r3]
 8002e88:	613b      	str	r3, [r7, #16]
   return(result);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f023 0310 	bic.w	r3, r3, #16
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	330c      	adds	r3, #12
 8002e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e9a:	623a      	str	r2, [r7, #32]
 8002e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9e:	69f9      	ldr	r1, [r7, #28]
 8002ea0:	6a3a      	ldr	r2, [r7, #32]
 8002ea2:	e841 2300 	strex	r3, r2, [r1]
 8002ea6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e5      	bne.n	8002e7a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d10a      	bne.n	8002ed2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fdd5 	bl	8002a88 <HAL_UARTEx_RxEventCallback>
 8002ede:	e002      	b.n	8002ee6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7fd fa5f 	bl	80003a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e002      	b.n	8002ef0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e000      	b.n	8002ef0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
  }
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3730      	adds	r7, #48	@ 0x30
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002f32:	f023 030c 	bic.w	r3, r3, #12
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800300c <UART_SetConfig+0x114>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d103      	bne.n	8002f68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f60:	f7fe fef8 	bl	8001d54 <HAL_RCC_GetPCLK2Freq>
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	e002      	b.n	8002f6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f68:	f7fe fee0 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8002f6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009a      	lsls	r2, r3, #2
 8002f78:	441a      	add	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	4a22      	ldr	r2, [pc, #136]	@ (8003010 <UART_SetConfig+0x118>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	0119      	lsls	r1, r3, #4
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009a      	lsls	r2, r3, #2
 8002f98:	441a      	add	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <UART_SetConfig+0x118>)
 8002fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2064      	movs	r0, #100	@ 0x64
 8002fae:	fb00 f303 	mul.w	r3, r0, r3
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	3332      	adds	r3, #50	@ 0x32
 8002fb8:	4a15      	ldr	r2, [pc, #84]	@ (8003010 <UART_SetConfig+0x118>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fc4:	4419      	add	r1, r3
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009a      	lsls	r2, r3, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <UART_SetConfig+0x118>)
 8002fde:	fba3 0302 	umull	r0, r3, r3, r2
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2064      	movs	r0, #100	@ 0x64
 8002fe6:	fb00 f303 	mul.w	r3, r0, r3
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	3332      	adds	r3, #50	@ 0x32
 8002ff0:	4a07      	ldr	r2, [pc, #28]	@ (8003010 <UART_SetConfig+0x118>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	f003 020f 	and.w	r2, r3, #15
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	440a      	add	r2, r1
 8003002:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40013800 	.word	0x40013800
 8003010:	51eb851f 	.word	0x51eb851f

08003014 <std>:
 8003014:	2300      	movs	r3, #0
 8003016:	b510      	push	{r4, lr}
 8003018:	4604      	mov	r4, r0
 800301a:	e9c0 3300 	strd	r3, r3, [r0]
 800301e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003022:	6083      	str	r3, [r0, #8]
 8003024:	8181      	strh	r1, [r0, #12]
 8003026:	6643      	str	r3, [r0, #100]	@ 0x64
 8003028:	81c2      	strh	r2, [r0, #14]
 800302a:	6183      	str	r3, [r0, #24]
 800302c:	4619      	mov	r1, r3
 800302e:	2208      	movs	r2, #8
 8003030:	305c      	adds	r0, #92	@ 0x5c
 8003032:	f000 f9e7 	bl	8003404 <memset>
 8003036:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <std+0x58>)
 8003038:	6224      	str	r4, [r4, #32]
 800303a:	6263      	str	r3, [r4, #36]	@ 0x24
 800303c:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <std+0x5c>)
 800303e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <std+0x60>)
 8003042:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <std+0x64>)
 8003046:	6323      	str	r3, [r4, #48]	@ 0x30
 8003048:	4b0c      	ldr	r3, [pc, #48]	@ (800307c <std+0x68>)
 800304a:	429c      	cmp	r4, r3
 800304c:	d006      	beq.n	800305c <std+0x48>
 800304e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003052:	4294      	cmp	r4, r2
 8003054:	d002      	beq.n	800305c <std+0x48>
 8003056:	33d0      	adds	r3, #208	@ 0xd0
 8003058:	429c      	cmp	r4, r3
 800305a:	d105      	bne.n	8003068 <std+0x54>
 800305c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003064:	f000 ba46 	b.w	80034f4 <__retarget_lock_init_recursive>
 8003068:	bd10      	pop	{r4, pc}
 800306a:	bf00      	nop
 800306c:	08003255 	.word	0x08003255
 8003070:	08003277 	.word	0x08003277
 8003074:	080032af 	.word	0x080032af
 8003078:	080032d3 	.word	0x080032d3
 800307c:	20000174 	.word	0x20000174

08003080 <stdio_exit_handler>:
 8003080:	4a02      	ldr	r2, [pc, #8]	@ (800308c <stdio_exit_handler+0xc>)
 8003082:	4903      	ldr	r1, [pc, #12]	@ (8003090 <stdio_exit_handler+0x10>)
 8003084:	4803      	ldr	r0, [pc, #12]	@ (8003094 <stdio_exit_handler+0x14>)
 8003086:	f000 b869 	b.w	800315c <_fwalk_sglue>
 800308a:	bf00      	nop
 800308c:	20000010 	.word	0x20000010
 8003090:	080037e9 	.word	0x080037e9
 8003094:	20000020 	.word	0x20000020

08003098 <cleanup_stdio>:
 8003098:	6841      	ldr	r1, [r0, #4]
 800309a:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <cleanup_stdio+0x34>)
 800309c:	b510      	push	{r4, lr}
 800309e:	4299      	cmp	r1, r3
 80030a0:	4604      	mov	r4, r0
 80030a2:	d001      	beq.n	80030a8 <cleanup_stdio+0x10>
 80030a4:	f000 fba0 	bl	80037e8 <_fflush_r>
 80030a8:	68a1      	ldr	r1, [r4, #8]
 80030aa:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <cleanup_stdio+0x38>)
 80030ac:	4299      	cmp	r1, r3
 80030ae:	d002      	beq.n	80030b6 <cleanup_stdio+0x1e>
 80030b0:	4620      	mov	r0, r4
 80030b2:	f000 fb99 	bl	80037e8 <_fflush_r>
 80030b6:	68e1      	ldr	r1, [r4, #12]
 80030b8:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <cleanup_stdio+0x3c>)
 80030ba:	4299      	cmp	r1, r3
 80030bc:	d004      	beq.n	80030c8 <cleanup_stdio+0x30>
 80030be:	4620      	mov	r0, r4
 80030c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030c4:	f000 bb90 	b.w	80037e8 <_fflush_r>
 80030c8:	bd10      	pop	{r4, pc}
 80030ca:	bf00      	nop
 80030cc:	20000174 	.word	0x20000174
 80030d0:	200001dc 	.word	0x200001dc
 80030d4:	20000244 	.word	0x20000244

080030d8 <global_stdio_init.part.0>:
 80030d8:	b510      	push	{r4, lr}
 80030da:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <global_stdio_init.part.0+0x30>)
 80030dc:	4c0b      	ldr	r4, [pc, #44]	@ (800310c <global_stdio_init.part.0+0x34>)
 80030de:	4a0c      	ldr	r2, [pc, #48]	@ (8003110 <global_stdio_init.part.0+0x38>)
 80030e0:	4620      	mov	r0, r4
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	2104      	movs	r1, #4
 80030e6:	2200      	movs	r2, #0
 80030e8:	f7ff ff94 	bl	8003014 <std>
 80030ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80030f0:	2201      	movs	r2, #1
 80030f2:	2109      	movs	r1, #9
 80030f4:	f7ff ff8e 	bl	8003014 <std>
 80030f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80030fc:	2202      	movs	r2, #2
 80030fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003102:	2112      	movs	r1, #18
 8003104:	f7ff bf86 	b.w	8003014 <std>
 8003108:	200002ac 	.word	0x200002ac
 800310c:	20000174 	.word	0x20000174
 8003110:	08003081 	.word	0x08003081

08003114 <__sfp_lock_acquire>:
 8003114:	4801      	ldr	r0, [pc, #4]	@ (800311c <__sfp_lock_acquire+0x8>)
 8003116:	f000 b9ee 	b.w	80034f6 <__retarget_lock_acquire_recursive>
 800311a:	bf00      	nop
 800311c:	200002b5 	.word	0x200002b5

08003120 <__sfp_lock_release>:
 8003120:	4801      	ldr	r0, [pc, #4]	@ (8003128 <__sfp_lock_release+0x8>)
 8003122:	f000 b9e9 	b.w	80034f8 <__retarget_lock_release_recursive>
 8003126:	bf00      	nop
 8003128:	200002b5 	.word	0x200002b5

0800312c <__sinit>:
 800312c:	b510      	push	{r4, lr}
 800312e:	4604      	mov	r4, r0
 8003130:	f7ff fff0 	bl	8003114 <__sfp_lock_acquire>
 8003134:	6a23      	ldr	r3, [r4, #32]
 8003136:	b11b      	cbz	r3, 8003140 <__sinit+0x14>
 8003138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800313c:	f7ff bff0 	b.w	8003120 <__sfp_lock_release>
 8003140:	4b04      	ldr	r3, [pc, #16]	@ (8003154 <__sinit+0x28>)
 8003142:	6223      	str	r3, [r4, #32]
 8003144:	4b04      	ldr	r3, [pc, #16]	@ (8003158 <__sinit+0x2c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f5      	bne.n	8003138 <__sinit+0xc>
 800314c:	f7ff ffc4 	bl	80030d8 <global_stdio_init.part.0>
 8003150:	e7f2      	b.n	8003138 <__sinit+0xc>
 8003152:	bf00      	nop
 8003154:	08003099 	.word	0x08003099
 8003158:	200002ac 	.word	0x200002ac

0800315c <_fwalk_sglue>:
 800315c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003160:	4607      	mov	r7, r0
 8003162:	4688      	mov	r8, r1
 8003164:	4614      	mov	r4, r2
 8003166:	2600      	movs	r6, #0
 8003168:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800316c:	f1b9 0901 	subs.w	r9, r9, #1
 8003170:	d505      	bpl.n	800317e <_fwalk_sglue+0x22>
 8003172:	6824      	ldr	r4, [r4, #0]
 8003174:	2c00      	cmp	r4, #0
 8003176:	d1f7      	bne.n	8003168 <_fwalk_sglue+0xc>
 8003178:	4630      	mov	r0, r6
 800317a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800317e:	89ab      	ldrh	r3, [r5, #12]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d907      	bls.n	8003194 <_fwalk_sglue+0x38>
 8003184:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003188:	3301      	adds	r3, #1
 800318a:	d003      	beq.n	8003194 <_fwalk_sglue+0x38>
 800318c:	4629      	mov	r1, r5
 800318e:	4638      	mov	r0, r7
 8003190:	47c0      	blx	r8
 8003192:	4306      	orrs	r6, r0
 8003194:	3568      	adds	r5, #104	@ 0x68
 8003196:	e7e9      	b.n	800316c <_fwalk_sglue+0x10>

08003198 <_puts_r>:
 8003198:	6a03      	ldr	r3, [r0, #32]
 800319a:	b570      	push	{r4, r5, r6, lr}
 800319c:	4605      	mov	r5, r0
 800319e:	460e      	mov	r6, r1
 80031a0:	6884      	ldr	r4, [r0, #8]
 80031a2:	b90b      	cbnz	r3, 80031a8 <_puts_r+0x10>
 80031a4:	f7ff ffc2 	bl	800312c <__sinit>
 80031a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80031aa:	07db      	lsls	r3, r3, #31
 80031ac:	d405      	bmi.n	80031ba <_puts_r+0x22>
 80031ae:	89a3      	ldrh	r3, [r4, #12]
 80031b0:	0598      	lsls	r0, r3, #22
 80031b2:	d402      	bmi.n	80031ba <_puts_r+0x22>
 80031b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031b6:	f000 f99e 	bl	80034f6 <__retarget_lock_acquire_recursive>
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	0719      	lsls	r1, r3, #28
 80031be:	d502      	bpl.n	80031c6 <_puts_r+0x2e>
 80031c0:	6923      	ldr	r3, [r4, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d135      	bne.n	8003232 <_puts_r+0x9a>
 80031c6:	4621      	mov	r1, r4
 80031c8:	4628      	mov	r0, r5
 80031ca:	f000 f8c5 	bl	8003358 <__swsetup_r>
 80031ce:	b380      	cbz	r0, 8003232 <_puts_r+0x9a>
 80031d0:	f04f 35ff 	mov.w	r5, #4294967295
 80031d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80031d6:	07da      	lsls	r2, r3, #31
 80031d8:	d405      	bmi.n	80031e6 <_puts_r+0x4e>
 80031da:	89a3      	ldrh	r3, [r4, #12]
 80031dc:	059b      	lsls	r3, r3, #22
 80031de:	d402      	bmi.n	80031e6 <_puts_r+0x4e>
 80031e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031e2:	f000 f989 	bl	80034f8 <__retarget_lock_release_recursive>
 80031e6:	4628      	mov	r0, r5
 80031e8:	bd70      	pop	{r4, r5, r6, pc}
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da04      	bge.n	80031f8 <_puts_r+0x60>
 80031ee:	69a2      	ldr	r2, [r4, #24]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	dc17      	bgt.n	8003224 <_puts_r+0x8c>
 80031f4:	290a      	cmp	r1, #10
 80031f6:	d015      	beq.n	8003224 <_puts_r+0x8c>
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	6022      	str	r2, [r4, #0]
 80031fe:	7019      	strb	r1, [r3, #0]
 8003200:	68a3      	ldr	r3, [r4, #8]
 8003202:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003206:	3b01      	subs	r3, #1
 8003208:	60a3      	str	r3, [r4, #8]
 800320a:	2900      	cmp	r1, #0
 800320c:	d1ed      	bne.n	80031ea <_puts_r+0x52>
 800320e:	2b00      	cmp	r3, #0
 8003210:	da11      	bge.n	8003236 <_puts_r+0x9e>
 8003212:	4622      	mov	r2, r4
 8003214:	210a      	movs	r1, #10
 8003216:	4628      	mov	r0, r5
 8003218:	f000 f85f 	bl	80032da <__swbuf_r>
 800321c:	3001      	adds	r0, #1
 800321e:	d0d7      	beq.n	80031d0 <_puts_r+0x38>
 8003220:	250a      	movs	r5, #10
 8003222:	e7d7      	b.n	80031d4 <_puts_r+0x3c>
 8003224:	4622      	mov	r2, r4
 8003226:	4628      	mov	r0, r5
 8003228:	f000 f857 	bl	80032da <__swbuf_r>
 800322c:	3001      	adds	r0, #1
 800322e:	d1e7      	bne.n	8003200 <_puts_r+0x68>
 8003230:	e7ce      	b.n	80031d0 <_puts_r+0x38>
 8003232:	3e01      	subs	r6, #1
 8003234:	e7e4      	b.n	8003200 <_puts_r+0x68>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	6022      	str	r2, [r4, #0]
 800323c:	220a      	movs	r2, #10
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e7ee      	b.n	8003220 <_puts_r+0x88>
	...

08003244 <puts>:
 8003244:	4b02      	ldr	r3, [pc, #8]	@ (8003250 <puts+0xc>)
 8003246:	4601      	mov	r1, r0
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	f7ff bfa5 	b.w	8003198 <_puts_r>
 800324e:	bf00      	nop
 8003250:	2000001c 	.word	0x2000001c

08003254 <__sread>:
 8003254:	b510      	push	{r4, lr}
 8003256:	460c      	mov	r4, r1
 8003258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800325c:	f000 f8fc 	bl	8003458 <_read_r>
 8003260:	2800      	cmp	r0, #0
 8003262:	bfab      	itete	ge
 8003264:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003266:	89a3      	ldrhlt	r3, [r4, #12]
 8003268:	181b      	addge	r3, r3, r0
 800326a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800326e:	bfac      	ite	ge
 8003270:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003272:	81a3      	strhlt	r3, [r4, #12]
 8003274:	bd10      	pop	{r4, pc}

08003276 <__swrite>:
 8003276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800327a:	461f      	mov	r7, r3
 800327c:	898b      	ldrh	r3, [r1, #12]
 800327e:	4605      	mov	r5, r0
 8003280:	05db      	lsls	r3, r3, #23
 8003282:	460c      	mov	r4, r1
 8003284:	4616      	mov	r6, r2
 8003286:	d505      	bpl.n	8003294 <__swrite+0x1e>
 8003288:	2302      	movs	r3, #2
 800328a:	2200      	movs	r2, #0
 800328c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003290:	f000 f8d0 	bl	8003434 <_lseek_r>
 8003294:	89a3      	ldrh	r3, [r4, #12]
 8003296:	4632      	mov	r2, r6
 8003298:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800329c:	81a3      	strh	r3, [r4, #12]
 800329e:	4628      	mov	r0, r5
 80032a0:	463b      	mov	r3, r7
 80032a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032aa:	f000 b8e7 	b.w	800347c <_write_r>

080032ae <__sseek>:
 80032ae:	b510      	push	{r4, lr}
 80032b0:	460c      	mov	r4, r1
 80032b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b6:	f000 f8bd 	bl	8003434 <_lseek_r>
 80032ba:	1c43      	adds	r3, r0, #1
 80032bc:	89a3      	ldrh	r3, [r4, #12]
 80032be:	bf15      	itete	ne
 80032c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80032c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80032ca:	81a3      	strheq	r3, [r4, #12]
 80032cc:	bf18      	it	ne
 80032ce:	81a3      	strhne	r3, [r4, #12]
 80032d0:	bd10      	pop	{r4, pc}

080032d2 <__sclose>:
 80032d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032d6:	f000 b89d 	b.w	8003414 <_close_r>

080032da <__swbuf_r>:
 80032da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032dc:	460e      	mov	r6, r1
 80032de:	4614      	mov	r4, r2
 80032e0:	4605      	mov	r5, r0
 80032e2:	b118      	cbz	r0, 80032ec <__swbuf_r+0x12>
 80032e4:	6a03      	ldr	r3, [r0, #32]
 80032e6:	b90b      	cbnz	r3, 80032ec <__swbuf_r+0x12>
 80032e8:	f7ff ff20 	bl	800312c <__sinit>
 80032ec:	69a3      	ldr	r3, [r4, #24]
 80032ee:	60a3      	str	r3, [r4, #8]
 80032f0:	89a3      	ldrh	r3, [r4, #12]
 80032f2:	071a      	lsls	r2, r3, #28
 80032f4:	d501      	bpl.n	80032fa <__swbuf_r+0x20>
 80032f6:	6923      	ldr	r3, [r4, #16]
 80032f8:	b943      	cbnz	r3, 800330c <__swbuf_r+0x32>
 80032fa:	4621      	mov	r1, r4
 80032fc:	4628      	mov	r0, r5
 80032fe:	f000 f82b 	bl	8003358 <__swsetup_r>
 8003302:	b118      	cbz	r0, 800330c <__swbuf_r+0x32>
 8003304:	f04f 37ff 	mov.w	r7, #4294967295
 8003308:	4638      	mov	r0, r7
 800330a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	6922      	ldr	r2, [r4, #16]
 8003310:	b2f6      	uxtb	r6, r6
 8003312:	1a98      	subs	r0, r3, r2
 8003314:	6963      	ldr	r3, [r4, #20]
 8003316:	4637      	mov	r7, r6
 8003318:	4283      	cmp	r3, r0
 800331a:	dc05      	bgt.n	8003328 <__swbuf_r+0x4e>
 800331c:	4621      	mov	r1, r4
 800331e:	4628      	mov	r0, r5
 8003320:	f000 fa62 	bl	80037e8 <_fflush_r>
 8003324:	2800      	cmp	r0, #0
 8003326:	d1ed      	bne.n	8003304 <__swbuf_r+0x2a>
 8003328:	68a3      	ldr	r3, [r4, #8]
 800332a:	3b01      	subs	r3, #1
 800332c:	60a3      	str	r3, [r4, #8]
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	6022      	str	r2, [r4, #0]
 8003334:	701e      	strb	r6, [r3, #0]
 8003336:	6962      	ldr	r2, [r4, #20]
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	429a      	cmp	r2, r3
 800333c:	d004      	beq.n	8003348 <__swbuf_r+0x6e>
 800333e:	89a3      	ldrh	r3, [r4, #12]
 8003340:	07db      	lsls	r3, r3, #31
 8003342:	d5e1      	bpl.n	8003308 <__swbuf_r+0x2e>
 8003344:	2e0a      	cmp	r6, #10
 8003346:	d1df      	bne.n	8003308 <__swbuf_r+0x2e>
 8003348:	4621      	mov	r1, r4
 800334a:	4628      	mov	r0, r5
 800334c:	f000 fa4c 	bl	80037e8 <_fflush_r>
 8003350:	2800      	cmp	r0, #0
 8003352:	d0d9      	beq.n	8003308 <__swbuf_r+0x2e>
 8003354:	e7d6      	b.n	8003304 <__swbuf_r+0x2a>
	...

08003358 <__swsetup_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	4b29      	ldr	r3, [pc, #164]	@ (8003400 <__swsetup_r+0xa8>)
 800335c:	4605      	mov	r5, r0
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	460c      	mov	r4, r1
 8003362:	b118      	cbz	r0, 800336c <__swsetup_r+0x14>
 8003364:	6a03      	ldr	r3, [r0, #32]
 8003366:	b90b      	cbnz	r3, 800336c <__swsetup_r+0x14>
 8003368:	f7ff fee0 	bl	800312c <__sinit>
 800336c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003370:	0719      	lsls	r1, r3, #28
 8003372:	d422      	bmi.n	80033ba <__swsetup_r+0x62>
 8003374:	06da      	lsls	r2, r3, #27
 8003376:	d407      	bmi.n	8003388 <__swsetup_r+0x30>
 8003378:	2209      	movs	r2, #9
 800337a:	602a      	str	r2, [r5, #0]
 800337c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	81a3      	strh	r3, [r4, #12]
 8003386:	e033      	b.n	80033f0 <__swsetup_r+0x98>
 8003388:	0758      	lsls	r0, r3, #29
 800338a:	d512      	bpl.n	80033b2 <__swsetup_r+0x5a>
 800338c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800338e:	b141      	cbz	r1, 80033a2 <__swsetup_r+0x4a>
 8003390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003394:	4299      	cmp	r1, r3
 8003396:	d002      	beq.n	800339e <__swsetup_r+0x46>
 8003398:	4628      	mov	r0, r5
 800339a:	f000 f8af 	bl	80034fc <_free_r>
 800339e:	2300      	movs	r3, #0
 80033a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80033a2:	89a3      	ldrh	r3, [r4, #12]
 80033a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80033a8:	81a3      	strh	r3, [r4, #12]
 80033aa:	2300      	movs	r3, #0
 80033ac:	6063      	str	r3, [r4, #4]
 80033ae:	6923      	ldr	r3, [r4, #16]
 80033b0:	6023      	str	r3, [r4, #0]
 80033b2:	89a3      	ldrh	r3, [r4, #12]
 80033b4:	f043 0308 	orr.w	r3, r3, #8
 80033b8:	81a3      	strh	r3, [r4, #12]
 80033ba:	6923      	ldr	r3, [r4, #16]
 80033bc:	b94b      	cbnz	r3, 80033d2 <__swsetup_r+0x7a>
 80033be:	89a3      	ldrh	r3, [r4, #12]
 80033c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80033c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033c8:	d003      	beq.n	80033d2 <__swsetup_r+0x7a>
 80033ca:	4621      	mov	r1, r4
 80033cc:	4628      	mov	r0, r5
 80033ce:	f000 fa58 	bl	8003882 <__smakebuf_r>
 80033d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033d6:	f013 0201 	ands.w	r2, r3, #1
 80033da:	d00a      	beq.n	80033f2 <__swsetup_r+0x9a>
 80033dc:	2200      	movs	r2, #0
 80033de:	60a2      	str	r2, [r4, #8]
 80033e0:	6962      	ldr	r2, [r4, #20]
 80033e2:	4252      	negs	r2, r2
 80033e4:	61a2      	str	r2, [r4, #24]
 80033e6:	6922      	ldr	r2, [r4, #16]
 80033e8:	b942      	cbnz	r2, 80033fc <__swsetup_r+0xa4>
 80033ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80033ee:	d1c5      	bne.n	800337c <__swsetup_r+0x24>
 80033f0:	bd38      	pop	{r3, r4, r5, pc}
 80033f2:	0799      	lsls	r1, r3, #30
 80033f4:	bf58      	it	pl
 80033f6:	6962      	ldrpl	r2, [r4, #20]
 80033f8:	60a2      	str	r2, [r4, #8]
 80033fa:	e7f4      	b.n	80033e6 <__swsetup_r+0x8e>
 80033fc:	2000      	movs	r0, #0
 80033fe:	e7f7      	b.n	80033f0 <__swsetup_r+0x98>
 8003400:	2000001c 	.word	0x2000001c

08003404 <memset>:
 8003404:	4603      	mov	r3, r0
 8003406:	4402      	add	r2, r0
 8003408:	4293      	cmp	r3, r2
 800340a:	d100      	bne.n	800340e <memset+0xa>
 800340c:	4770      	bx	lr
 800340e:	f803 1b01 	strb.w	r1, [r3], #1
 8003412:	e7f9      	b.n	8003408 <memset+0x4>

08003414 <_close_r>:
 8003414:	b538      	push	{r3, r4, r5, lr}
 8003416:	2300      	movs	r3, #0
 8003418:	4d05      	ldr	r5, [pc, #20]	@ (8003430 <_close_r+0x1c>)
 800341a:	4604      	mov	r4, r0
 800341c:	4608      	mov	r0, r1
 800341e:	602b      	str	r3, [r5, #0]
 8003420:	f7fd fc0b 	bl	8000c3a <_close>
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	d102      	bne.n	800342e <_close_r+0x1a>
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	b103      	cbz	r3, 800342e <_close_r+0x1a>
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	bd38      	pop	{r3, r4, r5, pc}
 8003430:	200002b0 	.word	0x200002b0

08003434 <_lseek_r>:
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	4604      	mov	r4, r0
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	2200      	movs	r2, #0
 800343e:	4d05      	ldr	r5, [pc, #20]	@ (8003454 <_lseek_r+0x20>)
 8003440:	602a      	str	r2, [r5, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	f7fd fc1d 	bl	8000c82 <_lseek>
 8003448:	1c43      	adds	r3, r0, #1
 800344a:	d102      	bne.n	8003452 <_lseek_r+0x1e>
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	b103      	cbz	r3, 8003452 <_lseek_r+0x1e>
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	200002b0 	.word	0x200002b0

08003458 <_read_r>:
 8003458:	b538      	push	{r3, r4, r5, lr}
 800345a:	4604      	mov	r4, r0
 800345c:	4608      	mov	r0, r1
 800345e:	4611      	mov	r1, r2
 8003460:	2200      	movs	r2, #0
 8003462:	4d05      	ldr	r5, [pc, #20]	@ (8003478 <_read_r+0x20>)
 8003464:	602a      	str	r2, [r5, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	f7fd fbae 	bl	8000bc8 <_read>
 800346c:	1c43      	adds	r3, r0, #1
 800346e:	d102      	bne.n	8003476 <_read_r+0x1e>
 8003470:	682b      	ldr	r3, [r5, #0]
 8003472:	b103      	cbz	r3, 8003476 <_read_r+0x1e>
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	bd38      	pop	{r3, r4, r5, pc}
 8003478:	200002b0 	.word	0x200002b0

0800347c <_write_r>:
 800347c:	b538      	push	{r3, r4, r5, lr}
 800347e:	4604      	mov	r4, r0
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	2200      	movs	r2, #0
 8003486:	4d05      	ldr	r5, [pc, #20]	@ (800349c <_write_r+0x20>)
 8003488:	602a      	str	r2, [r5, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	f7fd fbb9 	bl	8000c02 <_write>
 8003490:	1c43      	adds	r3, r0, #1
 8003492:	d102      	bne.n	800349a <_write_r+0x1e>
 8003494:	682b      	ldr	r3, [r5, #0]
 8003496:	b103      	cbz	r3, 800349a <_write_r+0x1e>
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	bd38      	pop	{r3, r4, r5, pc}
 800349c:	200002b0 	.word	0x200002b0

080034a0 <__errno>:
 80034a0:	4b01      	ldr	r3, [pc, #4]	@ (80034a8 <__errno+0x8>)
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	2000001c 	.word	0x2000001c

080034ac <__libc_init_array>:
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	2600      	movs	r6, #0
 80034b0:	4d0c      	ldr	r5, [pc, #48]	@ (80034e4 <__libc_init_array+0x38>)
 80034b2:	4c0d      	ldr	r4, [pc, #52]	@ (80034e8 <__libc_init_array+0x3c>)
 80034b4:	1b64      	subs	r4, r4, r5
 80034b6:	10a4      	asrs	r4, r4, #2
 80034b8:	42a6      	cmp	r6, r4
 80034ba:	d109      	bne.n	80034d0 <__libc_init_array+0x24>
 80034bc:	f000 fa50 	bl	8003960 <_init>
 80034c0:	2600      	movs	r6, #0
 80034c2:	4d0a      	ldr	r5, [pc, #40]	@ (80034ec <__libc_init_array+0x40>)
 80034c4:	4c0a      	ldr	r4, [pc, #40]	@ (80034f0 <__libc_init_array+0x44>)
 80034c6:	1b64      	subs	r4, r4, r5
 80034c8:	10a4      	asrs	r4, r4, #2
 80034ca:	42a6      	cmp	r6, r4
 80034cc:	d105      	bne.n	80034da <__libc_init_array+0x2e>
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d4:	4798      	blx	r3
 80034d6:	3601      	adds	r6, #1
 80034d8:	e7ee      	b.n	80034b8 <__libc_init_array+0xc>
 80034da:	f855 3b04 	ldr.w	r3, [r5], #4
 80034de:	4798      	blx	r3
 80034e0:	3601      	adds	r6, #1
 80034e2:	e7f2      	b.n	80034ca <__libc_init_array+0x1e>
 80034e4:	08003a00 	.word	0x08003a00
 80034e8:	08003a00 	.word	0x08003a00
 80034ec:	08003a00 	.word	0x08003a00
 80034f0:	08003a04 	.word	0x08003a04

080034f4 <__retarget_lock_init_recursive>:
 80034f4:	4770      	bx	lr

080034f6 <__retarget_lock_acquire_recursive>:
 80034f6:	4770      	bx	lr

080034f8 <__retarget_lock_release_recursive>:
 80034f8:	4770      	bx	lr
	...

080034fc <_free_r>:
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	4605      	mov	r5, r0
 8003500:	2900      	cmp	r1, #0
 8003502:	d040      	beq.n	8003586 <_free_r+0x8a>
 8003504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003508:	1f0c      	subs	r4, r1, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	bfb8      	it	lt
 800350e:	18e4      	addlt	r4, r4, r3
 8003510:	f000 f8de 	bl	80036d0 <__malloc_lock>
 8003514:	4a1c      	ldr	r2, [pc, #112]	@ (8003588 <_free_r+0x8c>)
 8003516:	6813      	ldr	r3, [r2, #0]
 8003518:	b933      	cbnz	r3, 8003528 <_free_r+0x2c>
 800351a:	6063      	str	r3, [r4, #4]
 800351c:	6014      	str	r4, [r2, #0]
 800351e:	4628      	mov	r0, r5
 8003520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003524:	f000 b8da 	b.w	80036dc <__malloc_unlock>
 8003528:	42a3      	cmp	r3, r4
 800352a:	d908      	bls.n	800353e <_free_r+0x42>
 800352c:	6820      	ldr	r0, [r4, #0]
 800352e:	1821      	adds	r1, r4, r0
 8003530:	428b      	cmp	r3, r1
 8003532:	bf01      	itttt	eq
 8003534:	6819      	ldreq	r1, [r3, #0]
 8003536:	685b      	ldreq	r3, [r3, #4]
 8003538:	1809      	addeq	r1, r1, r0
 800353a:	6021      	streq	r1, [r4, #0]
 800353c:	e7ed      	b.n	800351a <_free_r+0x1e>
 800353e:	461a      	mov	r2, r3
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	b10b      	cbz	r3, 8003548 <_free_r+0x4c>
 8003544:	42a3      	cmp	r3, r4
 8003546:	d9fa      	bls.n	800353e <_free_r+0x42>
 8003548:	6811      	ldr	r1, [r2, #0]
 800354a:	1850      	adds	r0, r2, r1
 800354c:	42a0      	cmp	r0, r4
 800354e:	d10b      	bne.n	8003568 <_free_r+0x6c>
 8003550:	6820      	ldr	r0, [r4, #0]
 8003552:	4401      	add	r1, r0
 8003554:	1850      	adds	r0, r2, r1
 8003556:	4283      	cmp	r3, r0
 8003558:	6011      	str	r1, [r2, #0]
 800355a:	d1e0      	bne.n	800351e <_free_r+0x22>
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4408      	add	r0, r1
 8003562:	6010      	str	r0, [r2, #0]
 8003564:	6053      	str	r3, [r2, #4]
 8003566:	e7da      	b.n	800351e <_free_r+0x22>
 8003568:	d902      	bls.n	8003570 <_free_r+0x74>
 800356a:	230c      	movs	r3, #12
 800356c:	602b      	str	r3, [r5, #0]
 800356e:	e7d6      	b.n	800351e <_free_r+0x22>
 8003570:	6820      	ldr	r0, [r4, #0]
 8003572:	1821      	adds	r1, r4, r0
 8003574:	428b      	cmp	r3, r1
 8003576:	bf01      	itttt	eq
 8003578:	6819      	ldreq	r1, [r3, #0]
 800357a:	685b      	ldreq	r3, [r3, #4]
 800357c:	1809      	addeq	r1, r1, r0
 800357e:	6021      	streq	r1, [r4, #0]
 8003580:	6063      	str	r3, [r4, #4]
 8003582:	6054      	str	r4, [r2, #4]
 8003584:	e7cb      	b.n	800351e <_free_r+0x22>
 8003586:	bd38      	pop	{r3, r4, r5, pc}
 8003588:	200002bc 	.word	0x200002bc

0800358c <sbrk_aligned>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	4e0f      	ldr	r6, [pc, #60]	@ (80035cc <sbrk_aligned+0x40>)
 8003590:	460c      	mov	r4, r1
 8003592:	6831      	ldr	r1, [r6, #0]
 8003594:	4605      	mov	r5, r0
 8003596:	b911      	cbnz	r1, 800359e <sbrk_aligned+0x12>
 8003598:	f000 f9d2 	bl	8003940 <_sbrk_r>
 800359c:	6030      	str	r0, [r6, #0]
 800359e:	4621      	mov	r1, r4
 80035a0:	4628      	mov	r0, r5
 80035a2:	f000 f9cd 	bl	8003940 <_sbrk_r>
 80035a6:	1c43      	adds	r3, r0, #1
 80035a8:	d103      	bne.n	80035b2 <sbrk_aligned+0x26>
 80035aa:	f04f 34ff 	mov.w	r4, #4294967295
 80035ae:	4620      	mov	r0, r4
 80035b0:	bd70      	pop	{r4, r5, r6, pc}
 80035b2:	1cc4      	adds	r4, r0, #3
 80035b4:	f024 0403 	bic.w	r4, r4, #3
 80035b8:	42a0      	cmp	r0, r4
 80035ba:	d0f8      	beq.n	80035ae <sbrk_aligned+0x22>
 80035bc:	1a21      	subs	r1, r4, r0
 80035be:	4628      	mov	r0, r5
 80035c0:	f000 f9be 	bl	8003940 <_sbrk_r>
 80035c4:	3001      	adds	r0, #1
 80035c6:	d1f2      	bne.n	80035ae <sbrk_aligned+0x22>
 80035c8:	e7ef      	b.n	80035aa <sbrk_aligned+0x1e>
 80035ca:	bf00      	nop
 80035cc:	200002b8 	.word	0x200002b8

080035d0 <_malloc_r>:
 80035d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035d4:	1ccd      	adds	r5, r1, #3
 80035d6:	f025 0503 	bic.w	r5, r5, #3
 80035da:	3508      	adds	r5, #8
 80035dc:	2d0c      	cmp	r5, #12
 80035de:	bf38      	it	cc
 80035e0:	250c      	movcc	r5, #12
 80035e2:	2d00      	cmp	r5, #0
 80035e4:	4606      	mov	r6, r0
 80035e6:	db01      	blt.n	80035ec <_malloc_r+0x1c>
 80035e8:	42a9      	cmp	r1, r5
 80035ea:	d904      	bls.n	80035f6 <_malloc_r+0x26>
 80035ec:	230c      	movs	r3, #12
 80035ee:	6033      	str	r3, [r6, #0]
 80035f0:	2000      	movs	r0, #0
 80035f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036cc <_malloc_r+0xfc>
 80035fa:	f000 f869 	bl	80036d0 <__malloc_lock>
 80035fe:	f8d8 3000 	ldr.w	r3, [r8]
 8003602:	461c      	mov	r4, r3
 8003604:	bb44      	cbnz	r4, 8003658 <_malloc_r+0x88>
 8003606:	4629      	mov	r1, r5
 8003608:	4630      	mov	r0, r6
 800360a:	f7ff ffbf 	bl	800358c <sbrk_aligned>
 800360e:	1c43      	adds	r3, r0, #1
 8003610:	4604      	mov	r4, r0
 8003612:	d158      	bne.n	80036c6 <_malloc_r+0xf6>
 8003614:	f8d8 4000 	ldr.w	r4, [r8]
 8003618:	4627      	mov	r7, r4
 800361a:	2f00      	cmp	r7, #0
 800361c:	d143      	bne.n	80036a6 <_malloc_r+0xd6>
 800361e:	2c00      	cmp	r4, #0
 8003620:	d04b      	beq.n	80036ba <_malloc_r+0xea>
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	4639      	mov	r1, r7
 8003626:	4630      	mov	r0, r6
 8003628:	eb04 0903 	add.w	r9, r4, r3
 800362c:	f000 f988 	bl	8003940 <_sbrk_r>
 8003630:	4581      	cmp	r9, r0
 8003632:	d142      	bne.n	80036ba <_malloc_r+0xea>
 8003634:	6821      	ldr	r1, [r4, #0]
 8003636:	4630      	mov	r0, r6
 8003638:	1a6d      	subs	r5, r5, r1
 800363a:	4629      	mov	r1, r5
 800363c:	f7ff ffa6 	bl	800358c <sbrk_aligned>
 8003640:	3001      	adds	r0, #1
 8003642:	d03a      	beq.n	80036ba <_malloc_r+0xea>
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	442b      	add	r3, r5
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	f8d8 3000 	ldr.w	r3, [r8]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	bb62      	cbnz	r2, 80036ac <_malloc_r+0xdc>
 8003652:	f8c8 7000 	str.w	r7, [r8]
 8003656:	e00f      	b.n	8003678 <_malloc_r+0xa8>
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	1b52      	subs	r2, r2, r5
 800365c:	d420      	bmi.n	80036a0 <_malloc_r+0xd0>
 800365e:	2a0b      	cmp	r2, #11
 8003660:	d917      	bls.n	8003692 <_malloc_r+0xc2>
 8003662:	1961      	adds	r1, r4, r5
 8003664:	42a3      	cmp	r3, r4
 8003666:	6025      	str	r5, [r4, #0]
 8003668:	bf18      	it	ne
 800366a:	6059      	strne	r1, [r3, #4]
 800366c:	6863      	ldr	r3, [r4, #4]
 800366e:	bf08      	it	eq
 8003670:	f8c8 1000 	streq.w	r1, [r8]
 8003674:	5162      	str	r2, [r4, r5]
 8003676:	604b      	str	r3, [r1, #4]
 8003678:	4630      	mov	r0, r6
 800367a:	f000 f82f 	bl	80036dc <__malloc_unlock>
 800367e:	f104 000b 	add.w	r0, r4, #11
 8003682:	1d23      	adds	r3, r4, #4
 8003684:	f020 0007 	bic.w	r0, r0, #7
 8003688:	1ac2      	subs	r2, r0, r3
 800368a:	bf1c      	itt	ne
 800368c:	1a1b      	subne	r3, r3, r0
 800368e:	50a3      	strne	r3, [r4, r2]
 8003690:	e7af      	b.n	80035f2 <_malloc_r+0x22>
 8003692:	6862      	ldr	r2, [r4, #4]
 8003694:	42a3      	cmp	r3, r4
 8003696:	bf0c      	ite	eq
 8003698:	f8c8 2000 	streq.w	r2, [r8]
 800369c:	605a      	strne	r2, [r3, #4]
 800369e:	e7eb      	b.n	8003678 <_malloc_r+0xa8>
 80036a0:	4623      	mov	r3, r4
 80036a2:	6864      	ldr	r4, [r4, #4]
 80036a4:	e7ae      	b.n	8003604 <_malloc_r+0x34>
 80036a6:	463c      	mov	r4, r7
 80036a8:	687f      	ldr	r7, [r7, #4]
 80036aa:	e7b6      	b.n	800361a <_malloc_r+0x4a>
 80036ac:	461a      	mov	r2, r3
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	42a3      	cmp	r3, r4
 80036b2:	d1fb      	bne.n	80036ac <_malloc_r+0xdc>
 80036b4:	2300      	movs	r3, #0
 80036b6:	6053      	str	r3, [r2, #4]
 80036b8:	e7de      	b.n	8003678 <_malloc_r+0xa8>
 80036ba:	230c      	movs	r3, #12
 80036bc:	4630      	mov	r0, r6
 80036be:	6033      	str	r3, [r6, #0]
 80036c0:	f000 f80c 	bl	80036dc <__malloc_unlock>
 80036c4:	e794      	b.n	80035f0 <_malloc_r+0x20>
 80036c6:	6005      	str	r5, [r0, #0]
 80036c8:	e7d6      	b.n	8003678 <_malloc_r+0xa8>
 80036ca:	bf00      	nop
 80036cc:	200002bc 	.word	0x200002bc

080036d0 <__malloc_lock>:
 80036d0:	4801      	ldr	r0, [pc, #4]	@ (80036d8 <__malloc_lock+0x8>)
 80036d2:	f7ff bf10 	b.w	80034f6 <__retarget_lock_acquire_recursive>
 80036d6:	bf00      	nop
 80036d8:	200002b4 	.word	0x200002b4

080036dc <__malloc_unlock>:
 80036dc:	4801      	ldr	r0, [pc, #4]	@ (80036e4 <__malloc_unlock+0x8>)
 80036de:	f7ff bf0b 	b.w	80034f8 <__retarget_lock_release_recursive>
 80036e2:	bf00      	nop
 80036e4:	200002b4 	.word	0x200002b4

080036e8 <__sflush_r>:
 80036e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ee:	0716      	lsls	r6, r2, #28
 80036f0:	4605      	mov	r5, r0
 80036f2:	460c      	mov	r4, r1
 80036f4:	d454      	bmi.n	80037a0 <__sflush_r+0xb8>
 80036f6:	684b      	ldr	r3, [r1, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	dc02      	bgt.n	8003702 <__sflush_r+0x1a>
 80036fc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	dd48      	ble.n	8003794 <__sflush_r+0xac>
 8003702:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003704:	2e00      	cmp	r6, #0
 8003706:	d045      	beq.n	8003794 <__sflush_r+0xac>
 8003708:	2300      	movs	r3, #0
 800370a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800370e:	682f      	ldr	r7, [r5, #0]
 8003710:	6a21      	ldr	r1, [r4, #32]
 8003712:	602b      	str	r3, [r5, #0]
 8003714:	d030      	beq.n	8003778 <__sflush_r+0x90>
 8003716:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	0759      	lsls	r1, r3, #29
 800371c:	d505      	bpl.n	800372a <__sflush_r+0x42>
 800371e:	6863      	ldr	r3, [r4, #4]
 8003720:	1ad2      	subs	r2, r2, r3
 8003722:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003724:	b10b      	cbz	r3, 800372a <__sflush_r+0x42>
 8003726:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003728:	1ad2      	subs	r2, r2, r3
 800372a:	2300      	movs	r3, #0
 800372c:	4628      	mov	r0, r5
 800372e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003730:	6a21      	ldr	r1, [r4, #32]
 8003732:	47b0      	blx	r6
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	89a3      	ldrh	r3, [r4, #12]
 8003738:	d106      	bne.n	8003748 <__sflush_r+0x60>
 800373a:	6829      	ldr	r1, [r5, #0]
 800373c:	291d      	cmp	r1, #29
 800373e:	d82b      	bhi.n	8003798 <__sflush_r+0xb0>
 8003740:	4a28      	ldr	r2, [pc, #160]	@ (80037e4 <__sflush_r+0xfc>)
 8003742:	40ca      	lsrs	r2, r1
 8003744:	07d6      	lsls	r6, r2, #31
 8003746:	d527      	bpl.n	8003798 <__sflush_r+0xb0>
 8003748:	2200      	movs	r2, #0
 800374a:	6062      	str	r2, [r4, #4]
 800374c:	6922      	ldr	r2, [r4, #16]
 800374e:	04d9      	lsls	r1, r3, #19
 8003750:	6022      	str	r2, [r4, #0]
 8003752:	d504      	bpl.n	800375e <__sflush_r+0x76>
 8003754:	1c42      	adds	r2, r0, #1
 8003756:	d101      	bne.n	800375c <__sflush_r+0x74>
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	b903      	cbnz	r3, 800375e <__sflush_r+0x76>
 800375c:	6560      	str	r0, [r4, #84]	@ 0x54
 800375e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003760:	602f      	str	r7, [r5, #0]
 8003762:	b1b9      	cbz	r1, 8003794 <__sflush_r+0xac>
 8003764:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003768:	4299      	cmp	r1, r3
 800376a:	d002      	beq.n	8003772 <__sflush_r+0x8a>
 800376c:	4628      	mov	r0, r5
 800376e:	f7ff fec5 	bl	80034fc <_free_r>
 8003772:	2300      	movs	r3, #0
 8003774:	6363      	str	r3, [r4, #52]	@ 0x34
 8003776:	e00d      	b.n	8003794 <__sflush_r+0xac>
 8003778:	2301      	movs	r3, #1
 800377a:	4628      	mov	r0, r5
 800377c:	47b0      	blx	r6
 800377e:	4602      	mov	r2, r0
 8003780:	1c50      	adds	r0, r2, #1
 8003782:	d1c9      	bne.n	8003718 <__sflush_r+0x30>
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0c6      	beq.n	8003718 <__sflush_r+0x30>
 800378a:	2b1d      	cmp	r3, #29
 800378c:	d001      	beq.n	8003792 <__sflush_r+0xaa>
 800378e:	2b16      	cmp	r3, #22
 8003790:	d11d      	bne.n	80037ce <__sflush_r+0xe6>
 8003792:	602f      	str	r7, [r5, #0]
 8003794:	2000      	movs	r0, #0
 8003796:	e021      	b.n	80037dc <__sflush_r+0xf4>
 8003798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800379c:	b21b      	sxth	r3, r3
 800379e:	e01a      	b.n	80037d6 <__sflush_r+0xee>
 80037a0:	690f      	ldr	r7, [r1, #16]
 80037a2:	2f00      	cmp	r7, #0
 80037a4:	d0f6      	beq.n	8003794 <__sflush_r+0xac>
 80037a6:	0793      	lsls	r3, r2, #30
 80037a8:	bf18      	it	ne
 80037aa:	2300      	movne	r3, #0
 80037ac:	680e      	ldr	r6, [r1, #0]
 80037ae:	bf08      	it	eq
 80037b0:	694b      	ldreq	r3, [r1, #20]
 80037b2:	1bf6      	subs	r6, r6, r7
 80037b4:	600f      	str	r7, [r1, #0]
 80037b6:	608b      	str	r3, [r1, #8]
 80037b8:	2e00      	cmp	r6, #0
 80037ba:	ddeb      	ble.n	8003794 <__sflush_r+0xac>
 80037bc:	4633      	mov	r3, r6
 80037be:	463a      	mov	r2, r7
 80037c0:	4628      	mov	r0, r5
 80037c2:	6a21      	ldr	r1, [r4, #32]
 80037c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80037c8:	47e0      	blx	ip
 80037ca:	2800      	cmp	r0, #0
 80037cc:	dc07      	bgt.n	80037de <__sflush_r+0xf6>
 80037ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037d6:	f04f 30ff 	mov.w	r0, #4294967295
 80037da:	81a3      	strh	r3, [r4, #12]
 80037dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037de:	4407      	add	r7, r0
 80037e0:	1a36      	subs	r6, r6, r0
 80037e2:	e7e9      	b.n	80037b8 <__sflush_r+0xd0>
 80037e4:	20400001 	.word	0x20400001

080037e8 <_fflush_r>:
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	690b      	ldr	r3, [r1, #16]
 80037ec:	4605      	mov	r5, r0
 80037ee:	460c      	mov	r4, r1
 80037f0:	b913      	cbnz	r3, 80037f8 <_fflush_r+0x10>
 80037f2:	2500      	movs	r5, #0
 80037f4:	4628      	mov	r0, r5
 80037f6:	bd38      	pop	{r3, r4, r5, pc}
 80037f8:	b118      	cbz	r0, 8003802 <_fflush_r+0x1a>
 80037fa:	6a03      	ldr	r3, [r0, #32]
 80037fc:	b90b      	cbnz	r3, 8003802 <_fflush_r+0x1a>
 80037fe:	f7ff fc95 	bl	800312c <__sinit>
 8003802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f3      	beq.n	80037f2 <_fflush_r+0xa>
 800380a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800380c:	07d0      	lsls	r0, r2, #31
 800380e:	d404      	bmi.n	800381a <_fflush_r+0x32>
 8003810:	0599      	lsls	r1, r3, #22
 8003812:	d402      	bmi.n	800381a <_fflush_r+0x32>
 8003814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003816:	f7ff fe6e 	bl	80034f6 <__retarget_lock_acquire_recursive>
 800381a:	4628      	mov	r0, r5
 800381c:	4621      	mov	r1, r4
 800381e:	f7ff ff63 	bl	80036e8 <__sflush_r>
 8003822:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003824:	4605      	mov	r5, r0
 8003826:	07da      	lsls	r2, r3, #31
 8003828:	d4e4      	bmi.n	80037f4 <_fflush_r+0xc>
 800382a:	89a3      	ldrh	r3, [r4, #12]
 800382c:	059b      	lsls	r3, r3, #22
 800382e:	d4e1      	bmi.n	80037f4 <_fflush_r+0xc>
 8003830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003832:	f7ff fe61 	bl	80034f8 <__retarget_lock_release_recursive>
 8003836:	e7dd      	b.n	80037f4 <_fflush_r+0xc>

08003838 <__swhatbuf_r>:
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	460c      	mov	r4, r1
 800383c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003840:	4615      	mov	r5, r2
 8003842:	2900      	cmp	r1, #0
 8003844:	461e      	mov	r6, r3
 8003846:	b096      	sub	sp, #88	@ 0x58
 8003848:	da0c      	bge.n	8003864 <__swhatbuf_r+0x2c>
 800384a:	89a3      	ldrh	r3, [r4, #12]
 800384c:	2100      	movs	r1, #0
 800384e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003852:	bf14      	ite	ne
 8003854:	2340      	movne	r3, #64	@ 0x40
 8003856:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800385a:	2000      	movs	r0, #0
 800385c:	6031      	str	r1, [r6, #0]
 800385e:	602b      	str	r3, [r5, #0]
 8003860:	b016      	add	sp, #88	@ 0x58
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	466a      	mov	r2, sp
 8003866:	f000 f849 	bl	80038fc <_fstat_r>
 800386a:	2800      	cmp	r0, #0
 800386c:	dbed      	blt.n	800384a <__swhatbuf_r+0x12>
 800386e:	9901      	ldr	r1, [sp, #4]
 8003870:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003874:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003878:	4259      	negs	r1, r3
 800387a:	4159      	adcs	r1, r3
 800387c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003880:	e7eb      	b.n	800385a <__swhatbuf_r+0x22>

08003882 <__smakebuf_r>:
 8003882:	898b      	ldrh	r3, [r1, #12]
 8003884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003886:	079d      	lsls	r5, r3, #30
 8003888:	4606      	mov	r6, r0
 800388a:	460c      	mov	r4, r1
 800388c:	d507      	bpl.n	800389e <__smakebuf_r+0x1c>
 800388e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	6123      	str	r3, [r4, #16]
 8003896:	2301      	movs	r3, #1
 8003898:	6163      	str	r3, [r4, #20]
 800389a:	b003      	add	sp, #12
 800389c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800389e:	466a      	mov	r2, sp
 80038a0:	ab01      	add	r3, sp, #4
 80038a2:	f7ff ffc9 	bl	8003838 <__swhatbuf_r>
 80038a6:	9f00      	ldr	r7, [sp, #0]
 80038a8:	4605      	mov	r5, r0
 80038aa:	4639      	mov	r1, r7
 80038ac:	4630      	mov	r0, r6
 80038ae:	f7ff fe8f 	bl	80035d0 <_malloc_r>
 80038b2:	b948      	cbnz	r0, 80038c8 <__smakebuf_r+0x46>
 80038b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038b8:	059a      	lsls	r2, r3, #22
 80038ba:	d4ee      	bmi.n	800389a <__smakebuf_r+0x18>
 80038bc:	f023 0303 	bic.w	r3, r3, #3
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	81a3      	strh	r3, [r4, #12]
 80038c6:	e7e2      	b.n	800388e <__smakebuf_r+0xc>
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80038ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d2:	81a3      	strh	r3, [r4, #12]
 80038d4:	9b01      	ldr	r3, [sp, #4]
 80038d6:	6020      	str	r0, [r4, #0]
 80038d8:	b15b      	cbz	r3, 80038f2 <__smakebuf_r+0x70>
 80038da:	4630      	mov	r0, r6
 80038dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038e0:	f000 f81e 	bl	8003920 <_isatty_r>
 80038e4:	b128      	cbz	r0, 80038f2 <__smakebuf_r+0x70>
 80038e6:	89a3      	ldrh	r3, [r4, #12]
 80038e8:	f023 0303 	bic.w	r3, r3, #3
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	81a3      	strh	r3, [r4, #12]
 80038f2:	89a3      	ldrh	r3, [r4, #12]
 80038f4:	431d      	orrs	r5, r3
 80038f6:	81a5      	strh	r5, [r4, #12]
 80038f8:	e7cf      	b.n	800389a <__smakebuf_r+0x18>
	...

080038fc <_fstat_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	2300      	movs	r3, #0
 8003900:	4d06      	ldr	r5, [pc, #24]	@ (800391c <_fstat_r+0x20>)
 8003902:	4604      	mov	r4, r0
 8003904:	4608      	mov	r0, r1
 8003906:	4611      	mov	r1, r2
 8003908:	602b      	str	r3, [r5, #0]
 800390a:	f7fd f9a1 	bl	8000c50 <_fstat>
 800390e:	1c43      	adds	r3, r0, #1
 8003910:	d102      	bne.n	8003918 <_fstat_r+0x1c>
 8003912:	682b      	ldr	r3, [r5, #0]
 8003914:	b103      	cbz	r3, 8003918 <_fstat_r+0x1c>
 8003916:	6023      	str	r3, [r4, #0]
 8003918:	bd38      	pop	{r3, r4, r5, pc}
 800391a:	bf00      	nop
 800391c:	200002b0 	.word	0x200002b0

08003920 <_isatty_r>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	2300      	movs	r3, #0
 8003924:	4d05      	ldr	r5, [pc, #20]	@ (800393c <_isatty_r+0x1c>)
 8003926:	4604      	mov	r4, r0
 8003928:	4608      	mov	r0, r1
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	f7fd f99f 	bl	8000c6e <_isatty>
 8003930:	1c43      	adds	r3, r0, #1
 8003932:	d102      	bne.n	800393a <_isatty_r+0x1a>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	b103      	cbz	r3, 800393a <_isatty_r+0x1a>
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	bd38      	pop	{r3, r4, r5, pc}
 800393c:	200002b0 	.word	0x200002b0

08003940 <_sbrk_r>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	2300      	movs	r3, #0
 8003944:	4d05      	ldr	r5, [pc, #20]	@ (800395c <_sbrk_r+0x1c>)
 8003946:	4604      	mov	r4, r0
 8003948:	4608      	mov	r0, r1
 800394a:	602b      	str	r3, [r5, #0]
 800394c:	f7fd f9a6 	bl	8000c9c <_sbrk>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d102      	bne.n	800395a <_sbrk_r+0x1a>
 8003954:	682b      	ldr	r3, [r5, #0]
 8003956:	b103      	cbz	r3, 800395a <_sbrk_r+0x1a>
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	bd38      	pop	{r3, r4, r5, pc}
 800395c:	200002b0 	.word	0x200002b0

08003960 <_init>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr

0800396c <_fini>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr
