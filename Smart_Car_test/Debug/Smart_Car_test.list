
Smart_Car_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e64  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003f70  08003f70  00004f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800406c  0800406c  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800406c  0800406c  0000606c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800406c  0800406c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800406c  0800406c  0000506c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004070  08004070  00005070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004074  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000006c  080040e0  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080040e0  000062c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c30b  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dff  00000000  00000000  000123a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  000141a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a20  00000000  00000000  00014e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187af  00000000  00000000  000158b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000def7  00000000  00000000  0002e067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c578  00000000  00000000  0003bf5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c84d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd4  00000000  00000000  000c851c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cc2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f58 	.word	0x08003f58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003f58 	.word	0x08003f58

0800014c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f002 f948 	bl	80023f8 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f002 f941 	bl	80023f8 <HAL_UART_Transmit>

	return ch;
 8000176:	687b      	ldr	r3, [r7, #4]

}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08003f70 	.word	0x08003f70
 8000184:	20000118 	.word	0x20000118

08000188 <Smartcar_forward>:

void Smartcar_forward(){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RR_F_GPIO_Port, RR_F_Pin, 1); // PB8  뒤앞   21 22  RR_F /Right_RearForward
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000192:	4816      	ldr	r0, [pc, #88]	@ (80001ec <Smartcar_forward+0x64>)
 8000194:	f001 f9d1 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_B_GPIO_Port, RR_B_Pin, 0); // PB9  뒤백	RR_B Right_RearBack
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800019e:	4813      	ldr	r0, [pc, #76]	@ (80001ec <Smartcar_forward+0x64>)
 80001a0:	f001 f9cb 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RF_F_GPIO_Port, RF_F_Pin, 1); // PB4 앞앞  17 16 RF_F
 80001a4:	2201      	movs	r2, #1
 80001a6:	2110      	movs	r1, #16
 80001a8:	4810      	ldr	r0, [pc, #64]	@ (80001ec <Smartcar_forward+0x64>)
 80001aa:	f001 f9c6 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_B_GPIO_Port, RF_B_Pin, 0); // PB5 앞백 RF_B
 80001ae:	2200      	movs	r2, #0
 80001b0:	2120      	movs	r1, #32
 80001b2:	480e      	ldr	r0, [pc, #56]	@ (80001ec <Smartcar_forward+0x64>)
 80001b4:	f001 f9c1 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LR_F_GPIO_Port, LR_F_Pin, 1); // PA9  뒤앞 LR_F 12  27 left_RearForward
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001be:	480c      	ldr	r0, [pc, #48]	@ (80001f0 <Smartcar_forward+0x68>)
 80001c0:	f001 f9bb 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_B_GPIO_Port, LR_B_Pin, 0); // PB10 뒤백 LR_B left_RearBack
 80001c4:	2200      	movs	r2, #0
 80001c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001ca:	4808      	ldr	r0, [pc, #32]	@ (80001ec <Smartcar_forward+0x64>)
 80001cc:	f001 f9b5 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LF_F_GPIO_Port, LF_F_Pin, 1); // 앞앞 PB3 25 26 LF_F left_ForwardForward
 80001d0:	2201      	movs	r2, #1
 80001d2:	2108      	movs	r1, #8
 80001d4:	4805      	ldr	r0, [pc, #20]	@ (80001ec <Smartcar_forward+0x64>)
 80001d6:	f001 f9b0 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_B_GPIO_Port, LF_B_Pin, 0); // 앞백 PA10 LF_B left_ForwardBack
 80001da:	2200      	movs	r2, #0
 80001dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <Smartcar_forward+0x68>)
 80001e2:	f001 f9aa 	bl	800153a <HAL_GPIO_WritePin>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010c00 	.word	0x40010c00
 80001f0:	40010800 	.word	0x40010800

080001f4 <smartcar_back>:

void smartcar_back(){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RR_F_GPIO_Port, RR_F_Pin, 0); // PB8  뒤앞   21 22  RR_F /Right_RearForward
 80001f8:	2200      	movs	r2, #0
 80001fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001fe:	4816      	ldr	r0, [pc, #88]	@ (8000258 <smartcar_back+0x64>)
 8000200:	f001 f99b 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_B_GPIO_Port, RR_B_Pin, 1); // PB9  뒤백	RR_B Right_RearBack
 8000204:	2201      	movs	r2, #1
 8000206:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800020a:	4813      	ldr	r0, [pc, #76]	@ (8000258 <smartcar_back+0x64>)
 800020c:	f001 f995 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RF_F_GPIO_Port, RF_F_Pin, 0); // PB4 앞앞  17 16 RF_F
 8000210:	2200      	movs	r2, #0
 8000212:	2110      	movs	r1, #16
 8000214:	4810      	ldr	r0, [pc, #64]	@ (8000258 <smartcar_back+0x64>)
 8000216:	f001 f990 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_B_GPIO_Port, RF_B_Pin, 1); // PB5 앞백 RF_B
 800021a:	2201      	movs	r2, #1
 800021c:	2120      	movs	r1, #32
 800021e:	480e      	ldr	r0, [pc, #56]	@ (8000258 <smartcar_back+0x64>)
 8000220:	f001 f98b 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LR_F_GPIO_Port, LR_F_Pin, 0); // PA9  뒤앞 LR_F 12  27 left_RearForward
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800022a:	480c      	ldr	r0, [pc, #48]	@ (800025c <smartcar_back+0x68>)
 800022c:	f001 f985 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_B_GPIO_Port, LR_B_Pin, 1); // PB10 뒤백 LR_B left_RearBack
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000236:	4808      	ldr	r0, [pc, #32]	@ (8000258 <smartcar_back+0x64>)
 8000238:	f001 f97f 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LF_F_GPIO_Port, LF_F_Pin, 0); // 앞앞 PB3 25 26 LF_F left_ForwardForward
 800023c:	2200      	movs	r2, #0
 800023e:	2108      	movs	r1, #8
 8000240:	4805      	ldr	r0, [pc, #20]	@ (8000258 <smartcar_back+0x64>)
 8000242:	f001 f97a 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_B_GPIO_Port, LF_B_Pin, 1); // 앞백 PA10 LF_B left_ForwardBack
 8000246:	2201      	movs	r2, #1
 8000248:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800024c:	4803      	ldr	r0, [pc, #12]	@ (800025c <smartcar_back+0x68>)
 800024e:	f001 f974 	bl	800153a <HAL_GPIO_WritePin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010c00 	.word	0x40010c00
 800025c:	40010800 	.word	0x40010800

08000260 <smartcar_left>:

void smartcar_left(){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RR_F_GPIO_Port, RR_F_Pin, 1); // PB8  뒤앞   21 22  RR_F /Right_RearForward
 8000264:	2201      	movs	r2, #1
 8000266:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800026a:	4816      	ldr	r0, [pc, #88]	@ (80002c4 <smartcar_left+0x64>)
 800026c:	f001 f965 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_B_GPIO_Port, RR_B_Pin, 0); // PB9  뒤백	RR_B Right_RearBack
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000276:	4813      	ldr	r0, [pc, #76]	@ (80002c4 <smartcar_left+0x64>)
 8000278:	f001 f95f 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RF_F_GPIO_Port, RF_F_Pin, 1); // PB4 앞앞  17 16 RF_F
 800027c:	2201      	movs	r2, #1
 800027e:	2110      	movs	r1, #16
 8000280:	4810      	ldr	r0, [pc, #64]	@ (80002c4 <smartcar_left+0x64>)
 8000282:	f001 f95a 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_B_GPIO_Port, RF_B_Pin, 0); // PB5 앞백 RF_B
 8000286:	2200      	movs	r2, #0
 8000288:	2120      	movs	r1, #32
 800028a:	480e      	ldr	r0, [pc, #56]	@ (80002c4 <smartcar_left+0x64>)
 800028c:	f001 f955 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LR_F_GPIO_Port, LR_F_Pin, 0); // PA9  뒤앞 LR_F 12  27 left_RearForward
 8000290:	2200      	movs	r2, #0
 8000292:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000296:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <smartcar_left+0x68>)
 8000298:	f001 f94f 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_B_GPIO_Port, LR_B_Pin, 1); // PB10 뒤백 LR_B left_RearBack
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002a2:	4808      	ldr	r0, [pc, #32]	@ (80002c4 <smartcar_left+0x64>)
 80002a4:	f001 f949 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LF_F_GPIO_Port, LF_F_Pin, 0); // 앞앞 PB3 25 26 LF_F left_ForwardForward
 80002a8:	2200      	movs	r2, #0
 80002aa:	2108      	movs	r1, #8
 80002ac:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <smartcar_left+0x64>)
 80002ae:	f001 f944 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_B_GPIO_Port, LF_B_Pin, 1); // 앞백 PA10 LF_B left_ForwardBack
 80002b2:	2201      	movs	r2, #1
 80002b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002b8:	4803      	ldr	r0, [pc, #12]	@ (80002c8 <smartcar_left+0x68>)
 80002ba:	f001 f93e 	bl	800153a <HAL_GPIO_WritePin>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010c00 	.word	0x40010c00
 80002c8:	40010800 	.word	0x40010800

080002cc <smartcar_right>:

void smartcar_right(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RR_F_GPIO_Port, RR_F_Pin, 0); // PB8  뒤앞   21 22  RR_F /Right_RearForward
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002d6:	4816      	ldr	r0, [pc, #88]	@ (8000330 <smartcar_right+0x64>)
 80002d8:	f001 f92f 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_B_GPIO_Port, RR_B_Pin, 1); // PB9  뒤백	RR_B Right_RearBack
 80002dc:	2201      	movs	r2, #1
 80002de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002e2:	4813      	ldr	r0, [pc, #76]	@ (8000330 <smartcar_right+0x64>)
 80002e4:	f001 f929 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RF_F_GPIO_Port, RF_F_Pin, 0); // PB4 앞앞  17 16 RF_F
 80002e8:	2200      	movs	r2, #0
 80002ea:	2110      	movs	r1, #16
 80002ec:	4810      	ldr	r0, [pc, #64]	@ (8000330 <smartcar_right+0x64>)
 80002ee:	f001 f924 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_B_GPIO_Port, RF_B_Pin, 1); // PB5 앞백 RF_B
 80002f2:	2201      	movs	r2, #1
 80002f4:	2120      	movs	r1, #32
 80002f6:	480e      	ldr	r0, [pc, #56]	@ (8000330 <smartcar_right+0x64>)
 80002f8:	f001 f91f 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LR_F_GPIO_Port, LR_F_Pin, 1); // PA9  뒤앞 LR_F 12  27 left_RearForward
 80002fc:	2201      	movs	r2, #1
 80002fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000302:	480c      	ldr	r0, [pc, #48]	@ (8000334 <smartcar_right+0x68>)
 8000304:	f001 f919 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_B_GPIO_Port, LR_B_Pin, 0); // PB10 뒤백 LR_B left_RearBack
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800030e:	4808      	ldr	r0, [pc, #32]	@ (8000330 <smartcar_right+0x64>)
 8000310:	f001 f913 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LF_F_GPIO_Port, LF_F_Pin, 1); // 앞앞 PB3 25 26 LF_F left_ForwardForward
 8000314:	2201      	movs	r2, #1
 8000316:	2108      	movs	r1, #8
 8000318:	4805      	ldr	r0, [pc, #20]	@ (8000330 <smartcar_right+0x64>)
 800031a:	f001 f90e 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_B_GPIO_Port, LF_B_Pin, 0); // 앞백 PA10 LF_B left_ForwardBack
 800031e:	2200      	movs	r2, #0
 8000320:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000324:	4803      	ldr	r0, [pc, #12]	@ (8000334 <smartcar_right+0x68>)
 8000326:	f001 f908 	bl	800153a <HAL_GPIO_WritePin>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40010c00 	.word	0x40010c00
 8000334:	40010800 	.word	0x40010800

08000338 <smartcar_stop>:

void smartcar_stop(){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RR_F_GPIO_Port, RR_F_Pin, 0); // PB8  뒤앞   21 22  RR_F /Right_RearForward
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000342:	4816      	ldr	r0, [pc, #88]	@ (800039c <smartcar_stop+0x64>)
 8000344:	f001 f8f9 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_B_GPIO_Port, RR_B_Pin, 0); // PB9  뒤백	RR_B Right_RearBack
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800034e:	4813      	ldr	r0, [pc, #76]	@ (800039c <smartcar_stop+0x64>)
 8000350:	f001 f8f3 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RF_F_GPIO_Port, RF_F_Pin, 0); // PB4 앞앞  17 16 RF_F
 8000354:	2200      	movs	r2, #0
 8000356:	2110      	movs	r1, #16
 8000358:	4810      	ldr	r0, [pc, #64]	@ (800039c <smartcar_stop+0x64>)
 800035a:	f001 f8ee 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_B_GPIO_Port, RF_B_Pin, 0); // PB5 앞백 RF_B
 800035e:	2200      	movs	r2, #0
 8000360:	2120      	movs	r1, #32
 8000362:	480e      	ldr	r0, [pc, #56]	@ (800039c <smartcar_stop+0x64>)
 8000364:	f001 f8e9 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LR_F_GPIO_Port, LR_F_Pin, 0); // PA9  뒤앞 LR_F 12  27 left_RearForward
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800036e:	480c      	ldr	r0, [pc, #48]	@ (80003a0 <smartcar_stop+0x68>)
 8000370:	f001 f8e3 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_B_GPIO_Port, LR_B_Pin, 0); // PB10 뒤백 LR_B left_RearBack
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800037a:	4808      	ldr	r0, [pc, #32]	@ (800039c <smartcar_stop+0x64>)
 800037c:	f001 f8dd 	bl	800153a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LF_F_GPIO_Port, LF_F_Pin, 0); // 앞앞 PB3 25 26 LF_F left_ForwardForward
 8000380:	2200      	movs	r2, #0
 8000382:	2108      	movs	r1, #8
 8000384:	4805      	ldr	r0, [pc, #20]	@ (800039c <smartcar_stop+0x64>)
 8000386:	f001 f8d8 	bl	800153a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LF_B_GPIO_Port, LF_B_Pin, 0); // 앞백 PA10 LF_B left_ForwardBack
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000390:	4803      	ldr	r0, [pc, #12]	@ (80003a0 <smartcar_stop+0x68>)
 8000392:	f001 f8d2 	bl	800153a <HAL_GPIO_WritePin>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	40010800 	.word	0x40010800

080003a4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
    // 수신 인터럽트가 발생한 UART가 USART2인지 확인
    if (huart->Instance == USART2)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a09      	ldr	r2, [pc, #36]	@ (80003d8 <HAL_UART_RxCpltCallback+0x34>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d10c      	bne.n	80003d0 <HAL_UART_RxCpltCallback+0x2c>
    {
        new_data_flag = 1;              // 새 데이터가 있다고 플래그 설정
 80003b6:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <HAL_UART_RxCpltCallback+0x38>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]
        last_rx_time = HAL_GetTick();   // 현재 시간(ms)을 기록
 80003bc:	f000 fd34 	bl	8000e28 <HAL_GetTick>
 80003c0:	4603      	mov	r3, r0
 80003c2:	4a07      	ldr	r2, [pc, #28]	@ (80003e0 <HAL_UART_RxCpltCallback+0x3c>)
 80003c4:	6013      	str	r3, [r2, #0]

        // 다음 1바이트를 수신하기 위해 다시 인터럽트를 활성화
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data, 1);
 80003c6:	2201      	movs	r2, #1
 80003c8:	4906      	ldr	r1, [pc, #24]	@ (80003e4 <HAL_UART_RxCpltCallback+0x40>)
 80003ca:	4807      	ldr	r0, [pc, #28]	@ (80003e8 <HAL_UART_RxCpltCallback+0x44>)
 80003cc:	f002 f89f 	bl	800250e <HAL_UART_Receive_IT>
    }
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40004400 	.word	0x40004400
 80003dc:	20000161 	.word	0x20000161
 80003e0:	20000164 	.word	0x20000164
 80003e4:	20000160 	.word	0x20000160
 80003e8:	20000118 	.word	0x20000118

080003ec <timer_start>:

void timer_start(TIM_HandleTypeDef * htim) { //초기화
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f001 fd3b 	bl	8001e70 <HAL_TIM_Base_Start>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <delay_us>:

void delay_us(uint16_t us, TIM_HandleTypeDef * htim) { // us 딜레이
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	6039      	str	r1, [r7, #0]
 800040c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0); // initislize counter to start from 0
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2200      	movs	r2, #0
 8000414:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(htim)) < us)
 8000416:	bf00      	nop
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800041e:	88fb      	ldrh	r3, [r7, #6]
 8000420:	429a      	cmp	r2, r3
 8000422:	d3f9      	bcc.n	8000418 <delay_us+0x16>
		; // wait count until us
}
 8000424:	bf00      	nop
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <trig>:

void trig(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin, TIM_HandleTypeDef * htim) { // 트리거
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	460b      	mov	r3, r1
 800043a:	607a      	str	r2, [r7, #4]
 800043c:	817b      	strh	r3, [r7, #10]
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, HIGH);
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <trig+0x40>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	b2da      	uxtb	r2, r3
 8000444:	897b      	ldrh	r3, [r7, #10]
 8000446:	4619      	mov	r1, r3
 8000448:	68f8      	ldr	r0, [r7, #12]
 800044a:	f001 f876 	bl	800153a <HAL_GPIO_WritePin>

	delay_us(10,htim);
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	200a      	movs	r0, #10
 8000452:	f7ff ffd6 	bl	8000402 <delay_us>
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, LOW);
 8000456:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <trig+0x44>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	b2da      	uxtb	r2, r3
 800045c:	897b      	ldrh	r3, [r7, #10]
 800045e:	4619      	mov	r1, r3
 8000460:	68f8      	ldr	r0, [r7, #12]
 8000462:	f001 f86a 	bl	800153a <HAL_GPIO_WritePin>
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000000 	.word	0x20000000
 8000474:	20000168 	.word	0x20000168

08000478 <echo>:

long unsigned int echo(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin, TIM_HandleTypeDef * htim) { // 에코
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	460b      	mov	r3, r1
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	817b      	strh	r3, [r7, #10]
	long unsigned int echo = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

	while (HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin) == LOW) {
 800048a:	bf00      	nop
 800048c:	897b      	ldrh	r3, [r7, #10]
 800048e:	4619      	mov	r1, r3
 8000490:	68f8      	ldr	r0, [r7, #12]
 8000492:	f001 f83b 	bl	800150c <HAL_GPIO_ReadPin>
 8000496:	4603      	mov	r3, r0
 8000498:	461a      	mov	r2, r3
 800049a:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <echo+0x70>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d0f4      	beq.n	800048c <echo+0x14>
	}
	__HAL_TIM_SET_COUNTER(htim, 0);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2200      	movs	r2, #0
 80004a8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin) == HIGH)
 80004aa:	bf00      	nop
 80004ac:	897b      	ldrh	r3, [r7, #10]
 80004ae:	4619      	mov	r1, r3
 80004b0:	68f8      	ldr	r0, [r7, #12]
 80004b2:	f001 f82b 	bl	800150c <HAL_GPIO_ReadPin>
 80004b6:	4603      	mov	r3, r0
 80004b8:	461a      	mov	r2, r3
 80004ba:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <echo+0x74>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d0f4      	beq.n	80004ac <echo+0x34>
		;
	echo = __HAL_TIM_GET_COUNTER(htim);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004c8:	617b      	str	r3, [r7, #20]
	if (echo >= 240 && echo <= 23000)
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	2bef      	cmp	r3, #239	@ 0xef
 80004ce:	d906      	bls.n	80004de <echo+0x66>
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	f645 12d8 	movw	r2, #23000	@ 0x59d8
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d801      	bhi.n	80004de <echo+0x66>
		return echo;
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	e000      	b.n	80004e0 <echo+0x68>
	else
		return 0;
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3718      	adds	r7, #24
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000168 	.word	0x20000168
 80004ec:	20000000 	.word	0x20000000

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fc3f 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f8cb 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f9d1 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000502:	f000 f9a5 	bl	8000850 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000506:	f000 f907 	bl	8000718 <MX_TIM1_Init>
  MX_TIM2_Init();
 800050a:	f000 f955 	bl	80007b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	494d      	ldr	r1, [pc, #308]	@ (8000648 <main+0x158>)
 8000512:	484e      	ldr	r0, [pc, #312]	@ (800064c <main+0x15c>)
 8000514:	f001 fffb 	bl	800250e <HAL_UART_Receive_IT>


	timer_start(&htim1);
 8000518:	484d      	ldr	r0, [pc, #308]	@ (8000650 <main+0x160>)
 800051a:	f7ff ff67 	bl	80003ec <timer_start>
	timer_start(&htim2);
 800051e:	484d      	ldr	r0, [pc, #308]	@ (8000654 <main+0x164>)
 8000520:	f7ff ff64 	bl	80003ec <timer_start>

	printf("Ranging with HC-SR04\n");
 8000524:	484c      	ldr	r0, [pc, #304]	@ (8000658 <main+0x168>)
 8000526:	f002 feab 	bl	8003280 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (new_data_flag)
 800052a:	4b4c      	ldr	r3, [pc, #304]	@ (800065c <main+0x16c>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d03e      	beq.n	80005b2 <main+0xc2>
	  {
		  new_data_flag = 0; // 플래그 처리 완료
 8000534:	4b49      	ldr	r3, [pc, #292]	@ (800065c <main+0x16c>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]

		  if(rx_data == 'w'){
 800053a:	4b43      	ldr	r3, [pc, #268]	@ (8000648 <main+0x158>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b77      	cmp	r3, #119	@ 0x77
 8000542:	d105      	bne.n	8000550 <main+0x60>
			  printf("forward\n");
 8000544:	4846      	ldr	r0, [pc, #280]	@ (8000660 <main+0x170>)
 8000546:	f002 fe9b 	bl	8003280 <puts>
			  Smartcar_forward();
 800054a:	f7ff fe1d 	bl	8000188 <Smartcar_forward>
 800054e:	e030      	b.n	80005b2 <main+0xc2>
		  }
		  else if(rx_data == 'a'){
 8000550:	4b3d      	ldr	r3, [pc, #244]	@ (8000648 <main+0x158>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b61      	cmp	r3, #97	@ 0x61
 8000558:	d105      	bne.n	8000566 <main+0x76>
			  printf("left\n");
 800055a:	4842      	ldr	r0, [pc, #264]	@ (8000664 <main+0x174>)
 800055c:	f002 fe90 	bl	8003280 <puts>
			  smartcar_left();
 8000560:	f7ff fe7e 	bl	8000260 <smartcar_left>
 8000564:	e025      	b.n	80005b2 <main+0xc2>
		  }
		  else if(rx_data == 'd'){
 8000566:	4b38      	ldr	r3, [pc, #224]	@ (8000648 <main+0x158>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2b64      	cmp	r3, #100	@ 0x64
 800056e:	d105      	bne.n	800057c <main+0x8c>
			  printf("right\n");
 8000570:	483d      	ldr	r0, [pc, #244]	@ (8000668 <main+0x178>)
 8000572:	f002 fe85 	bl	8003280 <puts>
			  smartcar_right();
 8000576:	f7ff fea9 	bl	80002cc <smartcar_right>
 800057a:	e01a      	b.n	80005b2 <main+0xc2>
		  }
		  else if(rx_data == 's'){
 800057c:	4b32      	ldr	r3, [pc, #200]	@ (8000648 <main+0x158>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b73      	cmp	r3, #115	@ 0x73
 8000584:	d105      	bne.n	8000592 <main+0xa2>
			  printf("back\n");
 8000586:	4839      	ldr	r0, [pc, #228]	@ (800066c <main+0x17c>)
 8000588:	f002 fe7a 	bl	8003280 <puts>
			  smartcar_back();
 800058c:	f7ff fe32 	bl	80001f4 <smartcar_back>
 8000590:	e00f      	b.n	80005b2 <main+0xc2>
		  }
		  else if(rx_data == 'f'){
 8000592:	4b2d      	ldr	r3, [pc, #180]	@ (8000648 <main+0x158>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b66      	cmp	r3, #102	@ 0x66
 800059a:	d105      	bne.n	80005a8 <main+0xb8>
			  printf("stop\n");
 800059c:	4834      	ldr	r0, [pc, #208]	@ (8000670 <main+0x180>)
 800059e:	f002 fe6f 	bl	8003280 <puts>
			  smartcar_stop();
 80005a2:	f7ff fec9 	bl	8000338 <smartcar_stop>
 80005a6:	e004      	b.n	80005b2 <main+0xc2>
		  }
		  else {
			  printf("Invalid value, stopping\n");
 80005a8:	4832      	ldr	r0, [pc, #200]	@ (8000674 <main+0x184>)
 80005aa:	f002 fe69 	bl	8003280 <puts>
			  smartcar_stop();
 80005ae:	f7ff fec3 	bl	8000338 <smartcar_stop>
		  }
	  }

	  // 마지막 데이터 수신 후 100ms가 지났으면 자동차를 멈춤
	  if (HAL_GetTick() - last_rx_time > 100)
 80005b2:	f000 fc39 	bl	8000e28 <HAL_GetTick>
 80005b6:	4602      	mov	r2, r0
 80005b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000678 <main+0x188>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	2b64      	cmp	r3, #100	@ 0x64
 80005c0:	d901      	bls.n	80005c6 <main+0xd6>
	  {
		  smartcar_stop();
 80005c2:	f7ff feb9 	bl	8000338 <smartcar_stop>
	  }
		trig(Trigger_GPIO_Port,Trigger_Pin,&htim1);
 80005c6:	4a22      	ldr	r2, [pc, #136]	@ (8000650 <main+0x160>)
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	482c      	ldr	r0, [pc, #176]	@ (800067c <main+0x18c>)
 80005cc:	f7ff ff30 	bl	8000430 <trig>
		echo_time_right = echo(Echo_GPIO_Port, Echo_Pin,&htim1);
 80005d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000650 <main+0x160>)
 80005d2:	2101      	movs	r1, #1
 80005d4:	482a      	ldr	r0, [pc, #168]	@ (8000680 <main+0x190>)
 80005d6:	f7ff ff4f 	bl	8000478 <echo>
 80005da:	60f8      	str	r0, [r7, #12]

		trig(Trigger2_GPIO_Port,Trigger2_Pin,&htim2);
 80005dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000654 <main+0x164>)
 80005de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e2:	4828      	ldr	r0, [pc, #160]	@ (8000684 <main+0x194>)
 80005e4:	f7ff ff24 	bl	8000430 <trig>
		echo_time_left = echo(Echo2_GPIO_Port, Echo2_Pin,&htim2);
 80005e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000654 <main+0x164>)
 80005ea:	2110      	movs	r1, #16
 80005ec:	4825      	ldr	r0, [pc, #148]	@ (8000684 <main+0x194>)
 80005ee:	f7ff ff43 	bl	8000478 <echo>
 80005f2:	60b8      	str	r0, [r7, #8]

	    if( echo_time_right != 0 || echo_time_left !=0){
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d102      	bne.n	8000600 <main+0x110>
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d01b      	beq.n	8000638 <main+0x148>
	        dist_right = (int)(17 * echo_time_right / 100);
 8000600:	68fa      	ldr	r2, [r7, #12]
 8000602:	4613      	mov	r3, r2
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	4413      	add	r3, r2
 8000608:	4a1f      	ldr	r2, [pc, #124]	@ (8000688 <main+0x198>)
 800060a:	fba2 2303 	umull	r2, r3, r2, r3
 800060e:	095b      	lsrs	r3, r3, #5
 8000610:	607b      	str	r3, [r7, #4]
	        dist_left = (int)(17 * echo_time_left / 100);
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	4613      	mov	r3, r2
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	4413      	add	r3, r2
 800061a:	4a1b      	ldr	r2, [pc, #108]	@ (8000688 <main+0x198>)
 800061c:	fba2 2303 	umull	r2, r3, r2, r3
 8000620:	095b      	lsrs	r3, r3, #5
 8000622:	603b      	str	r3, [r7, #0]
	        printf("1: Distance = %d(mm) | 2: Distance = %d(mm)\n", dist_right,dist_left);
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	4818      	ldr	r0, [pc, #96]	@ (800068c <main+0x19c>)
 800062a:	f002 fdc1 	bl	80031b0 <iprintf>
	        HAL_Delay(500);
 800062e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000632:	f000 fc03 	bl	8000e3c <HAL_Delay>
 8000636:	e006      	b.n	8000646 <main+0x156>
	    }
	    else {
	    	printf("Out of Range!\n");
 8000638:	4815      	ldr	r0, [pc, #84]	@ (8000690 <main+0x1a0>)
 800063a:	f002 fe21 	bl	8003280 <puts>
	    	HAL_Delay(500);
 800063e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000642:	f000 fbfb 	bl	8000e3c <HAL_Delay>
	  if (new_data_flag)
 8000646:	e770      	b.n	800052a <main+0x3a>
 8000648:	20000160 	.word	0x20000160
 800064c:	20000118 	.word	0x20000118
 8000650:	20000088 	.word	0x20000088
 8000654:	200000d0 	.word	0x200000d0
 8000658:	08003f74 	.word	0x08003f74
 800065c:	20000161 	.word	0x20000161
 8000660:	08003f8c 	.word	0x08003f8c
 8000664:	08003f94 	.word	0x08003f94
 8000668:	08003f9c 	.word	0x08003f9c
 800066c:	08003fa4 	.word	0x08003fa4
 8000670:	08003fac 	.word	0x08003fac
 8000674:	08003fb4 	.word	0x08003fb4
 8000678:	20000164 	.word	0x20000164
 800067c:	40011000 	.word	0x40011000
 8000680:	40010c00 	.word	0x40010c00
 8000684:	40010800 	.word	0x40010800
 8000688:	51eb851f 	.word	0x51eb851f
 800068c:	08003fcc 	.word	0x08003fcc
 8000690:	08003ffc 	.word	0x08003ffc

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b090      	sub	sp, #64	@ 0x40
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	2228      	movs	r2, #40	@ 0x28
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fecc 	bl	8003440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	2310      	movs	r3, #16
 80006c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006c6:	2300      	movs	r3, #0
 80006c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006ca:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 ff6b 	bl	80015b0 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006e0:	f000 f992 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f9d8 	bl	8001ab4 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800070a:	f000 f97d 	bl	8000a08 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3740      	adds	r7, #64	@ 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_TIM1_Init+0x98>)
 8000736:	4a1f      	ldr	r2, [pc, #124]	@ (80007b4 <MX_TIM1_Init+0x9c>)
 8000738:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_TIM1_Init+0x98>)
 800073c:	223f      	movs	r2, #63	@ 0x3f
 800073e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_TIM1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_TIM1_Init+0x98>)
 8000748:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800074c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_TIM1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000754:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_TIM1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_TIM1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000760:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <MX_TIM1_Init+0x98>)
 8000762:	f001 fb35 	bl	8001dd0 <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800076c:	f000 f94c 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000774:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <MX_TIM1_Init+0x98>)
 800077e:	f001 fbc1 	bl	8001f04 <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000788:	f000 f93e 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_TIM1_Init+0x98>)
 800079a:	f001 fd7f 	bl	800229c <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007a4:	f000 f930 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000088 	.word	0x20000088
 80007b4:	40012c00 	.word	0x40012c00

080007b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <MX_TIM2_Init+0x94>)
 80007d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <MX_TIM2_Init+0x94>)
 80007de:	223f      	movs	r2, #63	@ 0x3f
 80007e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MX_TIM2_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007e8:	4b18      	ldr	r3, [pc, #96]	@ (800084c <MX_TIM2_Init+0x94>)
 80007ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_TIM2_Init+0x94>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_TIM2_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007fc:	4813      	ldr	r0, [pc, #76]	@ (800084c <MX_TIM2_Init+0x94>)
 80007fe:	f001 fae7 	bl	8001dd0 <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000808:	f000 f8fe 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000810:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	@ (800084c <MX_TIM2_Init+0x94>)
 800081a:	f001 fb73 	bl	8001f04 <HAL_TIM_ConfigClockSource>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000824:	f000 f8f0 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_TIM2_Init+0x94>)
 8000836:	f001 fd31 	bl	800229c <HAL_TIMEx_MasterConfigSynchronization>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000840:	f000 f8e2 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000d0 	.word	0x200000d0

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <MX_USART2_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000888:	f001 fd66 	bl	8002358 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 f8b9 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000118 	.word	0x20000118
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b8:	4b4e      	ldr	r3, [pc, #312]	@ (80009f4 <MX_GPIO_Init+0x150>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a4d      	ldr	r2, [pc, #308]	@ (80009f4 <MX_GPIO_Init+0x150>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b4b      	ldr	r3, [pc, #300]	@ (80009f4 <MX_GPIO_Init+0x150>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0310 	and.w	r3, r3, #16
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d0:	4b48      	ldr	r3, [pc, #288]	@ (80009f4 <MX_GPIO_Init+0x150>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a47      	ldr	r2, [pc, #284]	@ (80009f4 <MX_GPIO_Init+0x150>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b45      	ldr	r3, [pc, #276]	@ (80009f4 <MX_GPIO_Init+0x150>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0320 	and.w	r3, r3, #32
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b42      	ldr	r3, [pc, #264]	@ (80009f4 <MX_GPIO_Init+0x150>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a41      	ldr	r2, [pc, #260]	@ (80009f4 <MX_GPIO_Init+0x150>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b3f      	ldr	r3, [pc, #252]	@ (80009f4 <MX_GPIO_Init+0x150>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000900:	4b3c      	ldr	r3, [pc, #240]	@ (80009f4 <MX_GPIO_Init+0x150>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a3b      	ldr	r2, [pc, #236]	@ (80009f4 <MX_GPIO_Init+0x150>)
 8000906:	f043 0308 	orr.w	r3, r3, #8
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b39      	ldr	r3, [pc, #228]	@ (80009f4 <MX_GPIO_Init+0x150>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0308 	and.w	r3, r3, #8
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LD2_Pin|Trigger2_Pin|LR_F_Pin
 8000918:	2200      	movs	r2, #0
 800091a:	f240 7121 	movw	r1, #1825	@ 0x721
 800091e:	4836      	ldr	r0, [pc, #216]	@ (80009f8 <MX_GPIO_Init+0x154>)
 8000920:	f000 fe0b 	bl	800153a <HAL_GPIO_WritePin>
                          |LF_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LR_B_Pin|LF_F_Pin|RF_F_Pin|RF_B_Pin
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
 800092a:	4834      	ldr	r0, [pc, #208]	@ (80009fc <MX_GPIO_Init+0x158>)
 800092c:	f000 fe05 	bl	800153a <HAL_GPIO_WritePin>
                          |RR_F_Pin|RR_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2180      	movs	r1, #128	@ 0x80
 8000934:	4832      	ldr	r0, [pc, #200]	@ (8000a00 <MX_GPIO_Init+0x15c>)
 8000936:	f000 fe00 	bl	800153a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000940:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <MX_GPIO_Init+0x160>)
 8000942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4619      	mov	r1, r3
 800094e:	482c      	ldr	r0, [pc, #176]	@ (8000a00 <MX_GPIO_Init+0x15c>)
 8000950:	f000 fc58 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LD2_Pin Trigger2_Pin LR_F_Pin
                           LF_B_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LD2_Pin|Trigger2_Pin|LR_F_Pin
 8000954:	f240 7321 	movw	r3, #1825	@ 0x721
 8000958:	613b      	str	r3, [r7, #16]
                          |LF_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2302      	movs	r3, #2
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	4619      	mov	r1, r3
 800096c:	4822      	ldr	r0, [pc, #136]	@ (80009f8 <MX_GPIO_Init+0x154>)
 800096e:	f000 fc49 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo2_Pin */
  GPIO_InitStruct.Pin = Echo2_Pin;
 8000972:	2310      	movs	r3, #16
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Echo2_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	481c      	ldr	r0, [pc, #112]	@ (80009f8 <MX_GPIO_Init+0x154>)
 8000986:	f000 fc3d 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 800098a:	2301      	movs	r3, #1
 800098c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	4619      	mov	r1, r3
 800099c:	4817      	ldr	r0, [pc, #92]	@ (80009fc <MX_GPIO_Init+0x158>)
 800099e:	f000 fc31 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_B_Pin LF_F_Pin RF_F_Pin RF_B_Pin
                           RR_F_Pin RR_B_Pin */
  GPIO_InitStruct.Pin = LR_B_Pin|LF_F_Pin|RF_F_Pin|RF_B_Pin
 80009a2:	f44f 63e7 	mov.w	r3, #1848	@ 0x738
 80009a6:	613b      	str	r3, [r7, #16]
                          |RR_F_Pin|RR_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	4619      	mov	r1, r3
 80009ba:	4810      	ldr	r0, [pc, #64]	@ (80009fc <MX_GPIO_Init+0x158>)
 80009bc:	f000 fc22 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 80009c0:	2380      	movs	r3, #128	@ 0x80
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	480a      	ldr	r0, [pc, #40]	@ (8000a00 <MX_GPIO_Init+0x15c>)
 80009d8:	f000 fc14 	bl	8001204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2028      	movs	r0, #40	@ 0x28
 80009e2:	f000 fb26 	bl	8001032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e6:	2028      	movs	r0, #40	@ 0x28
 80009e8:	f000 fb3f 	bl	800106a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010800 	.word	0x40010800
 80009fc:	40010c00 	.word	0x40010c00
 8000a00:	40011000 	.word	0x40011000
 8000a04:	10110000 	.word	0x10110000

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_MspInit+0x5c>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <HAL_MspInit+0x5c>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <HAL_MspInit+0x5c>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <HAL_MspInit+0x5c>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	4a0e      	ldr	r2, [pc, #56]	@ (8000a70 <HAL_MspInit+0x5c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	61d3      	str	r3, [r2, #28]
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <HAL_MspInit+0x5c>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_MspInit+0x60>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <HAL_MspInit+0x60>)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010000 	.word	0x40010000

08000a78 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <HAL_TIM_Base_MspInit+0x58>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d10c      	bne.n	8000aa4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a11      	ldr	r2, [pc, #68]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8000a90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aa2:	e010      	b.n	8000ac6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aac:	d10b      	bne.n	8000ac6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a08      	ldr	r2, [pc, #32]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40012c00 	.word	0x40012c00
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <HAL_UART_MspInit+0x80>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d12b      	bne.n	8000b50 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <HAL_UART_MspInit+0x84>)
 8000afa:	69db      	ldr	r3, [r3, #28]
 8000afc:	4a17      	ldr	r2, [pc, #92]	@ (8000b5c <HAL_UART_MspInit+0x84>)
 8000afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b02:	61d3      	str	r3, [r2, #28]
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_UART_MspInit+0x84>)
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_UART_MspInit+0x84>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a11      	ldr	r2, [pc, #68]	@ (8000b5c <HAL_UART_MspInit+0x84>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_UART_MspInit+0x84>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b28:	230c      	movs	r3, #12
 8000b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <HAL_UART_MspInit+0x88>)
 8000b3c:	f000 fb62 	bl	8001204 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2026      	movs	r0, #38	@ 0x26
 8000b46:	f000 fa74 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b4a:	2026      	movs	r0, #38	@ 0x26
 8000b4c:	f000 fa8d 	bl	800106a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010800 	.word	0x40010800

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <NMI_Handler+0x4>

08000b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f926 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <USART2_IRQHandler+0x10>)
 8000bc2:	f001 fcc9 	bl	8002558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000118 	.word	0x20000118

08000bd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bd4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bd8:	f000 fcc8 	bl	800156c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e00a      	b.n	8000c08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bf2:	f3af 8000 	nop.w
 8000bf6:	4601      	mov	r1, r0
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	60ba      	str	r2, [r7, #8]
 8000bfe:	b2ca      	uxtb	r2, r1
 8000c00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbf0      	blt.n	8000bf2 <_read+0x12>
  }

  return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	e009      	b.n	8000c40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fa89 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf1      	blt.n	8000c2c <_write+0x12>
  }
  return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_close>:

int _close(int file)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c78:	605a      	str	r2, [r3, #4]
  return 0;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <_isatty>:

int _isatty(int file)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr

08000c9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b085      	sub	sp, #20
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
	...

08000cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cbc:	4a14      	ldr	r2, [pc, #80]	@ (8000d10 <_sbrk+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <_sbrk+0x60>)
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <_sbrk+0x64>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	@ (8000d1c <_sbrk+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d207      	bcs.n	8000cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce4:	f002 fbfa 	bl	80034dc <__errno>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	220c      	movs	r2, #12
 8000cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e009      	b.n	8000d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a05      	ldr	r2, [pc, #20]	@ (8000d18 <_sbrk+0x64>)
 8000d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20005000 	.word	0x20005000
 8000d14:	00000400 	.word	0x00000400
 8000d18:	2000016c 	.word	0x2000016c
 8000d1c:	200002c0 	.word	0x200002c0

08000d20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d2c:	f7ff fff8 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d32:	490c      	ldr	r1, [pc, #48]	@ (8000d64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d34:	4a0c      	ldr	r2, [pc, #48]	@ (8000d68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a09      	ldr	r2, [pc, #36]	@ (8000d6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d48:	4c09      	ldr	r4, [pc, #36]	@ (8000d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f002 fbc7 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5a:	f7ff fbc9 	bl	80004f0 <main>
  bx lr
 8000d5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d68:	08004074 	.word	0x08004074
  ldr r2, =_sbss
 8000d6c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d70:	200002c0 	.word	0x200002c0

08000d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_2_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_Init+0x28>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_Init+0x28>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f947 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fe3e 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f95f 	bl	8001086 <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 f927 	bl	8001032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	@ (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	2000000c 	.word	0x2000000c
 8000e00:	20000008 	.word	0x20000008

08000e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <HAL_IncTick+0x1c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a03      	ldr	r2, [pc, #12]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	2000000c 	.word	0x2000000c
 8000e24:	20000170 	.word	0x20000170

08000e28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b02      	ldr	r3, [pc, #8]	@ (8000e38 <HAL_GetTick+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	20000170 	.word	0x20000170

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff fff0 	bl	8000e28 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffe0 	bl	8000e28 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000000c 	.word	0x2000000c

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4906      	ldr	r1, [pc, #24]	@ (8000f1c <__NVIC_EnableIRQ+0x34>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	@ (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	@ (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	@ 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	@ 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fe8:	d301      	bcc.n	8000fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00f      	b.n	800100e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <SysTick_Config+0x40>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f7ff ff90 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <SysTick_Config+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <SysTick_Config+0x40>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff2d 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001044:	f7ff ff42 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 8001048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff ff90 	bl	8000f74 <NVIC_EncodePriority>
 8001054:	4602      	mov	r2, r0
 8001056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff5f 	bl	8000f20 <__NVIC_SetPriority>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff35 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffa2 	bl	8000fd8 <SysTick_Config>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800109e:	b480      	push	{r7}
 80010a0:	b085      	sub	sp, #20
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d008      	beq.n	80010c8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2204      	movs	r2, #4
 80010ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e020      	b.n	800110a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 020e 	bic.w	r2, r2, #14
 80010d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d005      	beq.n	8001138 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2204      	movs	r2, #4
 8001130:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e051      	b.n	80011dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 020e 	bic.w	r2, r2, #14
 8001146:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a22      	ldr	r2, [pc, #136]	@ (80011e8 <HAL_DMA_Abort_IT+0xd4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d029      	beq.n	80011b6 <HAL_DMA_Abort_IT+0xa2>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a21      	ldr	r2, [pc, #132]	@ (80011ec <HAL_DMA_Abort_IT+0xd8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d022      	beq.n	80011b2 <HAL_DMA_Abort_IT+0x9e>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1f      	ldr	r2, [pc, #124]	@ (80011f0 <HAL_DMA_Abort_IT+0xdc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01a      	beq.n	80011ac <HAL_DMA_Abort_IT+0x98>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1e      	ldr	r2, [pc, #120]	@ (80011f4 <HAL_DMA_Abort_IT+0xe0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d012      	beq.n	80011a6 <HAL_DMA_Abort_IT+0x92>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1c      	ldr	r2, [pc, #112]	@ (80011f8 <HAL_DMA_Abort_IT+0xe4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00a      	beq.n	80011a0 <HAL_DMA_Abort_IT+0x8c>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1b      	ldr	r2, [pc, #108]	@ (80011fc <HAL_DMA_Abort_IT+0xe8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d102      	bne.n	800119a <HAL_DMA_Abort_IT+0x86>
 8001194:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001198:	e00e      	b.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
 800119a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800119e:	e00b      	b.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
 80011a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011a4:	e008      	b.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
 80011a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011aa:	e005      	b.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
 80011ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b0:	e002      	b.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
 80011b2:	2310      	movs	r3, #16
 80011b4:	e000      	b.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
 80011b6:	2301      	movs	r3, #1
 80011b8:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <HAL_DMA_Abort_IT+0xec>)
 80011ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	4798      	blx	r3
    } 
  }
  return status;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40020008 	.word	0x40020008
 80011ec:	4002001c 	.word	0x4002001c
 80011f0:	40020030 	.word	0x40020030
 80011f4:	40020044 	.word	0x40020044
 80011f8:	40020058 	.word	0x40020058
 80011fc:	4002006c 	.word	0x4002006c
 8001200:	40020000 	.word	0x40020000

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b08b      	sub	sp, #44	@ 0x2c
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001216:	e169      	b.n	80014ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001218:	2201      	movs	r2, #1
 800121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	429a      	cmp	r2, r3
 8001232:	f040 8158 	bne.w	80014e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4a9a      	ldr	r2, [pc, #616]	@ (80014a4 <HAL_GPIO_Init+0x2a0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d05e      	beq.n	80012fe <HAL_GPIO_Init+0xfa>
 8001240:	4a98      	ldr	r2, [pc, #608]	@ (80014a4 <HAL_GPIO_Init+0x2a0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d875      	bhi.n	8001332 <HAL_GPIO_Init+0x12e>
 8001246:	4a98      	ldr	r2, [pc, #608]	@ (80014a8 <HAL_GPIO_Init+0x2a4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d058      	beq.n	80012fe <HAL_GPIO_Init+0xfa>
 800124c:	4a96      	ldr	r2, [pc, #600]	@ (80014a8 <HAL_GPIO_Init+0x2a4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d86f      	bhi.n	8001332 <HAL_GPIO_Init+0x12e>
 8001252:	4a96      	ldr	r2, [pc, #600]	@ (80014ac <HAL_GPIO_Init+0x2a8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d052      	beq.n	80012fe <HAL_GPIO_Init+0xfa>
 8001258:	4a94      	ldr	r2, [pc, #592]	@ (80014ac <HAL_GPIO_Init+0x2a8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d869      	bhi.n	8001332 <HAL_GPIO_Init+0x12e>
 800125e:	4a94      	ldr	r2, [pc, #592]	@ (80014b0 <HAL_GPIO_Init+0x2ac>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d04c      	beq.n	80012fe <HAL_GPIO_Init+0xfa>
 8001264:	4a92      	ldr	r2, [pc, #584]	@ (80014b0 <HAL_GPIO_Init+0x2ac>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d863      	bhi.n	8001332 <HAL_GPIO_Init+0x12e>
 800126a:	4a92      	ldr	r2, [pc, #584]	@ (80014b4 <HAL_GPIO_Init+0x2b0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d046      	beq.n	80012fe <HAL_GPIO_Init+0xfa>
 8001270:	4a90      	ldr	r2, [pc, #576]	@ (80014b4 <HAL_GPIO_Init+0x2b0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d85d      	bhi.n	8001332 <HAL_GPIO_Init+0x12e>
 8001276:	2b12      	cmp	r3, #18
 8001278:	d82a      	bhi.n	80012d0 <HAL_GPIO_Init+0xcc>
 800127a:	2b12      	cmp	r3, #18
 800127c:	d859      	bhi.n	8001332 <HAL_GPIO_Init+0x12e>
 800127e:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <HAL_GPIO_Init+0x80>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	080012ff 	.word	0x080012ff
 8001288:	080012d9 	.word	0x080012d9
 800128c:	080012eb 	.word	0x080012eb
 8001290:	0800132d 	.word	0x0800132d
 8001294:	08001333 	.word	0x08001333
 8001298:	08001333 	.word	0x08001333
 800129c:	08001333 	.word	0x08001333
 80012a0:	08001333 	.word	0x08001333
 80012a4:	08001333 	.word	0x08001333
 80012a8:	08001333 	.word	0x08001333
 80012ac:	08001333 	.word	0x08001333
 80012b0:	08001333 	.word	0x08001333
 80012b4:	08001333 	.word	0x08001333
 80012b8:	08001333 	.word	0x08001333
 80012bc:	08001333 	.word	0x08001333
 80012c0:	08001333 	.word	0x08001333
 80012c4:	08001333 	.word	0x08001333
 80012c8:	080012e1 	.word	0x080012e1
 80012cc:	080012f5 	.word	0x080012f5
 80012d0:	4a79      	ldr	r2, [pc, #484]	@ (80014b8 <HAL_GPIO_Init+0x2b4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012d6:	e02c      	b.n	8001332 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	623b      	str	r3, [r7, #32]
          break;
 80012de:	e029      	b.n	8001334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	3304      	adds	r3, #4
 80012e6:	623b      	str	r3, [r7, #32]
          break;
 80012e8:	e024      	b.n	8001334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	3308      	adds	r3, #8
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e01f      	b.n	8001334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	330c      	adds	r3, #12
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e01a      	b.n	8001334 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001306:	2304      	movs	r3, #4
 8001308:	623b      	str	r3, [r7, #32]
          break;
 800130a:	e013      	b.n	8001334 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d105      	bne.n	8001320 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001314:	2308      	movs	r3, #8
 8001316:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	611a      	str	r2, [r3, #16]
          break;
 800131e:	e009      	b.n	8001334 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001320:	2308      	movs	r3, #8
 8001322:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	615a      	str	r2, [r3, #20]
          break;
 800132a:	e003      	b.n	8001334 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
          break;
 8001330:	e000      	b.n	8001334 <HAL_GPIO_Init+0x130>
          break;
 8001332:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	2bff      	cmp	r3, #255	@ 0xff
 8001338:	d801      	bhi.n	800133e <HAL_GPIO_Init+0x13a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	e001      	b.n	8001342 <HAL_GPIO_Init+0x13e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3304      	adds	r3, #4
 8001342:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2bff      	cmp	r3, #255	@ 0xff
 8001348:	d802      	bhi.n	8001350 <HAL_GPIO_Init+0x14c>
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	e002      	b.n	8001356 <HAL_GPIO_Init+0x152>
 8001350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001352:	3b08      	subs	r3, #8
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	210f      	movs	r1, #15
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	401a      	ands	r2, r3
 8001368:	6a39      	ldr	r1, [r7, #32]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	431a      	orrs	r2, r3
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80b1 	beq.w	80014e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001384:	4b4d      	ldr	r3, [pc, #308]	@ (80014bc <HAL_GPIO_Init+0x2b8>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a4c      	ldr	r2, [pc, #304]	@ (80014bc <HAL_GPIO_Init+0x2b8>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b4a      	ldr	r3, [pc, #296]	@ (80014bc <HAL_GPIO_Init+0x2b8>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800139c:	4a48      	ldr	r2, [pc, #288]	@ (80014c0 <HAL_GPIO_Init+0x2bc>)
 800139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	4013      	ands	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a40      	ldr	r2, [pc, #256]	@ (80014c4 <HAL_GPIO_Init+0x2c0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d013      	beq.n	80013f0 <HAL_GPIO_Init+0x1ec>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a3f      	ldr	r2, [pc, #252]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d00d      	beq.n	80013ec <HAL_GPIO_Init+0x1e8>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a3e      	ldr	r2, [pc, #248]	@ (80014cc <HAL_GPIO_Init+0x2c8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d007      	beq.n	80013e8 <HAL_GPIO_Init+0x1e4>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a3d      	ldr	r2, [pc, #244]	@ (80014d0 <HAL_GPIO_Init+0x2cc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d101      	bne.n	80013e4 <HAL_GPIO_Init+0x1e0>
 80013e0:	2303      	movs	r3, #3
 80013e2:	e006      	b.n	80013f2 <HAL_GPIO_Init+0x1ee>
 80013e4:	2304      	movs	r3, #4
 80013e6:	e004      	b.n	80013f2 <HAL_GPIO_Init+0x1ee>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e002      	b.n	80013f2 <HAL_GPIO_Init+0x1ee>
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <HAL_GPIO_Init+0x1ee>
 80013f0:	2300      	movs	r3, #0
 80013f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013f4:	f002 0203 	and.w	r2, r2, #3
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	4093      	lsls	r3, r2
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001402:	492f      	ldr	r1, [pc, #188]	@ (80014c0 <HAL_GPIO_Init+0x2bc>)
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800141c:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	492c      	ldr	r1, [pc, #176]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	608b      	str	r3, [r1, #8]
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800142a:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	43db      	mvns	r3, r3
 8001432:	4928      	ldr	r1, [pc, #160]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001434:	4013      	ands	r3, r2
 8001436:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d006      	beq.n	8001452 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001444:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	4922      	ldr	r1, [pc, #136]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	60cb      	str	r3, [r1, #12]
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	43db      	mvns	r3, r3
 800145a:	491e      	ldr	r1, [pc, #120]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800145c:	4013      	ands	r3, r2
 800145e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800146c:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4918      	ldr	r1, [pc, #96]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	43db      	mvns	r3, r3
 8001482:	4914      	ldr	r1, [pc, #80]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001484:	4013      	ands	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d021      	beq.n	80014d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	490e      	ldr	r1, [pc, #56]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
 80014a0:	e021      	b.n	80014e6 <HAL_GPIO_Init+0x2e2>
 80014a2:	bf00      	nop
 80014a4:	10320000 	.word	0x10320000
 80014a8:	10310000 	.word	0x10310000
 80014ac:	10220000 	.word	0x10220000
 80014b0:	10210000 	.word	0x10210000
 80014b4:	10120000 	.word	0x10120000
 80014b8:	10110000 	.word	0x10110000
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010000 	.word	0x40010000
 80014c4:	40010800 	.word	0x40010800
 80014c8:	40010c00 	.word	0x40010c00
 80014cc:	40011000 	.word	0x40011000
 80014d0:	40011400 	.word	0x40011400
 80014d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <HAL_GPIO_Init+0x304>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	43db      	mvns	r3, r3
 80014e0:	4909      	ldr	r1, [pc, #36]	@ (8001508 <HAL_GPIO_Init+0x304>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	3301      	adds	r3, #1
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	fa22 f303 	lsr.w	r3, r2, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f47f ae8e 	bne.w	8001218 <HAL_GPIO_Init+0x14>
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	372c      	adds	r7, #44	@ 0x2c
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	40010400 	.word	0x40010400

0800150c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e001      	b.n	800152e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	807b      	strh	r3, [r7, #2]
 8001546:	4613      	mov	r3, r2
 8001548:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800154a:	787b      	ldrb	r3, [r7, #1]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001550:	887a      	ldrh	r2, [r7, #2]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001556:	e003      	b.n	8001560 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	041a      	lsls	r2, r3, #16
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	611a      	str	r2, [r3, #16]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
	...

0800156c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001576:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	4013      	ands	r3, r2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f806 	bl	800159c <HAL_GPIO_EXTI_Callback>
  }
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40010400 	.word	0x40010400

0800159c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e272      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8087 	beq.w	80016de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015d0:	4b92      	ldr	r3, [pc, #584]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d00c      	beq.n	80015f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015dc:	4b8f      	ldr	r3, [pc, #572]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d112      	bne.n	800160e <HAL_RCC_OscConfig+0x5e>
 80015e8:	4b8c      	ldr	r3, [pc, #560]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f4:	d10b      	bne.n	800160e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f6:	4b89      	ldr	r3, [pc, #548]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d06c      	beq.n	80016dc <HAL_RCC_OscConfig+0x12c>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d168      	bne.n	80016dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e24c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x76>
 8001618:	4b80      	ldr	r3, [pc, #512]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a7f      	ldr	r2, [pc, #508]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 800161e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e02e      	b.n	8001684 <HAL_RCC_OscConfig+0xd4>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x98>
 800162e:	4b7b      	ldr	r3, [pc, #492]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a7a      	ldr	r2, [pc, #488]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001634:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b78      	ldr	r3, [pc, #480]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a77      	ldr	r2, [pc, #476]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001640:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e01d      	b.n	8001684 <HAL_RCC_OscConfig+0xd4>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0xbc>
 8001652:	4b72      	ldr	r3, [pc, #456]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a71      	ldr	r2, [pc, #452]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b6f      	ldr	r3, [pc, #444]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6e      	ldr	r2, [pc, #440]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0xd4>
 800166c:	4b6b      	ldr	r3, [pc, #428]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a6a      	ldr	r2, [pc, #424]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b68      	ldr	r3, [pc, #416]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a67      	ldr	r2, [pc, #412]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001682:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fbcc 	bl	8000e28 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fbc8 	bl	8000e28 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	@ 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e200      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b5d      	ldr	r3, [pc, #372]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0xe4>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fbb8 	bl	8000e28 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fbb4 	bl	8000e28 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	@ 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e1ec      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	4b53      	ldr	r3, [pc, #332]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x10c>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d063      	beq.n	80017b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ea:	4b4c      	ldr	r3, [pc, #304]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016f6:	4b49      	ldr	r3, [pc, #292]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d11c      	bne.n	800173c <HAL_RCC_OscConfig+0x18c>
 8001702:	4b46      	ldr	r3, [pc, #280]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d116      	bne.n	800173c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	4b43      	ldr	r3, [pc, #268]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_RCC_OscConfig+0x176>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e1c0      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b3d      	ldr	r3, [pc, #244]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4939      	ldr	r1, [pc, #228]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	e03a      	b.n	80017b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d020      	beq.n	8001786 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001744:	4b36      	ldr	r3, [pc, #216]	@ (8001820 <HAL_RCC_OscConfig+0x270>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff fb6d 	bl	8000e28 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fb69 	bl	8000e28 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1a1      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	4b2d      	ldr	r3, [pc, #180]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b2a      	ldr	r3, [pc, #168]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4927      	ldr	r1, [pc, #156]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
 8001784:	e015      	b.n	80017b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b26      	ldr	r3, [pc, #152]	@ (8001820 <HAL_RCC_OscConfig+0x270>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fb4c 	bl	8000e28 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001794:	f7ff fb48 	bl	8000e28 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e180      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	4b1d      	ldr	r3, [pc, #116]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d03a      	beq.n	8001834 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d019      	beq.n	80017fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c6:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <HAL_RCC_OscConfig+0x274>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7ff fb2c 	bl	8000e28 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fb28 	bl	8000e28 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e160      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f000 face 	bl	8001d94 <RCC_Delay>
 80017f8:	e01c      	b.n	8001834 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <HAL_RCC_OscConfig+0x274>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7ff fb12 	bl	8000e28 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001806:	e00f      	b.n	8001828 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff fb0e 	bl	8000e28 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d908      	bls.n	8001828 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e146      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	42420000 	.word	0x42420000
 8001824:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001828:	4b92      	ldr	r3, [pc, #584]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1e9      	bne.n	8001808 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80a6 	beq.w	800198e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001846:	4b8b      	ldr	r3, [pc, #556]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10d      	bne.n	800186e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b88      	ldr	r3, [pc, #544]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a87      	ldr	r2, [pc, #540]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b85      	ldr	r3, [pc, #532]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186a:	2301      	movs	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186e:	4b82      	ldr	r3, [pc, #520]	@ (8001a78 <HAL_RCC_OscConfig+0x4c8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d118      	bne.n	80018ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a78 <HAL_RCC_OscConfig+0x4c8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a78 <HAL_RCC_OscConfig+0x4c8>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001886:	f7ff facf 	bl	8000e28 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188e:	f7ff facb 	bl	8000e28 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b64      	cmp	r3, #100	@ 0x64
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e103      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	4b75      	ldr	r3, [pc, #468]	@ (8001a78 <HAL_RCC_OscConfig+0x4c8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x312>
 80018b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6213      	str	r3, [r2, #32]
 80018c0:	e02d      	b.n	800191e <HAL_RCC_OscConfig+0x36e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x334>
 80018ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4a69      	ldr	r2, [pc, #420]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	6213      	str	r3, [r2, #32]
 80018d6:	4b67      	ldr	r3, [pc, #412]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a66      	ldr	r2, [pc, #408]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	6213      	str	r3, [r2, #32]
 80018e2:	e01c      	b.n	800191e <HAL_RCC_OscConfig+0x36e>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d10c      	bne.n	8001906 <HAL_RCC_OscConfig+0x356>
 80018ec:	4b61      	ldr	r3, [pc, #388]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4a60      	ldr	r2, [pc, #384]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6213      	str	r3, [r2, #32]
 80018f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	e00b      	b.n	800191e <HAL_RCC_OscConfig+0x36e>
 8001906:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4a5a      	ldr	r2, [pc, #360]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	6213      	str	r3, [r2, #32]
 8001912:	4b58      	ldr	r3, [pc, #352]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a57      	ldr	r2, [pc, #348]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	f023 0304 	bic.w	r3, r3, #4
 800191c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d015      	beq.n	8001952 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7ff fa7f 	bl	8000e28 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff fa7b 	bl	8000e28 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e0b1      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001944:	4b4b      	ldr	r3, [pc, #300]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ee      	beq.n	800192e <HAL_RCC_OscConfig+0x37e>
 8001950:	e014      	b.n	800197c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001952:	f7ff fa69 	bl	8000e28 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff fa65 	bl	8000e28 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e09b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001970:	4b40      	ldr	r3, [pc, #256]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ee      	bne.n	800195a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800197c:	7dfb      	ldrb	r3, [r7, #23]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d105      	bne.n	800198e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001982:	4b3c      	ldr	r3, [pc, #240]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a3b      	ldr	r2, [pc, #236]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8087 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001998:	4b36      	ldr	r3, [pc, #216]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d061      	beq.n	8001a68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d146      	bne.n	8001a3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ac:	4b33      	ldr	r3, [pc, #204]	@ (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff fa39 	bl	8000e28 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff fa35 	bl	8000e28 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e06d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019cc:	4b29      	ldr	r3, [pc, #164]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e0:	d108      	bne.n	80019f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019e2:	4b24      	ldr	r3, [pc, #144]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	4921      	ldr	r1, [pc, #132]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a19      	ldr	r1, [r3, #32]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	430b      	orrs	r3, r1
 8001a06:	491b      	ldr	r1, [pc, #108]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fa09 	bl	8000e28 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7ff fa05 	bl	8000e28 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e03d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x46a>
 8001a38:	e035      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff f9f2 	bl	8000e28 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff f9ee 	bl	8000e28 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e026      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x498>
 8001a66:	e01e      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d107      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e019      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40007000 	.word	0x40007000
 8001a7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_RCC_OscConfig+0x500>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0d0      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d910      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b67      	ldr	r3, [pc, #412]	@ (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 0207 	bic.w	r2, r3, #7
 8001ade:	4965      	ldr	r1, [pc, #404]	@ (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b63      	ldr	r3, [pc, #396]	@ (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0b8      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b10:	4b59      	ldr	r3, [pc, #356]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a58      	ldr	r2, [pc, #352]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b28:	4b53      	ldr	r3, [pc, #332]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b50      	ldr	r3, [pc, #320]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	494d      	ldr	r1, [pc, #308]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d040      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b47      	ldr	r3, [pc, #284]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d115      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e07f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	4b41      	ldr	r3, [pc, #260]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e073      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	4b3d      	ldr	r3, [pc, #244]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06b      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b92:	4b39      	ldr	r3, [pc, #228]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f023 0203 	bic.w	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4936      	ldr	r1, [pc, #216]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba4:	f7ff f940 	bl	8000e28 <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bac:	f7ff f93c 	bl	8000e28 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e053      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 020c 	and.w	r2, r3, #12
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d1eb      	bne.n	8001bac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b27      	ldr	r3, [pc, #156]	@ (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d210      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0207 	bic.w	r2, r3, #7
 8001bea:	4922      	ldr	r1, [pc, #136]	@ (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e032      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c10:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4916      	ldr	r1, [pc, #88]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	490e      	ldr	r1, [pc, #56]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c42:	f000 f821 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	490a      	ldr	r1, [pc, #40]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c54:	5ccb      	ldrb	r3, [r1, r3]
 8001c56:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5a:	4a09      	ldr	r2, [pc, #36]	@ (8001c80 <HAL_RCC_ClockConfig+0x1cc>)
 8001c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_RCC_ClockConfig+0x1d0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f89e 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40022000 	.word	0x40022000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	0800400c 	.word	0x0800400c
 8001c80:	20000004 	.word	0x20000004
 8001c84:	20000008 	.word	0x20000008

08001c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d002      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x30>
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_GetSysClockFreq+0x36>
 8001cb6:	e027      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cba:	613b      	str	r3, [r7, #16]
      break;
 8001cbc:	e027      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	0c9b      	lsrs	r3, r3, #18
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	4a17      	ldr	r2, [pc, #92]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d010      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cd6:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0c5b      	lsrs	r3, r3, #17
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	4a11      	ldr	r2, [pc, #68]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cea:	fb03 f202 	mul.w	r2, r3, r2
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e004      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cfc:	fb02 f303 	mul.w	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	613b      	str	r3, [r7, #16]
      break;
 8001d06:	e002      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d08:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d0a:	613b      	str	r3, [r7, #16]
      break;
 8001d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0e:	693b      	ldr	r3, [r7, #16]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	007a1200 	.word	0x007a1200
 8001d24:	08004024 	.word	0x08004024
 8001d28:	08004034 	.word	0x08004034
 8001d2c:	003d0900 	.word	0x003d0900

08001d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d34:	4b02      	ldr	r3, [pc, #8]	@ (8001d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	20000004 	.word	0x20000004

08001d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d48:	f7ff fff2 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4903      	ldr	r1, [pc, #12]	@ (8001d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	0800401c 	.word	0x0800401c

08001d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d70:	f7ff ffde 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	0adb      	lsrs	r3, r3, #11
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4903      	ldr	r1, [pc, #12]	@ (8001d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	0800401c 	.word	0x0800401c

08001d94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <RCC_Delay+0x34>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <RCC_Delay+0x38>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0a5b      	lsrs	r3, r3, #9
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001db0:	bf00      	nop
  }
  while (Delay --);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	60fa      	str	r2, [r7, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f9      	bne.n	8001db0 <RCC_Delay+0x1c>
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	20000004 	.word	0x20000004
 8001dcc:	10624dd3 	.word	0x10624dd3

08001dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e041      	b.n	8001e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fe3e 	bl	8000a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4610      	mov	r0, r2
 8001e10:	f000 f940 	bl	8002094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d001      	beq.n	8001e88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e032      	b.n	8001eee <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a18      	ldr	r2, [pc, #96]	@ (8001ef8 <HAL_TIM_Base_Start+0x88>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_TIM_Base_Start+0x48>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea2:	d009      	beq.n	8001eb8 <HAL_TIM_Base_Start+0x48>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a14      	ldr	r2, [pc, #80]	@ (8001efc <HAL_TIM_Base_Start+0x8c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_TIM_Base_Start+0x48>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a13      	ldr	r2, [pc, #76]	@ (8001f00 <HAL_TIM_Base_Start+0x90>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d010      	beq.n	8001eec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eda:	e007      	b.n	8001eec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40000800 	.word	0x40000800

08001f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_TIM_ConfigClockSource+0x1c>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e0b4      	b.n	800208a <HAL_TIM_ConfigClockSource+0x186>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f58:	d03e      	beq.n	8001fd8 <HAL_TIM_ConfigClockSource+0xd4>
 8001f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f5e:	f200 8087 	bhi.w	8002070 <HAL_TIM_ConfigClockSource+0x16c>
 8001f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f66:	f000 8086 	beq.w	8002076 <HAL_TIM_ConfigClockSource+0x172>
 8001f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f6e:	d87f      	bhi.n	8002070 <HAL_TIM_ConfigClockSource+0x16c>
 8001f70:	2b70      	cmp	r3, #112	@ 0x70
 8001f72:	d01a      	beq.n	8001faa <HAL_TIM_ConfigClockSource+0xa6>
 8001f74:	2b70      	cmp	r3, #112	@ 0x70
 8001f76:	d87b      	bhi.n	8002070 <HAL_TIM_ConfigClockSource+0x16c>
 8001f78:	2b60      	cmp	r3, #96	@ 0x60
 8001f7a:	d050      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x11a>
 8001f7c:	2b60      	cmp	r3, #96	@ 0x60
 8001f7e:	d877      	bhi.n	8002070 <HAL_TIM_ConfigClockSource+0x16c>
 8001f80:	2b50      	cmp	r3, #80	@ 0x50
 8001f82:	d03c      	beq.n	8001ffe <HAL_TIM_ConfigClockSource+0xfa>
 8001f84:	2b50      	cmp	r3, #80	@ 0x50
 8001f86:	d873      	bhi.n	8002070 <HAL_TIM_ConfigClockSource+0x16c>
 8001f88:	2b40      	cmp	r3, #64	@ 0x40
 8001f8a:	d058      	beq.n	800203e <HAL_TIM_ConfigClockSource+0x13a>
 8001f8c:	2b40      	cmp	r3, #64	@ 0x40
 8001f8e:	d86f      	bhi.n	8002070 <HAL_TIM_ConfigClockSource+0x16c>
 8001f90:	2b30      	cmp	r3, #48	@ 0x30
 8001f92:	d064      	beq.n	800205e <HAL_TIM_ConfigClockSource+0x15a>
 8001f94:	2b30      	cmp	r3, #48	@ 0x30
 8001f96:	d86b      	bhi.n	8002070 <HAL_TIM_ConfigClockSource+0x16c>
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d060      	beq.n	800205e <HAL_TIM_ConfigClockSource+0x15a>
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d867      	bhi.n	8002070 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d05c      	beq.n	800205e <HAL_TIM_ConfigClockSource+0x15a>
 8001fa4:	2b10      	cmp	r3, #16
 8001fa6:	d05a      	beq.n	800205e <HAL_TIM_ConfigClockSource+0x15a>
 8001fa8:	e062      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fba:	f000 f950 	bl	800225e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	609a      	str	r2, [r3, #8]
      break;
 8001fd6:	e04f      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fe8:	f000 f939 	bl	800225e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ffa:	609a      	str	r2, [r3, #8]
      break;
 8001ffc:	e03c      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800200a:	461a      	mov	r2, r3
 800200c:	f000 f8b0 	bl	8002170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2150      	movs	r1, #80	@ 0x50
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f907 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 800201c:	e02c      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800202a:	461a      	mov	r2, r3
 800202c:	f000 f8ce 	bl	80021cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2160      	movs	r1, #96	@ 0x60
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f8f7 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 800203c:	e01c      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800204a:	461a      	mov	r2, r3
 800204c:	f000 f890 	bl	8002170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2140      	movs	r1, #64	@ 0x40
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f8e7 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 800205c:	e00c      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4619      	mov	r1, r3
 8002068:	4610      	mov	r0, r2
 800206a:	f000 f8de 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 800206e:	e003      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
      break;
 8002074:	e000      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002164 <TIM_Base_SetConfig+0xd0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00b      	beq.n	80020c4 <TIM_Base_SetConfig+0x30>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b2:	d007      	beq.n	80020c4 <TIM_Base_SetConfig+0x30>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002168 <TIM_Base_SetConfig+0xd4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d003      	beq.n	80020c4 <TIM_Base_SetConfig+0x30>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a2b      	ldr	r2, [pc, #172]	@ (800216c <TIM_Base_SetConfig+0xd8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d108      	bne.n	80020d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a22      	ldr	r2, [pc, #136]	@ (8002164 <TIM_Base_SetConfig+0xd0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00b      	beq.n	80020f6 <TIM_Base_SetConfig+0x62>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e4:	d007      	beq.n	80020f6 <TIM_Base_SetConfig+0x62>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002168 <TIM_Base_SetConfig+0xd4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d003      	beq.n	80020f6 <TIM_Base_SetConfig+0x62>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1e      	ldr	r2, [pc, #120]	@ (800216c <TIM_Base_SetConfig+0xd8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d108      	bne.n	8002108 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <TIM_Base_SetConfig+0xd0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d103      	bne.n	800213c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f023 0201 	bic.w	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]
  }
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40012c00 	.word	0x40012c00
 8002168:	40000400 	.word	0x40000400
 800216c:	40000800 	.word	0x40000800

08002170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	f023 0201 	bic.w	r2, r3, #1
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800219a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f023 030a 	bic.w	r3, r3, #10
 80021ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	621a      	str	r2, [r3, #32]
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f023 0210 	bic.w	r2, r3, #16
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80021f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	031b      	lsls	r3, r3, #12
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002208:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	621a      	str	r2, [r3, #32]
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	f043 0307 	orr.w	r3, r3, #7
 800224c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800225e:	b480      	push	{r7}
 8002260:	b087      	sub	sp, #28
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002278:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	021a      	lsls	r2, r3, #8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	431a      	orrs	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4313      	orrs	r3, r2
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	609a      	str	r2, [r3, #8]
}
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e046      	b.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a16      	ldr	r2, [pc, #88]	@ (800234c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002300:	d009      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a10      	ldr	r2, [pc, #64]	@ (8002354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10c      	bne.n	8002330 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800231c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	4313      	orrs	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40012c00 	.word	0x40012c00
 8002350:	40000400 	.word	0x40000400
 8002354:	40000800 	.word	0x40000800

08002358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e042      	b.n	80023f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe fbaa 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2224      	movs	r2, #36	@ 0x24
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800239a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fdb7 	bl	8002f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	@ 0x28
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b20      	cmp	r3, #32
 8002416:	d175      	bne.n	8002504 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_UART_Transmit+0x2c>
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e06e      	b.n	8002506 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2221      	movs	r2, #33	@ 0x21
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002436:	f7fe fcf7 	bl	8000e28 <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	88fa      	ldrh	r2, [r7, #6]
 8002440:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	88fa      	ldrh	r2, [r7, #6]
 8002446:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002450:	d108      	bne.n	8002464 <HAL_UART_Transmit+0x6c>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d104      	bne.n	8002464 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	e003      	b.n	800246c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800246c:	e02e      	b.n	80024cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2200      	movs	r2, #0
 8002476:	2180      	movs	r1, #128	@ 0x80
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fb1c 	bl	8002ab6 <UART_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e03a      	b.n	8002506 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10b      	bne.n	80024ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	3302      	adds	r3, #2
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	e007      	b.n	80024be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	3301      	adds	r3, #1
 80024bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1cb      	bne.n	800246e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2200      	movs	r2, #0
 80024de:	2140      	movs	r1, #64	@ 0x40
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 fae8 	bl	8002ab6 <UART_WaitOnFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e006      	b.n	8002506 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	e000      	b.n	8002506 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002504:	2302      	movs	r3, #2
  }
}
 8002506:	4618      	mov	r0, r3
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	4613      	mov	r3, r2
 800251a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b20      	cmp	r3, #32
 8002526:	d112      	bne.n	800254e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_UART_Receive_IT+0x26>
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e00b      	b.n	8002550 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	461a      	mov	r2, r3
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fb0f 	bl	8002b68 <UART_Start_Receive_IT>
 800254a:	4603      	mov	r3, r0
 800254c:	e000      	b.n	8002550 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b0ba      	sub	sp, #232	@ 0xe8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800258a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <HAL_UART_IRQHandler+0x66>
 80025aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fbec 	bl	8002d94 <UART_Receive_IT>
      return;
 80025bc:	e25b      	b.n	8002a76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80de 	beq.w	8002784 <HAL_UART_IRQHandler+0x22c>
 80025c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80d1 	beq.w	8002784 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_UART_IRQHandler+0xae>
 80025ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <HAL_UART_IRQHandler+0xd2>
 8002612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	f043 0202 	orr.w	r2, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800262a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <HAL_UART_IRQHandler+0xf6>
 8002636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	f043 0204 	orr.w	r2, r3, #4
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800264e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d011      	beq.n	800267e <HAL_UART_IRQHandler+0x126>
 800265a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b00      	cmp	r3, #0
 8002664:	d105      	bne.n	8002672 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	f043 0208 	orr.w	r2, r3, #8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 81f2 	beq.w	8002a6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_UART_IRQHandler+0x14e>
 8002694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fb77 	bl	8002d94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <HAL_UART_IRQHandler+0x17a>
 80026ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d04f      	beq.n	8002772 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fa81 	bl	8002bda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d041      	beq.n	800276a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3314      	adds	r3, #20
 80026ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026f4:	e853 3f00 	ldrex	r3, [r3]
 80026f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80026fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002700:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002704:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3314      	adds	r3, #20
 800270e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002712:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002716:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800271e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002722:	e841 2300 	strex	r3, r2, [r1]
 8002726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800272a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1d9      	bne.n	80026e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d013      	beq.n	8002762 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273e:	4a7e      	ldr	r2, [pc, #504]	@ (8002938 <HAL_UART_IRQHandler+0x3e0>)
 8002740:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fce4 	bl	8001114 <HAL_DMA_Abort_IT>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800275c:	4610      	mov	r0, r2
 800275e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002760:	e00e      	b.n	8002780 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f993 	bl	8002a8e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002768:	e00a      	b.n	8002780 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f98f 	bl	8002a8e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002770:	e006      	b.n	8002780 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f98b 	bl	8002a8e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800277e:	e175      	b.n	8002a6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002780:	bf00      	nop
    return;
 8002782:	e173      	b.n	8002a6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	2b01      	cmp	r3, #1
 800278a:	f040 814f 	bne.w	8002a2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800278e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8148 	beq.w	8002a2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800279c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8141 	beq.w	8002a2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80b6 	beq.w	800293c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8145 	beq.w	8002a70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80027ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027ee:	429a      	cmp	r2, r3
 80027f0:	f080 813e 	bcs.w	8002a70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b20      	cmp	r3, #32
 8002804:	f000 8088 	beq.w	8002918 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	330c      	adds	r3, #12
 800280e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002812:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002816:	e853 3f00 	ldrex	r3, [r3]
 800281a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800281e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002822:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002826:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	330c      	adds	r3, #12
 8002830:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002834:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002838:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002840:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002844:	e841 2300 	strex	r3, r2, [r1]
 8002848:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800284c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1d9      	bne.n	8002808 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3314      	adds	r3, #20
 800285a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800285e:	e853 3f00 	ldrex	r3, [r3]
 8002862:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002864:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3314      	adds	r3, #20
 8002874:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002878:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800287c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002880:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002884:	e841 2300 	strex	r3, r2, [r1]
 8002888:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800288a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e1      	bne.n	8002854 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3314      	adds	r3, #20
 8002896:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002898:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800289a:	e853 3f00 	ldrex	r3, [r3]
 800289e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80028a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3314      	adds	r3, #20
 80028b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80028b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80028ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80028bc:	e841 2300 	strex	r3, r2, [r1]
 80028c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80028c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e3      	bne.n	8002890 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028e0:	e853 3f00 	ldrex	r3, [r3]
 80028e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80028e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028e8:	f023 0310 	bic.w	r3, r3, #16
 80028ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80028fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80028fc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002900:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e3      	bne.n	80028d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fbc3 	bl	800109e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002926:	b29b      	uxth	r3, r3
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	b29b      	uxth	r3, r3
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f8b6 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002934:	e09c      	b.n	8002a70 <HAL_UART_IRQHandler+0x518>
 8002936:	bf00      	nop
 8002938:	08002c9f 	.word	0x08002c9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002944:	b29b      	uxth	r3, r3
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 808e 	beq.w	8002a74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002958:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8089 	beq.w	8002a74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800296c:	e853 3f00 	ldrex	r3, [r3]
 8002970:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002978:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	330c      	adds	r3, #12
 8002982:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002986:	647a      	str	r2, [r7, #68]	@ 0x44
 8002988:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800298c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800298e:	e841 2300 	strex	r3, r2, [r1]
 8002992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e3      	bne.n	8002962 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3314      	adds	r3, #20
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	e853 3f00 	ldrex	r3, [r3]
 80029a8:	623b      	str	r3, [r7, #32]
   return(result);
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3314      	adds	r3, #20
 80029ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80029be:	633a      	str	r2, [r7, #48]	@ 0x30
 80029c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029c6:	e841 2300 	strex	r3, r2, [r1]
 80029ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80029cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1e3      	bne.n	800299a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	330c      	adds	r3, #12
 80029e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	e853 3f00 	ldrex	r3, [r3]
 80029ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0310 	bic.w	r3, r3, #16
 80029f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	330c      	adds	r3, #12
 8002a00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002a04:	61fa      	str	r2, [r7, #28]
 8002a06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a08:	69b9      	ldr	r1, [r7, #24]
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	e841 2300 	strex	r3, r2, [r1]
 8002a10:	617b      	str	r3, [r7, #20]
   return(result);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e3      	bne.n	80029e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f83b 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a2a:	e023      	b.n	8002a74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <HAL_UART_IRQHandler+0x4f4>
 8002a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f93e 	bl	8002cc6 <UART_Transmit_IT>
    return;
 8002a4a:	e014      	b.n	8002a76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00e      	beq.n	8002a76 <HAL_UART_IRQHandler+0x51e>
 8002a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f97d 	bl	8002d64 <UART_EndTransmit_IT>
    return;
 8002a6a:	e004      	b.n	8002a76 <HAL_UART_IRQHandler+0x51e>
    return;
 8002a6c:	bf00      	nop
 8002a6e:	e002      	b.n	8002a76 <HAL_UART_IRQHandler+0x51e>
      return;
 8002a70:	bf00      	nop
 8002a72:	e000      	b.n	8002a76 <HAL_UART_IRQHandler+0x51e>
      return;
 8002a74:	bf00      	nop
  }
}
 8002a76:	37e8      	adds	r7, #232	@ 0xe8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac6:	e03b      	b.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d037      	beq.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad0:	f7fe f9aa 	bl	8000e28 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	6a3a      	ldr	r2, [r7, #32]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d302      	bcc.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e03a      	b.n	8002b60 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d023      	beq.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b80      	cmp	r3, #128	@ 0x80
 8002afc:	d020      	beq.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b40      	cmp	r3, #64	@ 0x40
 8002b02:	d01d      	beq.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d116      	bne.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f856 	bl	8002bda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2208      	movs	r2, #8
 8002b32:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e00f      	b.n	8002b60 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d0b4      	beq.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2222      	movs	r2, #34	@ 0x22
 8002b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0220 	orr.w	r2, r2, #32
 8002bcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b095      	sub	sp, #84	@ 0x54
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	330c      	adds	r3, #12
 8002be8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c02:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c0a:	e841 2300 	strex	r3, r2, [r1]
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1e5      	bne.n	8002be2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3314      	adds	r3, #20
 8002c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3314      	adds	r3, #20
 8002c34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c3e:	e841 2300 	strex	r3, r2, [r1]
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e5      	bne.n	8002c16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d119      	bne.n	8002c86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	330c      	adds	r3, #12
 8002c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	e853 3f00 	ldrex	r3, [r3]
 8002c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f023 0310 	bic.w	r3, r3, #16
 8002c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c72:	61ba      	str	r2, [r7, #24]
 8002c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c76:	6979      	ldr	r1, [r7, #20]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	e841 2300 	strex	r3, r2, [r1]
 8002c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e5      	bne.n	8002c52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c94:	bf00      	nop
 8002c96:	3754      	adds	r7, #84	@ 0x54
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7ff fee8 	bl	8002a8e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b21      	cmp	r3, #33	@ 0x21
 8002cd8:	d13e      	bne.n	8002d58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce2:	d114      	bne.n	8002d0e <UART_Transmit_IT+0x48>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d110      	bne.n	8002d0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	1c9a      	adds	r2, r3, #2
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	621a      	str	r2, [r3, #32]
 8002d0c:	e008      	b.n	8002d20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	1c59      	adds	r1, r3, #1
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6211      	str	r1, [r2, #32]
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10f      	bne.n	8002d54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fe79 	bl	8002a7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08c      	sub	sp, #48	@ 0x30
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b22      	cmp	r3, #34	@ 0x22
 8002da6:	f040 80ae 	bne.w	8002f06 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db2:	d117      	bne.n	8002de4 <UART_Receive_IT+0x50>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d113      	bne.n	8002de4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	1c9a      	adds	r2, r3, #2
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002de2:	e026      	b.n	8002e32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df6:	d007      	beq.n	8002e08 <UART_Receive_IT+0x74>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <UART_Receive_IT+0x82>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d106      	bne.n	8002e16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e008      	b.n	8002e28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d15d      	bne.n	8002f02 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0220 	bic.w	r2, r2, #32
 8002e54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d135      	bne.n	8002ef8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	330c      	adds	r3, #12
 8002e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f023 0310 	bic.w	r3, r3, #16
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb2:	623a      	str	r2, [r7, #32]
 8002eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb6:	69f9      	ldr	r1, [r7, #28]
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	e841 2300 	strex	r3, r2, [r1]
 8002ebe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e5      	bne.n	8002e92 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d10a      	bne.n	8002eea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fdd5 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
 8002ef6:	e002      	b.n	8002efe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7fd fa53 	bl	80003a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e002      	b.n	8002f08 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3730      	adds	r7, #48	@ 0x30
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002f4a:	f023 030c 	bic.w	r3, r3, #12
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a2c      	ldr	r2, [pc, #176]	@ (8003024 <UART_SetConfig+0x114>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d103      	bne.n	8002f80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f78:	f7fe fef8 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	e002      	b.n	8002f86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f80:	f7fe fee0 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 8002f84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009a      	lsls	r2, r3, #2
 8002f90:	441a      	add	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	4a22      	ldr	r2, [pc, #136]	@ (8003028 <UART_SetConfig+0x118>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	0119      	lsls	r1, r3, #4
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009a      	lsls	r2, r3, #2
 8002fb0:	441a      	add	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003028 <UART_SetConfig+0x118>)
 8002fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2064      	movs	r0, #100	@ 0x64
 8002fc6:	fb00 f303 	mul.w	r3, r0, r3
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	3332      	adds	r3, #50	@ 0x32
 8002fd0:	4a15      	ldr	r2, [pc, #84]	@ (8003028 <UART_SetConfig+0x118>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fdc:	4419      	add	r1, r3
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009a      	lsls	r2, r3, #2
 8002fe8:	441a      	add	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <UART_SetConfig+0x118>)
 8002ff6:	fba3 0302 	umull	r0, r3, r3, r2
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2064      	movs	r0, #100	@ 0x64
 8002ffe:	fb00 f303 	mul.w	r3, r0, r3
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	3332      	adds	r3, #50	@ 0x32
 8003008:	4a07      	ldr	r2, [pc, #28]	@ (8003028 <UART_SetConfig+0x118>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	f003 020f 	and.w	r2, r3, #15
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	440a      	add	r2, r1
 800301a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40013800 	.word	0x40013800
 8003028:	51eb851f 	.word	0x51eb851f

0800302c <std>:
 800302c:	2300      	movs	r3, #0
 800302e:	b510      	push	{r4, lr}
 8003030:	4604      	mov	r4, r0
 8003032:	e9c0 3300 	strd	r3, r3, [r0]
 8003036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800303a:	6083      	str	r3, [r0, #8]
 800303c:	8181      	strh	r1, [r0, #12]
 800303e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003040:	81c2      	strh	r2, [r0, #14]
 8003042:	6183      	str	r3, [r0, #24]
 8003044:	4619      	mov	r1, r3
 8003046:	2208      	movs	r2, #8
 8003048:	305c      	adds	r0, #92	@ 0x5c
 800304a:	f000 f9f9 	bl	8003440 <memset>
 800304e:	4b0d      	ldr	r3, [pc, #52]	@ (8003084 <std+0x58>)
 8003050:	6224      	str	r4, [r4, #32]
 8003052:	6263      	str	r3, [r4, #36]	@ 0x24
 8003054:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <std+0x5c>)
 8003056:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003058:	4b0c      	ldr	r3, [pc, #48]	@ (800308c <std+0x60>)
 800305a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800305c:	4b0c      	ldr	r3, [pc, #48]	@ (8003090 <std+0x64>)
 800305e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003060:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <std+0x68>)
 8003062:	429c      	cmp	r4, r3
 8003064:	d006      	beq.n	8003074 <std+0x48>
 8003066:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800306a:	4294      	cmp	r4, r2
 800306c:	d002      	beq.n	8003074 <std+0x48>
 800306e:	33d0      	adds	r3, #208	@ 0xd0
 8003070:	429c      	cmp	r4, r3
 8003072:	d105      	bne.n	8003080 <std+0x54>
 8003074:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800307c:	f000 ba58 	b.w	8003530 <__retarget_lock_init_recursive>
 8003080:	bd10      	pop	{r4, pc}
 8003082:	bf00      	nop
 8003084:	08003291 	.word	0x08003291
 8003088:	080032b3 	.word	0x080032b3
 800308c:	080032eb 	.word	0x080032eb
 8003090:	0800330f 	.word	0x0800330f
 8003094:	20000174 	.word	0x20000174

08003098 <stdio_exit_handler>:
 8003098:	4a02      	ldr	r2, [pc, #8]	@ (80030a4 <stdio_exit_handler+0xc>)
 800309a:	4903      	ldr	r1, [pc, #12]	@ (80030a8 <stdio_exit_handler+0x10>)
 800309c:	4803      	ldr	r0, [pc, #12]	@ (80030ac <stdio_exit_handler+0x14>)
 800309e:	f000 b869 	b.w	8003174 <_fwalk_sglue>
 80030a2:	bf00      	nop
 80030a4:	20000010 	.word	0x20000010
 80030a8:	08003dc5 	.word	0x08003dc5
 80030ac:	20000020 	.word	0x20000020

080030b0 <cleanup_stdio>:
 80030b0:	6841      	ldr	r1, [r0, #4]
 80030b2:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <cleanup_stdio+0x34>)
 80030b4:	b510      	push	{r4, lr}
 80030b6:	4299      	cmp	r1, r3
 80030b8:	4604      	mov	r4, r0
 80030ba:	d001      	beq.n	80030c0 <cleanup_stdio+0x10>
 80030bc:	f000 fe82 	bl	8003dc4 <_fflush_r>
 80030c0:	68a1      	ldr	r1, [r4, #8]
 80030c2:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <cleanup_stdio+0x38>)
 80030c4:	4299      	cmp	r1, r3
 80030c6:	d002      	beq.n	80030ce <cleanup_stdio+0x1e>
 80030c8:	4620      	mov	r0, r4
 80030ca:	f000 fe7b 	bl	8003dc4 <_fflush_r>
 80030ce:	68e1      	ldr	r1, [r4, #12]
 80030d0:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <cleanup_stdio+0x3c>)
 80030d2:	4299      	cmp	r1, r3
 80030d4:	d004      	beq.n	80030e0 <cleanup_stdio+0x30>
 80030d6:	4620      	mov	r0, r4
 80030d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030dc:	f000 be72 	b.w	8003dc4 <_fflush_r>
 80030e0:	bd10      	pop	{r4, pc}
 80030e2:	bf00      	nop
 80030e4:	20000174 	.word	0x20000174
 80030e8:	200001dc 	.word	0x200001dc
 80030ec:	20000244 	.word	0x20000244

080030f0 <global_stdio_init.part.0>:
 80030f0:	b510      	push	{r4, lr}
 80030f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <global_stdio_init.part.0+0x30>)
 80030f4:	4c0b      	ldr	r4, [pc, #44]	@ (8003124 <global_stdio_init.part.0+0x34>)
 80030f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003128 <global_stdio_init.part.0+0x38>)
 80030f8:	4620      	mov	r0, r4
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	2104      	movs	r1, #4
 80030fe:	2200      	movs	r2, #0
 8003100:	f7ff ff94 	bl	800302c <std>
 8003104:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003108:	2201      	movs	r2, #1
 800310a:	2109      	movs	r1, #9
 800310c:	f7ff ff8e 	bl	800302c <std>
 8003110:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003114:	2202      	movs	r2, #2
 8003116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800311a:	2112      	movs	r1, #18
 800311c:	f7ff bf86 	b.w	800302c <std>
 8003120:	200002ac 	.word	0x200002ac
 8003124:	20000174 	.word	0x20000174
 8003128:	08003099 	.word	0x08003099

0800312c <__sfp_lock_acquire>:
 800312c:	4801      	ldr	r0, [pc, #4]	@ (8003134 <__sfp_lock_acquire+0x8>)
 800312e:	f000 ba00 	b.w	8003532 <__retarget_lock_acquire_recursive>
 8003132:	bf00      	nop
 8003134:	200002b5 	.word	0x200002b5

08003138 <__sfp_lock_release>:
 8003138:	4801      	ldr	r0, [pc, #4]	@ (8003140 <__sfp_lock_release+0x8>)
 800313a:	f000 b9fb 	b.w	8003534 <__retarget_lock_release_recursive>
 800313e:	bf00      	nop
 8003140:	200002b5 	.word	0x200002b5

08003144 <__sinit>:
 8003144:	b510      	push	{r4, lr}
 8003146:	4604      	mov	r4, r0
 8003148:	f7ff fff0 	bl	800312c <__sfp_lock_acquire>
 800314c:	6a23      	ldr	r3, [r4, #32]
 800314e:	b11b      	cbz	r3, 8003158 <__sinit+0x14>
 8003150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003154:	f7ff bff0 	b.w	8003138 <__sfp_lock_release>
 8003158:	4b04      	ldr	r3, [pc, #16]	@ (800316c <__sinit+0x28>)
 800315a:	6223      	str	r3, [r4, #32]
 800315c:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <__sinit+0x2c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f5      	bne.n	8003150 <__sinit+0xc>
 8003164:	f7ff ffc4 	bl	80030f0 <global_stdio_init.part.0>
 8003168:	e7f2      	b.n	8003150 <__sinit+0xc>
 800316a:	bf00      	nop
 800316c:	080030b1 	.word	0x080030b1
 8003170:	200002ac 	.word	0x200002ac

08003174 <_fwalk_sglue>:
 8003174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003178:	4607      	mov	r7, r0
 800317a:	4688      	mov	r8, r1
 800317c:	4614      	mov	r4, r2
 800317e:	2600      	movs	r6, #0
 8003180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003184:	f1b9 0901 	subs.w	r9, r9, #1
 8003188:	d505      	bpl.n	8003196 <_fwalk_sglue+0x22>
 800318a:	6824      	ldr	r4, [r4, #0]
 800318c:	2c00      	cmp	r4, #0
 800318e:	d1f7      	bne.n	8003180 <_fwalk_sglue+0xc>
 8003190:	4630      	mov	r0, r6
 8003192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003196:	89ab      	ldrh	r3, [r5, #12]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d907      	bls.n	80031ac <_fwalk_sglue+0x38>
 800319c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031a0:	3301      	adds	r3, #1
 80031a2:	d003      	beq.n	80031ac <_fwalk_sglue+0x38>
 80031a4:	4629      	mov	r1, r5
 80031a6:	4638      	mov	r0, r7
 80031a8:	47c0      	blx	r8
 80031aa:	4306      	orrs	r6, r0
 80031ac:	3568      	adds	r5, #104	@ 0x68
 80031ae:	e7e9      	b.n	8003184 <_fwalk_sglue+0x10>

080031b0 <iprintf>:
 80031b0:	b40f      	push	{r0, r1, r2, r3}
 80031b2:	b507      	push	{r0, r1, r2, lr}
 80031b4:	4906      	ldr	r1, [pc, #24]	@ (80031d0 <iprintf+0x20>)
 80031b6:	ab04      	add	r3, sp, #16
 80031b8:	6808      	ldr	r0, [r1, #0]
 80031ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80031be:	6881      	ldr	r1, [r0, #8]
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	f000 fad7 	bl	8003774 <_vfiprintf_r>
 80031c6:	b003      	add	sp, #12
 80031c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80031cc:	b004      	add	sp, #16
 80031ce:	4770      	bx	lr
 80031d0:	2000001c 	.word	0x2000001c

080031d4 <_puts_r>:
 80031d4:	6a03      	ldr	r3, [r0, #32]
 80031d6:	b570      	push	{r4, r5, r6, lr}
 80031d8:	4605      	mov	r5, r0
 80031da:	460e      	mov	r6, r1
 80031dc:	6884      	ldr	r4, [r0, #8]
 80031de:	b90b      	cbnz	r3, 80031e4 <_puts_r+0x10>
 80031e0:	f7ff ffb0 	bl	8003144 <__sinit>
 80031e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80031e6:	07db      	lsls	r3, r3, #31
 80031e8:	d405      	bmi.n	80031f6 <_puts_r+0x22>
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	0598      	lsls	r0, r3, #22
 80031ee:	d402      	bmi.n	80031f6 <_puts_r+0x22>
 80031f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031f2:	f000 f99e 	bl	8003532 <__retarget_lock_acquire_recursive>
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	0719      	lsls	r1, r3, #28
 80031fa:	d502      	bpl.n	8003202 <_puts_r+0x2e>
 80031fc:	6923      	ldr	r3, [r4, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d135      	bne.n	800326e <_puts_r+0x9a>
 8003202:	4621      	mov	r1, r4
 8003204:	4628      	mov	r0, r5
 8003206:	f000 f8c5 	bl	8003394 <__swsetup_r>
 800320a:	b380      	cbz	r0, 800326e <_puts_r+0x9a>
 800320c:	f04f 35ff 	mov.w	r5, #4294967295
 8003210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003212:	07da      	lsls	r2, r3, #31
 8003214:	d405      	bmi.n	8003222 <_puts_r+0x4e>
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	059b      	lsls	r3, r3, #22
 800321a:	d402      	bmi.n	8003222 <_puts_r+0x4e>
 800321c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800321e:	f000 f989 	bl	8003534 <__retarget_lock_release_recursive>
 8003222:	4628      	mov	r0, r5
 8003224:	bd70      	pop	{r4, r5, r6, pc}
 8003226:	2b00      	cmp	r3, #0
 8003228:	da04      	bge.n	8003234 <_puts_r+0x60>
 800322a:	69a2      	ldr	r2, [r4, #24]
 800322c:	429a      	cmp	r2, r3
 800322e:	dc17      	bgt.n	8003260 <_puts_r+0x8c>
 8003230:	290a      	cmp	r1, #10
 8003232:	d015      	beq.n	8003260 <_puts_r+0x8c>
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	6022      	str	r2, [r4, #0]
 800323a:	7019      	strb	r1, [r3, #0]
 800323c:	68a3      	ldr	r3, [r4, #8]
 800323e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003242:	3b01      	subs	r3, #1
 8003244:	60a3      	str	r3, [r4, #8]
 8003246:	2900      	cmp	r1, #0
 8003248:	d1ed      	bne.n	8003226 <_puts_r+0x52>
 800324a:	2b00      	cmp	r3, #0
 800324c:	da11      	bge.n	8003272 <_puts_r+0x9e>
 800324e:	4622      	mov	r2, r4
 8003250:	210a      	movs	r1, #10
 8003252:	4628      	mov	r0, r5
 8003254:	f000 f85f 	bl	8003316 <__swbuf_r>
 8003258:	3001      	adds	r0, #1
 800325a:	d0d7      	beq.n	800320c <_puts_r+0x38>
 800325c:	250a      	movs	r5, #10
 800325e:	e7d7      	b.n	8003210 <_puts_r+0x3c>
 8003260:	4622      	mov	r2, r4
 8003262:	4628      	mov	r0, r5
 8003264:	f000 f857 	bl	8003316 <__swbuf_r>
 8003268:	3001      	adds	r0, #1
 800326a:	d1e7      	bne.n	800323c <_puts_r+0x68>
 800326c:	e7ce      	b.n	800320c <_puts_r+0x38>
 800326e:	3e01      	subs	r6, #1
 8003270:	e7e4      	b.n	800323c <_puts_r+0x68>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	6022      	str	r2, [r4, #0]
 8003278:	220a      	movs	r2, #10
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e7ee      	b.n	800325c <_puts_r+0x88>
	...

08003280 <puts>:
 8003280:	4b02      	ldr	r3, [pc, #8]	@ (800328c <puts+0xc>)
 8003282:	4601      	mov	r1, r0
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	f7ff bfa5 	b.w	80031d4 <_puts_r>
 800328a:	bf00      	nop
 800328c:	2000001c 	.word	0x2000001c

08003290 <__sread>:
 8003290:	b510      	push	{r4, lr}
 8003292:	460c      	mov	r4, r1
 8003294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003298:	f000 f8fc 	bl	8003494 <_read_r>
 800329c:	2800      	cmp	r0, #0
 800329e:	bfab      	itete	ge
 80032a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80032a2:	89a3      	ldrhlt	r3, [r4, #12]
 80032a4:	181b      	addge	r3, r3, r0
 80032a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80032aa:	bfac      	ite	ge
 80032ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80032ae:	81a3      	strhlt	r3, [r4, #12]
 80032b0:	bd10      	pop	{r4, pc}

080032b2 <__swrite>:
 80032b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b6:	461f      	mov	r7, r3
 80032b8:	898b      	ldrh	r3, [r1, #12]
 80032ba:	4605      	mov	r5, r0
 80032bc:	05db      	lsls	r3, r3, #23
 80032be:	460c      	mov	r4, r1
 80032c0:	4616      	mov	r6, r2
 80032c2:	d505      	bpl.n	80032d0 <__swrite+0x1e>
 80032c4:	2302      	movs	r3, #2
 80032c6:	2200      	movs	r2, #0
 80032c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032cc:	f000 f8d0 	bl	8003470 <_lseek_r>
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	4632      	mov	r2, r6
 80032d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032d8:	81a3      	strh	r3, [r4, #12]
 80032da:	4628      	mov	r0, r5
 80032dc:	463b      	mov	r3, r7
 80032de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032e6:	f000 b8e7 	b.w	80034b8 <_write_r>

080032ea <__sseek>:
 80032ea:	b510      	push	{r4, lr}
 80032ec:	460c      	mov	r4, r1
 80032ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f2:	f000 f8bd 	bl	8003470 <_lseek_r>
 80032f6:	1c43      	adds	r3, r0, #1
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	bf15      	itete	ne
 80032fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003302:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003306:	81a3      	strheq	r3, [r4, #12]
 8003308:	bf18      	it	ne
 800330a:	81a3      	strhne	r3, [r4, #12]
 800330c:	bd10      	pop	{r4, pc}

0800330e <__sclose>:
 800330e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003312:	f000 b89d 	b.w	8003450 <_close_r>

08003316 <__swbuf_r>:
 8003316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003318:	460e      	mov	r6, r1
 800331a:	4614      	mov	r4, r2
 800331c:	4605      	mov	r5, r0
 800331e:	b118      	cbz	r0, 8003328 <__swbuf_r+0x12>
 8003320:	6a03      	ldr	r3, [r0, #32]
 8003322:	b90b      	cbnz	r3, 8003328 <__swbuf_r+0x12>
 8003324:	f7ff ff0e 	bl	8003144 <__sinit>
 8003328:	69a3      	ldr	r3, [r4, #24]
 800332a:	60a3      	str	r3, [r4, #8]
 800332c:	89a3      	ldrh	r3, [r4, #12]
 800332e:	071a      	lsls	r2, r3, #28
 8003330:	d501      	bpl.n	8003336 <__swbuf_r+0x20>
 8003332:	6923      	ldr	r3, [r4, #16]
 8003334:	b943      	cbnz	r3, 8003348 <__swbuf_r+0x32>
 8003336:	4621      	mov	r1, r4
 8003338:	4628      	mov	r0, r5
 800333a:	f000 f82b 	bl	8003394 <__swsetup_r>
 800333e:	b118      	cbz	r0, 8003348 <__swbuf_r+0x32>
 8003340:	f04f 37ff 	mov.w	r7, #4294967295
 8003344:	4638      	mov	r0, r7
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	6922      	ldr	r2, [r4, #16]
 800334c:	b2f6      	uxtb	r6, r6
 800334e:	1a98      	subs	r0, r3, r2
 8003350:	6963      	ldr	r3, [r4, #20]
 8003352:	4637      	mov	r7, r6
 8003354:	4283      	cmp	r3, r0
 8003356:	dc05      	bgt.n	8003364 <__swbuf_r+0x4e>
 8003358:	4621      	mov	r1, r4
 800335a:	4628      	mov	r0, r5
 800335c:	f000 fd32 	bl	8003dc4 <_fflush_r>
 8003360:	2800      	cmp	r0, #0
 8003362:	d1ed      	bne.n	8003340 <__swbuf_r+0x2a>
 8003364:	68a3      	ldr	r3, [r4, #8]
 8003366:	3b01      	subs	r3, #1
 8003368:	60a3      	str	r3, [r4, #8]
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	6022      	str	r2, [r4, #0]
 8003370:	701e      	strb	r6, [r3, #0]
 8003372:	6962      	ldr	r2, [r4, #20]
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	429a      	cmp	r2, r3
 8003378:	d004      	beq.n	8003384 <__swbuf_r+0x6e>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	07db      	lsls	r3, r3, #31
 800337e:	d5e1      	bpl.n	8003344 <__swbuf_r+0x2e>
 8003380:	2e0a      	cmp	r6, #10
 8003382:	d1df      	bne.n	8003344 <__swbuf_r+0x2e>
 8003384:	4621      	mov	r1, r4
 8003386:	4628      	mov	r0, r5
 8003388:	f000 fd1c 	bl	8003dc4 <_fflush_r>
 800338c:	2800      	cmp	r0, #0
 800338e:	d0d9      	beq.n	8003344 <__swbuf_r+0x2e>
 8003390:	e7d6      	b.n	8003340 <__swbuf_r+0x2a>
	...

08003394 <__swsetup_r>:
 8003394:	b538      	push	{r3, r4, r5, lr}
 8003396:	4b29      	ldr	r3, [pc, #164]	@ (800343c <__swsetup_r+0xa8>)
 8003398:	4605      	mov	r5, r0
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	460c      	mov	r4, r1
 800339e:	b118      	cbz	r0, 80033a8 <__swsetup_r+0x14>
 80033a0:	6a03      	ldr	r3, [r0, #32]
 80033a2:	b90b      	cbnz	r3, 80033a8 <__swsetup_r+0x14>
 80033a4:	f7ff fece 	bl	8003144 <__sinit>
 80033a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ac:	0719      	lsls	r1, r3, #28
 80033ae:	d422      	bmi.n	80033f6 <__swsetup_r+0x62>
 80033b0:	06da      	lsls	r2, r3, #27
 80033b2:	d407      	bmi.n	80033c4 <__swsetup_r+0x30>
 80033b4:	2209      	movs	r2, #9
 80033b6:	602a      	str	r2, [r5, #0]
 80033b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295
 80033c0:	81a3      	strh	r3, [r4, #12]
 80033c2:	e033      	b.n	800342c <__swsetup_r+0x98>
 80033c4:	0758      	lsls	r0, r3, #29
 80033c6:	d512      	bpl.n	80033ee <__swsetup_r+0x5a>
 80033c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033ca:	b141      	cbz	r1, 80033de <__swsetup_r+0x4a>
 80033cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80033d0:	4299      	cmp	r1, r3
 80033d2:	d002      	beq.n	80033da <__swsetup_r+0x46>
 80033d4:	4628      	mov	r0, r5
 80033d6:	f000 f8af 	bl	8003538 <_free_r>
 80033da:	2300      	movs	r3, #0
 80033dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80033e4:	81a3      	strh	r3, [r4, #12]
 80033e6:	2300      	movs	r3, #0
 80033e8:	6063      	str	r3, [r4, #4]
 80033ea:	6923      	ldr	r3, [r4, #16]
 80033ec:	6023      	str	r3, [r4, #0]
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	f043 0308 	orr.w	r3, r3, #8
 80033f4:	81a3      	strh	r3, [r4, #12]
 80033f6:	6923      	ldr	r3, [r4, #16]
 80033f8:	b94b      	cbnz	r3, 800340e <__swsetup_r+0x7a>
 80033fa:	89a3      	ldrh	r3, [r4, #12]
 80033fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003404:	d003      	beq.n	800340e <__swsetup_r+0x7a>
 8003406:	4621      	mov	r1, r4
 8003408:	4628      	mov	r0, r5
 800340a:	f000 fd28 	bl	8003e5e <__smakebuf_r>
 800340e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003412:	f013 0201 	ands.w	r2, r3, #1
 8003416:	d00a      	beq.n	800342e <__swsetup_r+0x9a>
 8003418:	2200      	movs	r2, #0
 800341a:	60a2      	str	r2, [r4, #8]
 800341c:	6962      	ldr	r2, [r4, #20]
 800341e:	4252      	negs	r2, r2
 8003420:	61a2      	str	r2, [r4, #24]
 8003422:	6922      	ldr	r2, [r4, #16]
 8003424:	b942      	cbnz	r2, 8003438 <__swsetup_r+0xa4>
 8003426:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800342a:	d1c5      	bne.n	80033b8 <__swsetup_r+0x24>
 800342c:	bd38      	pop	{r3, r4, r5, pc}
 800342e:	0799      	lsls	r1, r3, #30
 8003430:	bf58      	it	pl
 8003432:	6962      	ldrpl	r2, [r4, #20]
 8003434:	60a2      	str	r2, [r4, #8]
 8003436:	e7f4      	b.n	8003422 <__swsetup_r+0x8e>
 8003438:	2000      	movs	r0, #0
 800343a:	e7f7      	b.n	800342c <__swsetup_r+0x98>
 800343c:	2000001c 	.word	0x2000001c

08003440 <memset>:
 8003440:	4603      	mov	r3, r0
 8003442:	4402      	add	r2, r0
 8003444:	4293      	cmp	r3, r2
 8003446:	d100      	bne.n	800344a <memset+0xa>
 8003448:	4770      	bx	lr
 800344a:	f803 1b01 	strb.w	r1, [r3], #1
 800344e:	e7f9      	b.n	8003444 <memset+0x4>

08003450 <_close_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	2300      	movs	r3, #0
 8003454:	4d05      	ldr	r5, [pc, #20]	@ (800346c <_close_r+0x1c>)
 8003456:	4604      	mov	r4, r0
 8003458:	4608      	mov	r0, r1
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	f7fd fbf9 	bl	8000c52 <_close>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_close_r+0x1a>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	b103      	cbz	r3, 800346a <_close_r+0x1a>
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	200002b0 	.word	0x200002b0

08003470 <_lseek_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	4604      	mov	r4, r0
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	2200      	movs	r2, #0
 800347a:	4d05      	ldr	r5, [pc, #20]	@ (8003490 <_lseek_r+0x20>)
 800347c:	602a      	str	r2, [r5, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	f7fd fc0b 	bl	8000c9a <_lseek>
 8003484:	1c43      	adds	r3, r0, #1
 8003486:	d102      	bne.n	800348e <_lseek_r+0x1e>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	b103      	cbz	r3, 800348e <_lseek_r+0x1e>
 800348c:	6023      	str	r3, [r4, #0]
 800348e:	bd38      	pop	{r3, r4, r5, pc}
 8003490:	200002b0 	.word	0x200002b0

08003494 <_read_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	4604      	mov	r4, r0
 8003498:	4608      	mov	r0, r1
 800349a:	4611      	mov	r1, r2
 800349c:	2200      	movs	r2, #0
 800349e:	4d05      	ldr	r5, [pc, #20]	@ (80034b4 <_read_r+0x20>)
 80034a0:	602a      	str	r2, [r5, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f7fd fb9c 	bl	8000be0 <_read>
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	d102      	bne.n	80034b2 <_read_r+0x1e>
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	b103      	cbz	r3, 80034b2 <_read_r+0x1e>
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
 80034b4:	200002b0 	.word	0x200002b0

080034b8 <_write_r>:
 80034b8:	b538      	push	{r3, r4, r5, lr}
 80034ba:	4604      	mov	r4, r0
 80034bc:	4608      	mov	r0, r1
 80034be:	4611      	mov	r1, r2
 80034c0:	2200      	movs	r2, #0
 80034c2:	4d05      	ldr	r5, [pc, #20]	@ (80034d8 <_write_r+0x20>)
 80034c4:	602a      	str	r2, [r5, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f7fd fba7 	bl	8000c1a <_write>
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	d102      	bne.n	80034d6 <_write_r+0x1e>
 80034d0:	682b      	ldr	r3, [r5, #0]
 80034d2:	b103      	cbz	r3, 80034d6 <_write_r+0x1e>
 80034d4:	6023      	str	r3, [r4, #0]
 80034d6:	bd38      	pop	{r3, r4, r5, pc}
 80034d8:	200002b0 	.word	0x200002b0

080034dc <__errno>:
 80034dc:	4b01      	ldr	r3, [pc, #4]	@ (80034e4 <__errno+0x8>)
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	2000001c 	.word	0x2000001c

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	2600      	movs	r6, #0
 80034ec:	4d0c      	ldr	r5, [pc, #48]	@ (8003520 <__libc_init_array+0x38>)
 80034ee:	4c0d      	ldr	r4, [pc, #52]	@ (8003524 <__libc_init_array+0x3c>)
 80034f0:	1b64      	subs	r4, r4, r5
 80034f2:	10a4      	asrs	r4, r4, #2
 80034f4:	42a6      	cmp	r6, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	f000 fd2e 	bl	8003f58 <_init>
 80034fc:	2600      	movs	r6, #0
 80034fe:	4d0a      	ldr	r5, [pc, #40]	@ (8003528 <__libc_init_array+0x40>)
 8003500:	4c0a      	ldr	r4, [pc, #40]	@ (800352c <__libc_init_array+0x44>)
 8003502:	1b64      	subs	r4, r4, r5
 8003504:	10a4      	asrs	r4, r4, #2
 8003506:	42a6      	cmp	r6, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003510:	4798      	blx	r3
 8003512:	3601      	adds	r6, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	f855 3b04 	ldr.w	r3, [r5], #4
 800351a:	4798      	blx	r3
 800351c:	3601      	adds	r6, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	0800406c 	.word	0x0800406c
 8003524:	0800406c 	.word	0x0800406c
 8003528:	0800406c 	.word	0x0800406c
 800352c:	08004070 	.word	0x08004070

08003530 <__retarget_lock_init_recursive>:
 8003530:	4770      	bx	lr

08003532 <__retarget_lock_acquire_recursive>:
 8003532:	4770      	bx	lr

08003534 <__retarget_lock_release_recursive>:
 8003534:	4770      	bx	lr
	...

08003538 <_free_r>:
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	4605      	mov	r5, r0
 800353c:	2900      	cmp	r1, #0
 800353e:	d040      	beq.n	80035c2 <_free_r+0x8a>
 8003540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003544:	1f0c      	subs	r4, r1, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	bfb8      	it	lt
 800354a:	18e4      	addlt	r4, r4, r3
 800354c:	f000 f8de 	bl	800370c <__malloc_lock>
 8003550:	4a1c      	ldr	r2, [pc, #112]	@ (80035c4 <_free_r+0x8c>)
 8003552:	6813      	ldr	r3, [r2, #0]
 8003554:	b933      	cbnz	r3, 8003564 <_free_r+0x2c>
 8003556:	6063      	str	r3, [r4, #4]
 8003558:	6014      	str	r4, [r2, #0]
 800355a:	4628      	mov	r0, r5
 800355c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003560:	f000 b8da 	b.w	8003718 <__malloc_unlock>
 8003564:	42a3      	cmp	r3, r4
 8003566:	d908      	bls.n	800357a <_free_r+0x42>
 8003568:	6820      	ldr	r0, [r4, #0]
 800356a:	1821      	adds	r1, r4, r0
 800356c:	428b      	cmp	r3, r1
 800356e:	bf01      	itttt	eq
 8003570:	6819      	ldreq	r1, [r3, #0]
 8003572:	685b      	ldreq	r3, [r3, #4]
 8003574:	1809      	addeq	r1, r1, r0
 8003576:	6021      	streq	r1, [r4, #0]
 8003578:	e7ed      	b.n	8003556 <_free_r+0x1e>
 800357a:	461a      	mov	r2, r3
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	b10b      	cbz	r3, 8003584 <_free_r+0x4c>
 8003580:	42a3      	cmp	r3, r4
 8003582:	d9fa      	bls.n	800357a <_free_r+0x42>
 8003584:	6811      	ldr	r1, [r2, #0]
 8003586:	1850      	adds	r0, r2, r1
 8003588:	42a0      	cmp	r0, r4
 800358a:	d10b      	bne.n	80035a4 <_free_r+0x6c>
 800358c:	6820      	ldr	r0, [r4, #0]
 800358e:	4401      	add	r1, r0
 8003590:	1850      	adds	r0, r2, r1
 8003592:	4283      	cmp	r3, r0
 8003594:	6011      	str	r1, [r2, #0]
 8003596:	d1e0      	bne.n	800355a <_free_r+0x22>
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4408      	add	r0, r1
 800359e:	6010      	str	r0, [r2, #0]
 80035a0:	6053      	str	r3, [r2, #4]
 80035a2:	e7da      	b.n	800355a <_free_r+0x22>
 80035a4:	d902      	bls.n	80035ac <_free_r+0x74>
 80035a6:	230c      	movs	r3, #12
 80035a8:	602b      	str	r3, [r5, #0]
 80035aa:	e7d6      	b.n	800355a <_free_r+0x22>
 80035ac:	6820      	ldr	r0, [r4, #0]
 80035ae:	1821      	adds	r1, r4, r0
 80035b0:	428b      	cmp	r3, r1
 80035b2:	bf01      	itttt	eq
 80035b4:	6819      	ldreq	r1, [r3, #0]
 80035b6:	685b      	ldreq	r3, [r3, #4]
 80035b8:	1809      	addeq	r1, r1, r0
 80035ba:	6021      	streq	r1, [r4, #0]
 80035bc:	6063      	str	r3, [r4, #4]
 80035be:	6054      	str	r4, [r2, #4]
 80035c0:	e7cb      	b.n	800355a <_free_r+0x22>
 80035c2:	bd38      	pop	{r3, r4, r5, pc}
 80035c4:	200002bc 	.word	0x200002bc

080035c8 <sbrk_aligned>:
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	4e0f      	ldr	r6, [pc, #60]	@ (8003608 <sbrk_aligned+0x40>)
 80035cc:	460c      	mov	r4, r1
 80035ce:	6831      	ldr	r1, [r6, #0]
 80035d0:	4605      	mov	r5, r0
 80035d2:	b911      	cbnz	r1, 80035da <sbrk_aligned+0x12>
 80035d4:	f000 fca2 	bl	8003f1c <_sbrk_r>
 80035d8:	6030      	str	r0, [r6, #0]
 80035da:	4621      	mov	r1, r4
 80035dc:	4628      	mov	r0, r5
 80035de:	f000 fc9d 	bl	8003f1c <_sbrk_r>
 80035e2:	1c43      	adds	r3, r0, #1
 80035e4:	d103      	bne.n	80035ee <sbrk_aligned+0x26>
 80035e6:	f04f 34ff 	mov.w	r4, #4294967295
 80035ea:	4620      	mov	r0, r4
 80035ec:	bd70      	pop	{r4, r5, r6, pc}
 80035ee:	1cc4      	adds	r4, r0, #3
 80035f0:	f024 0403 	bic.w	r4, r4, #3
 80035f4:	42a0      	cmp	r0, r4
 80035f6:	d0f8      	beq.n	80035ea <sbrk_aligned+0x22>
 80035f8:	1a21      	subs	r1, r4, r0
 80035fa:	4628      	mov	r0, r5
 80035fc:	f000 fc8e 	bl	8003f1c <_sbrk_r>
 8003600:	3001      	adds	r0, #1
 8003602:	d1f2      	bne.n	80035ea <sbrk_aligned+0x22>
 8003604:	e7ef      	b.n	80035e6 <sbrk_aligned+0x1e>
 8003606:	bf00      	nop
 8003608:	200002b8 	.word	0x200002b8

0800360c <_malloc_r>:
 800360c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003610:	1ccd      	adds	r5, r1, #3
 8003612:	f025 0503 	bic.w	r5, r5, #3
 8003616:	3508      	adds	r5, #8
 8003618:	2d0c      	cmp	r5, #12
 800361a:	bf38      	it	cc
 800361c:	250c      	movcc	r5, #12
 800361e:	2d00      	cmp	r5, #0
 8003620:	4606      	mov	r6, r0
 8003622:	db01      	blt.n	8003628 <_malloc_r+0x1c>
 8003624:	42a9      	cmp	r1, r5
 8003626:	d904      	bls.n	8003632 <_malloc_r+0x26>
 8003628:	230c      	movs	r3, #12
 800362a:	6033      	str	r3, [r6, #0]
 800362c:	2000      	movs	r0, #0
 800362e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003632:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003708 <_malloc_r+0xfc>
 8003636:	f000 f869 	bl	800370c <__malloc_lock>
 800363a:	f8d8 3000 	ldr.w	r3, [r8]
 800363e:	461c      	mov	r4, r3
 8003640:	bb44      	cbnz	r4, 8003694 <_malloc_r+0x88>
 8003642:	4629      	mov	r1, r5
 8003644:	4630      	mov	r0, r6
 8003646:	f7ff ffbf 	bl	80035c8 <sbrk_aligned>
 800364a:	1c43      	adds	r3, r0, #1
 800364c:	4604      	mov	r4, r0
 800364e:	d158      	bne.n	8003702 <_malloc_r+0xf6>
 8003650:	f8d8 4000 	ldr.w	r4, [r8]
 8003654:	4627      	mov	r7, r4
 8003656:	2f00      	cmp	r7, #0
 8003658:	d143      	bne.n	80036e2 <_malloc_r+0xd6>
 800365a:	2c00      	cmp	r4, #0
 800365c:	d04b      	beq.n	80036f6 <_malloc_r+0xea>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	4639      	mov	r1, r7
 8003662:	4630      	mov	r0, r6
 8003664:	eb04 0903 	add.w	r9, r4, r3
 8003668:	f000 fc58 	bl	8003f1c <_sbrk_r>
 800366c:	4581      	cmp	r9, r0
 800366e:	d142      	bne.n	80036f6 <_malloc_r+0xea>
 8003670:	6821      	ldr	r1, [r4, #0]
 8003672:	4630      	mov	r0, r6
 8003674:	1a6d      	subs	r5, r5, r1
 8003676:	4629      	mov	r1, r5
 8003678:	f7ff ffa6 	bl	80035c8 <sbrk_aligned>
 800367c:	3001      	adds	r0, #1
 800367e:	d03a      	beq.n	80036f6 <_malloc_r+0xea>
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	442b      	add	r3, r5
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	f8d8 3000 	ldr.w	r3, [r8]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	bb62      	cbnz	r2, 80036e8 <_malloc_r+0xdc>
 800368e:	f8c8 7000 	str.w	r7, [r8]
 8003692:	e00f      	b.n	80036b4 <_malloc_r+0xa8>
 8003694:	6822      	ldr	r2, [r4, #0]
 8003696:	1b52      	subs	r2, r2, r5
 8003698:	d420      	bmi.n	80036dc <_malloc_r+0xd0>
 800369a:	2a0b      	cmp	r2, #11
 800369c:	d917      	bls.n	80036ce <_malloc_r+0xc2>
 800369e:	1961      	adds	r1, r4, r5
 80036a0:	42a3      	cmp	r3, r4
 80036a2:	6025      	str	r5, [r4, #0]
 80036a4:	bf18      	it	ne
 80036a6:	6059      	strne	r1, [r3, #4]
 80036a8:	6863      	ldr	r3, [r4, #4]
 80036aa:	bf08      	it	eq
 80036ac:	f8c8 1000 	streq.w	r1, [r8]
 80036b0:	5162      	str	r2, [r4, r5]
 80036b2:	604b      	str	r3, [r1, #4]
 80036b4:	4630      	mov	r0, r6
 80036b6:	f000 f82f 	bl	8003718 <__malloc_unlock>
 80036ba:	f104 000b 	add.w	r0, r4, #11
 80036be:	1d23      	adds	r3, r4, #4
 80036c0:	f020 0007 	bic.w	r0, r0, #7
 80036c4:	1ac2      	subs	r2, r0, r3
 80036c6:	bf1c      	itt	ne
 80036c8:	1a1b      	subne	r3, r3, r0
 80036ca:	50a3      	strne	r3, [r4, r2]
 80036cc:	e7af      	b.n	800362e <_malloc_r+0x22>
 80036ce:	6862      	ldr	r2, [r4, #4]
 80036d0:	42a3      	cmp	r3, r4
 80036d2:	bf0c      	ite	eq
 80036d4:	f8c8 2000 	streq.w	r2, [r8]
 80036d8:	605a      	strne	r2, [r3, #4]
 80036da:	e7eb      	b.n	80036b4 <_malloc_r+0xa8>
 80036dc:	4623      	mov	r3, r4
 80036de:	6864      	ldr	r4, [r4, #4]
 80036e0:	e7ae      	b.n	8003640 <_malloc_r+0x34>
 80036e2:	463c      	mov	r4, r7
 80036e4:	687f      	ldr	r7, [r7, #4]
 80036e6:	e7b6      	b.n	8003656 <_malloc_r+0x4a>
 80036e8:	461a      	mov	r2, r3
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	42a3      	cmp	r3, r4
 80036ee:	d1fb      	bne.n	80036e8 <_malloc_r+0xdc>
 80036f0:	2300      	movs	r3, #0
 80036f2:	6053      	str	r3, [r2, #4]
 80036f4:	e7de      	b.n	80036b4 <_malloc_r+0xa8>
 80036f6:	230c      	movs	r3, #12
 80036f8:	4630      	mov	r0, r6
 80036fa:	6033      	str	r3, [r6, #0]
 80036fc:	f000 f80c 	bl	8003718 <__malloc_unlock>
 8003700:	e794      	b.n	800362c <_malloc_r+0x20>
 8003702:	6005      	str	r5, [r0, #0]
 8003704:	e7d6      	b.n	80036b4 <_malloc_r+0xa8>
 8003706:	bf00      	nop
 8003708:	200002bc 	.word	0x200002bc

0800370c <__malloc_lock>:
 800370c:	4801      	ldr	r0, [pc, #4]	@ (8003714 <__malloc_lock+0x8>)
 800370e:	f7ff bf10 	b.w	8003532 <__retarget_lock_acquire_recursive>
 8003712:	bf00      	nop
 8003714:	200002b4 	.word	0x200002b4

08003718 <__malloc_unlock>:
 8003718:	4801      	ldr	r0, [pc, #4]	@ (8003720 <__malloc_unlock+0x8>)
 800371a:	f7ff bf0b 	b.w	8003534 <__retarget_lock_release_recursive>
 800371e:	bf00      	nop
 8003720:	200002b4 	.word	0x200002b4

08003724 <__sfputc_r>:
 8003724:	6893      	ldr	r3, [r2, #8]
 8003726:	b410      	push	{r4}
 8003728:	3b01      	subs	r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	6093      	str	r3, [r2, #8]
 800372e:	da07      	bge.n	8003740 <__sfputc_r+0x1c>
 8003730:	6994      	ldr	r4, [r2, #24]
 8003732:	42a3      	cmp	r3, r4
 8003734:	db01      	blt.n	800373a <__sfputc_r+0x16>
 8003736:	290a      	cmp	r1, #10
 8003738:	d102      	bne.n	8003740 <__sfputc_r+0x1c>
 800373a:	bc10      	pop	{r4}
 800373c:	f7ff bdeb 	b.w	8003316 <__swbuf_r>
 8003740:	6813      	ldr	r3, [r2, #0]
 8003742:	1c58      	adds	r0, r3, #1
 8003744:	6010      	str	r0, [r2, #0]
 8003746:	7019      	strb	r1, [r3, #0]
 8003748:	4608      	mov	r0, r1
 800374a:	bc10      	pop	{r4}
 800374c:	4770      	bx	lr

0800374e <__sfputs_r>:
 800374e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003750:	4606      	mov	r6, r0
 8003752:	460f      	mov	r7, r1
 8003754:	4614      	mov	r4, r2
 8003756:	18d5      	adds	r5, r2, r3
 8003758:	42ac      	cmp	r4, r5
 800375a:	d101      	bne.n	8003760 <__sfputs_r+0x12>
 800375c:	2000      	movs	r0, #0
 800375e:	e007      	b.n	8003770 <__sfputs_r+0x22>
 8003760:	463a      	mov	r2, r7
 8003762:	4630      	mov	r0, r6
 8003764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003768:	f7ff ffdc 	bl	8003724 <__sfputc_r>
 800376c:	1c43      	adds	r3, r0, #1
 800376e:	d1f3      	bne.n	8003758 <__sfputs_r+0xa>
 8003770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003774 <_vfiprintf_r>:
 8003774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003778:	460d      	mov	r5, r1
 800377a:	4614      	mov	r4, r2
 800377c:	4698      	mov	r8, r3
 800377e:	4606      	mov	r6, r0
 8003780:	b09d      	sub	sp, #116	@ 0x74
 8003782:	b118      	cbz	r0, 800378c <_vfiprintf_r+0x18>
 8003784:	6a03      	ldr	r3, [r0, #32]
 8003786:	b90b      	cbnz	r3, 800378c <_vfiprintf_r+0x18>
 8003788:	f7ff fcdc 	bl	8003144 <__sinit>
 800378c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800378e:	07d9      	lsls	r1, r3, #31
 8003790:	d405      	bmi.n	800379e <_vfiprintf_r+0x2a>
 8003792:	89ab      	ldrh	r3, [r5, #12]
 8003794:	059a      	lsls	r2, r3, #22
 8003796:	d402      	bmi.n	800379e <_vfiprintf_r+0x2a>
 8003798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800379a:	f7ff feca 	bl	8003532 <__retarget_lock_acquire_recursive>
 800379e:	89ab      	ldrh	r3, [r5, #12]
 80037a0:	071b      	lsls	r3, r3, #28
 80037a2:	d501      	bpl.n	80037a8 <_vfiprintf_r+0x34>
 80037a4:	692b      	ldr	r3, [r5, #16]
 80037a6:	b99b      	cbnz	r3, 80037d0 <_vfiprintf_r+0x5c>
 80037a8:	4629      	mov	r1, r5
 80037aa:	4630      	mov	r0, r6
 80037ac:	f7ff fdf2 	bl	8003394 <__swsetup_r>
 80037b0:	b170      	cbz	r0, 80037d0 <_vfiprintf_r+0x5c>
 80037b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037b4:	07dc      	lsls	r4, r3, #31
 80037b6:	d504      	bpl.n	80037c2 <_vfiprintf_r+0x4e>
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	b01d      	add	sp, #116	@ 0x74
 80037be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c2:	89ab      	ldrh	r3, [r5, #12]
 80037c4:	0598      	lsls	r0, r3, #22
 80037c6:	d4f7      	bmi.n	80037b8 <_vfiprintf_r+0x44>
 80037c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037ca:	f7ff feb3 	bl	8003534 <__retarget_lock_release_recursive>
 80037ce:	e7f3      	b.n	80037b8 <_vfiprintf_r+0x44>
 80037d0:	2300      	movs	r3, #0
 80037d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80037d4:	2320      	movs	r3, #32
 80037d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80037da:	2330      	movs	r3, #48	@ 0x30
 80037dc:	f04f 0901 	mov.w	r9, #1
 80037e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80037e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003990 <_vfiprintf_r+0x21c>
 80037e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80037ec:	4623      	mov	r3, r4
 80037ee:	469a      	mov	sl, r3
 80037f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037f4:	b10a      	cbz	r2, 80037fa <_vfiprintf_r+0x86>
 80037f6:	2a25      	cmp	r2, #37	@ 0x25
 80037f8:	d1f9      	bne.n	80037ee <_vfiprintf_r+0x7a>
 80037fa:	ebba 0b04 	subs.w	fp, sl, r4
 80037fe:	d00b      	beq.n	8003818 <_vfiprintf_r+0xa4>
 8003800:	465b      	mov	r3, fp
 8003802:	4622      	mov	r2, r4
 8003804:	4629      	mov	r1, r5
 8003806:	4630      	mov	r0, r6
 8003808:	f7ff ffa1 	bl	800374e <__sfputs_r>
 800380c:	3001      	adds	r0, #1
 800380e:	f000 80a7 	beq.w	8003960 <_vfiprintf_r+0x1ec>
 8003812:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003814:	445a      	add	r2, fp
 8003816:	9209      	str	r2, [sp, #36]	@ 0x24
 8003818:	f89a 3000 	ldrb.w	r3, [sl]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 809f 	beq.w	8003960 <_vfiprintf_r+0x1ec>
 8003822:	2300      	movs	r3, #0
 8003824:	f04f 32ff 	mov.w	r2, #4294967295
 8003828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800382c:	f10a 0a01 	add.w	sl, sl, #1
 8003830:	9304      	str	r3, [sp, #16]
 8003832:	9307      	str	r3, [sp, #28]
 8003834:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003838:	931a      	str	r3, [sp, #104]	@ 0x68
 800383a:	4654      	mov	r4, sl
 800383c:	2205      	movs	r2, #5
 800383e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003842:	4853      	ldr	r0, [pc, #332]	@ (8003990 <_vfiprintf_r+0x21c>)
 8003844:	f000 fb7a 	bl	8003f3c <memchr>
 8003848:	9a04      	ldr	r2, [sp, #16]
 800384a:	b9d8      	cbnz	r0, 8003884 <_vfiprintf_r+0x110>
 800384c:	06d1      	lsls	r1, r2, #27
 800384e:	bf44      	itt	mi
 8003850:	2320      	movmi	r3, #32
 8003852:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003856:	0713      	lsls	r3, r2, #28
 8003858:	bf44      	itt	mi
 800385a:	232b      	movmi	r3, #43	@ 0x2b
 800385c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003860:	f89a 3000 	ldrb.w	r3, [sl]
 8003864:	2b2a      	cmp	r3, #42	@ 0x2a
 8003866:	d015      	beq.n	8003894 <_vfiprintf_r+0x120>
 8003868:	4654      	mov	r4, sl
 800386a:	2000      	movs	r0, #0
 800386c:	f04f 0c0a 	mov.w	ip, #10
 8003870:	9a07      	ldr	r2, [sp, #28]
 8003872:	4621      	mov	r1, r4
 8003874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003878:	3b30      	subs	r3, #48	@ 0x30
 800387a:	2b09      	cmp	r3, #9
 800387c:	d94b      	bls.n	8003916 <_vfiprintf_r+0x1a2>
 800387e:	b1b0      	cbz	r0, 80038ae <_vfiprintf_r+0x13a>
 8003880:	9207      	str	r2, [sp, #28]
 8003882:	e014      	b.n	80038ae <_vfiprintf_r+0x13a>
 8003884:	eba0 0308 	sub.w	r3, r0, r8
 8003888:	fa09 f303 	lsl.w	r3, r9, r3
 800388c:	4313      	orrs	r3, r2
 800388e:	46a2      	mov	sl, r4
 8003890:	9304      	str	r3, [sp, #16]
 8003892:	e7d2      	b.n	800383a <_vfiprintf_r+0xc6>
 8003894:	9b03      	ldr	r3, [sp, #12]
 8003896:	1d19      	adds	r1, r3, #4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	9103      	str	r1, [sp, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	bfbb      	ittet	lt
 80038a0:	425b      	neglt	r3, r3
 80038a2:	f042 0202 	orrlt.w	r2, r2, #2
 80038a6:	9307      	strge	r3, [sp, #28]
 80038a8:	9307      	strlt	r3, [sp, #28]
 80038aa:	bfb8      	it	lt
 80038ac:	9204      	strlt	r2, [sp, #16]
 80038ae:	7823      	ldrb	r3, [r4, #0]
 80038b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80038b2:	d10a      	bne.n	80038ca <_vfiprintf_r+0x156>
 80038b4:	7863      	ldrb	r3, [r4, #1]
 80038b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80038b8:	d132      	bne.n	8003920 <_vfiprintf_r+0x1ac>
 80038ba:	9b03      	ldr	r3, [sp, #12]
 80038bc:	3402      	adds	r4, #2
 80038be:	1d1a      	adds	r2, r3, #4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	9203      	str	r2, [sp, #12]
 80038c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038c8:	9305      	str	r3, [sp, #20]
 80038ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003994 <_vfiprintf_r+0x220>
 80038ce:	2203      	movs	r2, #3
 80038d0:	4650      	mov	r0, sl
 80038d2:	7821      	ldrb	r1, [r4, #0]
 80038d4:	f000 fb32 	bl	8003f3c <memchr>
 80038d8:	b138      	cbz	r0, 80038ea <_vfiprintf_r+0x176>
 80038da:	2240      	movs	r2, #64	@ 0x40
 80038dc:	9b04      	ldr	r3, [sp, #16]
 80038de:	eba0 000a 	sub.w	r0, r0, sl
 80038e2:	4082      	lsls	r2, r0
 80038e4:	4313      	orrs	r3, r2
 80038e6:	3401      	adds	r4, #1
 80038e8:	9304      	str	r3, [sp, #16]
 80038ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ee:	2206      	movs	r2, #6
 80038f0:	4829      	ldr	r0, [pc, #164]	@ (8003998 <_vfiprintf_r+0x224>)
 80038f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038f6:	f000 fb21 	bl	8003f3c <memchr>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d03f      	beq.n	800397e <_vfiprintf_r+0x20a>
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <_vfiprintf_r+0x228>)
 8003900:	bb1b      	cbnz	r3, 800394a <_vfiprintf_r+0x1d6>
 8003902:	9b03      	ldr	r3, [sp, #12]
 8003904:	3307      	adds	r3, #7
 8003906:	f023 0307 	bic.w	r3, r3, #7
 800390a:	3308      	adds	r3, #8
 800390c:	9303      	str	r3, [sp, #12]
 800390e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003910:	443b      	add	r3, r7
 8003912:	9309      	str	r3, [sp, #36]	@ 0x24
 8003914:	e76a      	b.n	80037ec <_vfiprintf_r+0x78>
 8003916:	460c      	mov	r4, r1
 8003918:	2001      	movs	r0, #1
 800391a:	fb0c 3202 	mla	r2, ip, r2, r3
 800391e:	e7a8      	b.n	8003872 <_vfiprintf_r+0xfe>
 8003920:	2300      	movs	r3, #0
 8003922:	f04f 0c0a 	mov.w	ip, #10
 8003926:	4619      	mov	r1, r3
 8003928:	3401      	adds	r4, #1
 800392a:	9305      	str	r3, [sp, #20]
 800392c:	4620      	mov	r0, r4
 800392e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003932:	3a30      	subs	r2, #48	@ 0x30
 8003934:	2a09      	cmp	r2, #9
 8003936:	d903      	bls.n	8003940 <_vfiprintf_r+0x1cc>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0c6      	beq.n	80038ca <_vfiprintf_r+0x156>
 800393c:	9105      	str	r1, [sp, #20]
 800393e:	e7c4      	b.n	80038ca <_vfiprintf_r+0x156>
 8003940:	4604      	mov	r4, r0
 8003942:	2301      	movs	r3, #1
 8003944:	fb0c 2101 	mla	r1, ip, r1, r2
 8003948:	e7f0      	b.n	800392c <_vfiprintf_r+0x1b8>
 800394a:	ab03      	add	r3, sp, #12
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	462a      	mov	r2, r5
 8003950:	4630      	mov	r0, r6
 8003952:	4b13      	ldr	r3, [pc, #76]	@ (80039a0 <_vfiprintf_r+0x22c>)
 8003954:	a904      	add	r1, sp, #16
 8003956:	f3af 8000 	nop.w
 800395a:	4607      	mov	r7, r0
 800395c:	1c78      	adds	r0, r7, #1
 800395e:	d1d6      	bne.n	800390e <_vfiprintf_r+0x19a>
 8003960:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003962:	07d9      	lsls	r1, r3, #31
 8003964:	d405      	bmi.n	8003972 <_vfiprintf_r+0x1fe>
 8003966:	89ab      	ldrh	r3, [r5, #12]
 8003968:	059a      	lsls	r2, r3, #22
 800396a:	d402      	bmi.n	8003972 <_vfiprintf_r+0x1fe>
 800396c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800396e:	f7ff fde1 	bl	8003534 <__retarget_lock_release_recursive>
 8003972:	89ab      	ldrh	r3, [r5, #12]
 8003974:	065b      	lsls	r3, r3, #25
 8003976:	f53f af1f 	bmi.w	80037b8 <_vfiprintf_r+0x44>
 800397a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800397c:	e71e      	b.n	80037bc <_vfiprintf_r+0x48>
 800397e:	ab03      	add	r3, sp, #12
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	462a      	mov	r2, r5
 8003984:	4630      	mov	r0, r6
 8003986:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <_vfiprintf_r+0x22c>)
 8003988:	a904      	add	r1, sp, #16
 800398a:	f000 f87d 	bl	8003a88 <_printf_i>
 800398e:	e7e4      	b.n	800395a <_vfiprintf_r+0x1e6>
 8003990:	08004036 	.word	0x08004036
 8003994:	0800403c 	.word	0x0800403c
 8003998:	08004040 	.word	0x08004040
 800399c:	00000000 	.word	0x00000000
 80039a0:	0800374f 	.word	0x0800374f

080039a4 <_printf_common>:
 80039a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a8:	4616      	mov	r6, r2
 80039aa:	4698      	mov	r8, r3
 80039ac:	688a      	ldr	r2, [r1, #8]
 80039ae:	690b      	ldr	r3, [r1, #16]
 80039b0:	4607      	mov	r7, r0
 80039b2:	4293      	cmp	r3, r2
 80039b4:	bfb8      	it	lt
 80039b6:	4613      	movlt	r3, r2
 80039b8:	6033      	str	r3, [r6, #0]
 80039ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039be:	460c      	mov	r4, r1
 80039c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039c4:	b10a      	cbz	r2, 80039ca <_printf_common+0x26>
 80039c6:	3301      	adds	r3, #1
 80039c8:	6033      	str	r3, [r6, #0]
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	0699      	lsls	r1, r3, #26
 80039ce:	bf42      	ittt	mi
 80039d0:	6833      	ldrmi	r3, [r6, #0]
 80039d2:	3302      	addmi	r3, #2
 80039d4:	6033      	strmi	r3, [r6, #0]
 80039d6:	6825      	ldr	r5, [r4, #0]
 80039d8:	f015 0506 	ands.w	r5, r5, #6
 80039dc:	d106      	bne.n	80039ec <_printf_common+0x48>
 80039de:	f104 0a19 	add.w	sl, r4, #25
 80039e2:	68e3      	ldr	r3, [r4, #12]
 80039e4:	6832      	ldr	r2, [r6, #0]
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	42ab      	cmp	r3, r5
 80039ea:	dc2b      	bgt.n	8003a44 <_printf_common+0xa0>
 80039ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80039f0:	6822      	ldr	r2, [r4, #0]
 80039f2:	3b00      	subs	r3, #0
 80039f4:	bf18      	it	ne
 80039f6:	2301      	movne	r3, #1
 80039f8:	0692      	lsls	r2, r2, #26
 80039fa:	d430      	bmi.n	8003a5e <_printf_common+0xba>
 80039fc:	4641      	mov	r1, r8
 80039fe:	4638      	mov	r0, r7
 8003a00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a04:	47c8      	blx	r9
 8003a06:	3001      	adds	r0, #1
 8003a08:	d023      	beq.n	8003a52 <_printf_common+0xae>
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	6922      	ldr	r2, [r4, #16]
 8003a0e:	f003 0306 	and.w	r3, r3, #6
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	bf14      	ite	ne
 8003a16:	2500      	movne	r5, #0
 8003a18:	6833      	ldreq	r3, [r6, #0]
 8003a1a:	f04f 0600 	mov.w	r6, #0
 8003a1e:	bf08      	it	eq
 8003a20:	68e5      	ldreq	r5, [r4, #12]
 8003a22:	f104 041a 	add.w	r4, r4, #26
 8003a26:	bf08      	it	eq
 8003a28:	1aed      	subeq	r5, r5, r3
 8003a2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003a2e:	bf08      	it	eq
 8003a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a34:	4293      	cmp	r3, r2
 8003a36:	bfc4      	itt	gt
 8003a38:	1a9b      	subgt	r3, r3, r2
 8003a3a:	18ed      	addgt	r5, r5, r3
 8003a3c:	42b5      	cmp	r5, r6
 8003a3e:	d11a      	bne.n	8003a76 <_printf_common+0xd2>
 8003a40:	2000      	movs	r0, #0
 8003a42:	e008      	b.n	8003a56 <_printf_common+0xb2>
 8003a44:	2301      	movs	r3, #1
 8003a46:	4652      	mov	r2, sl
 8003a48:	4641      	mov	r1, r8
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	47c8      	blx	r9
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d103      	bne.n	8003a5a <_printf_common+0xb6>
 8003a52:	f04f 30ff 	mov.w	r0, #4294967295
 8003a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a5a:	3501      	adds	r5, #1
 8003a5c:	e7c1      	b.n	80039e2 <_printf_common+0x3e>
 8003a5e:	2030      	movs	r0, #48	@ 0x30
 8003a60:	18e1      	adds	r1, r4, r3
 8003a62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a6c:	4422      	add	r2, r4
 8003a6e:	3302      	adds	r3, #2
 8003a70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a74:	e7c2      	b.n	80039fc <_printf_common+0x58>
 8003a76:	2301      	movs	r3, #1
 8003a78:	4622      	mov	r2, r4
 8003a7a:	4641      	mov	r1, r8
 8003a7c:	4638      	mov	r0, r7
 8003a7e:	47c8      	blx	r9
 8003a80:	3001      	adds	r0, #1
 8003a82:	d0e6      	beq.n	8003a52 <_printf_common+0xae>
 8003a84:	3601      	adds	r6, #1
 8003a86:	e7d9      	b.n	8003a3c <_printf_common+0x98>

08003a88 <_printf_i>:
 8003a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a8c:	7e0f      	ldrb	r7, [r1, #24]
 8003a8e:	4691      	mov	r9, r2
 8003a90:	2f78      	cmp	r7, #120	@ 0x78
 8003a92:	4680      	mov	r8, r0
 8003a94:	460c      	mov	r4, r1
 8003a96:	469a      	mov	sl, r3
 8003a98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a9e:	d807      	bhi.n	8003ab0 <_printf_i+0x28>
 8003aa0:	2f62      	cmp	r7, #98	@ 0x62
 8003aa2:	d80a      	bhi.n	8003aba <_printf_i+0x32>
 8003aa4:	2f00      	cmp	r7, #0
 8003aa6:	f000 80d1 	beq.w	8003c4c <_printf_i+0x1c4>
 8003aaa:	2f58      	cmp	r7, #88	@ 0x58
 8003aac:	f000 80b8 	beq.w	8003c20 <_printf_i+0x198>
 8003ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ab8:	e03a      	b.n	8003b30 <_printf_i+0xa8>
 8003aba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003abe:	2b15      	cmp	r3, #21
 8003ac0:	d8f6      	bhi.n	8003ab0 <_printf_i+0x28>
 8003ac2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ac8 <_printf_i+0x40>)
 8003ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ac8:	08003b21 	.word	0x08003b21
 8003acc:	08003b35 	.word	0x08003b35
 8003ad0:	08003ab1 	.word	0x08003ab1
 8003ad4:	08003ab1 	.word	0x08003ab1
 8003ad8:	08003ab1 	.word	0x08003ab1
 8003adc:	08003ab1 	.word	0x08003ab1
 8003ae0:	08003b35 	.word	0x08003b35
 8003ae4:	08003ab1 	.word	0x08003ab1
 8003ae8:	08003ab1 	.word	0x08003ab1
 8003aec:	08003ab1 	.word	0x08003ab1
 8003af0:	08003ab1 	.word	0x08003ab1
 8003af4:	08003c33 	.word	0x08003c33
 8003af8:	08003b5f 	.word	0x08003b5f
 8003afc:	08003bed 	.word	0x08003bed
 8003b00:	08003ab1 	.word	0x08003ab1
 8003b04:	08003ab1 	.word	0x08003ab1
 8003b08:	08003c55 	.word	0x08003c55
 8003b0c:	08003ab1 	.word	0x08003ab1
 8003b10:	08003b5f 	.word	0x08003b5f
 8003b14:	08003ab1 	.word	0x08003ab1
 8003b18:	08003ab1 	.word	0x08003ab1
 8003b1c:	08003bf5 	.word	0x08003bf5
 8003b20:	6833      	ldr	r3, [r6, #0]
 8003b22:	1d1a      	adds	r2, r3, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6032      	str	r2, [r6, #0]
 8003b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b30:	2301      	movs	r3, #1
 8003b32:	e09c      	b.n	8003c6e <_printf_i+0x1e6>
 8003b34:	6833      	ldr	r3, [r6, #0]
 8003b36:	6820      	ldr	r0, [r4, #0]
 8003b38:	1d19      	adds	r1, r3, #4
 8003b3a:	6031      	str	r1, [r6, #0]
 8003b3c:	0606      	lsls	r6, r0, #24
 8003b3e:	d501      	bpl.n	8003b44 <_printf_i+0xbc>
 8003b40:	681d      	ldr	r5, [r3, #0]
 8003b42:	e003      	b.n	8003b4c <_printf_i+0xc4>
 8003b44:	0645      	lsls	r5, r0, #25
 8003b46:	d5fb      	bpl.n	8003b40 <_printf_i+0xb8>
 8003b48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b4c:	2d00      	cmp	r5, #0
 8003b4e:	da03      	bge.n	8003b58 <_printf_i+0xd0>
 8003b50:	232d      	movs	r3, #45	@ 0x2d
 8003b52:	426d      	negs	r5, r5
 8003b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b58:	230a      	movs	r3, #10
 8003b5a:	4858      	ldr	r0, [pc, #352]	@ (8003cbc <_printf_i+0x234>)
 8003b5c:	e011      	b.n	8003b82 <_printf_i+0xfa>
 8003b5e:	6821      	ldr	r1, [r4, #0]
 8003b60:	6833      	ldr	r3, [r6, #0]
 8003b62:	0608      	lsls	r0, r1, #24
 8003b64:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b68:	d402      	bmi.n	8003b70 <_printf_i+0xe8>
 8003b6a:	0649      	lsls	r1, r1, #25
 8003b6c:	bf48      	it	mi
 8003b6e:	b2ad      	uxthmi	r5, r5
 8003b70:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b72:	6033      	str	r3, [r6, #0]
 8003b74:	bf14      	ite	ne
 8003b76:	230a      	movne	r3, #10
 8003b78:	2308      	moveq	r3, #8
 8003b7a:	4850      	ldr	r0, [pc, #320]	@ (8003cbc <_printf_i+0x234>)
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b82:	6866      	ldr	r6, [r4, #4]
 8003b84:	2e00      	cmp	r6, #0
 8003b86:	60a6      	str	r6, [r4, #8]
 8003b88:	db05      	blt.n	8003b96 <_printf_i+0x10e>
 8003b8a:	6821      	ldr	r1, [r4, #0]
 8003b8c:	432e      	orrs	r6, r5
 8003b8e:	f021 0104 	bic.w	r1, r1, #4
 8003b92:	6021      	str	r1, [r4, #0]
 8003b94:	d04b      	beq.n	8003c2e <_printf_i+0x1a6>
 8003b96:	4616      	mov	r6, r2
 8003b98:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b9c:	fb03 5711 	mls	r7, r3, r1, r5
 8003ba0:	5dc7      	ldrb	r7, [r0, r7]
 8003ba2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ba6:	462f      	mov	r7, r5
 8003ba8:	42bb      	cmp	r3, r7
 8003baa:	460d      	mov	r5, r1
 8003bac:	d9f4      	bls.n	8003b98 <_printf_i+0x110>
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d10b      	bne.n	8003bca <_printf_i+0x142>
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	07df      	lsls	r7, r3, #31
 8003bb6:	d508      	bpl.n	8003bca <_printf_i+0x142>
 8003bb8:	6923      	ldr	r3, [r4, #16]
 8003bba:	6861      	ldr	r1, [r4, #4]
 8003bbc:	4299      	cmp	r1, r3
 8003bbe:	bfde      	ittt	le
 8003bc0:	2330      	movle	r3, #48	@ 0x30
 8003bc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bca:	1b92      	subs	r2, r2, r6
 8003bcc:	6122      	str	r2, [r4, #16]
 8003bce:	464b      	mov	r3, r9
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	f8cd a000 	str.w	sl, [sp]
 8003bd8:	aa03      	add	r2, sp, #12
 8003bda:	f7ff fee3 	bl	80039a4 <_printf_common>
 8003bde:	3001      	adds	r0, #1
 8003be0:	d14a      	bne.n	8003c78 <_printf_i+0x1f0>
 8003be2:	f04f 30ff 	mov.w	r0, #4294967295
 8003be6:	b004      	add	sp, #16
 8003be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	f043 0320 	orr.w	r3, r3, #32
 8003bf2:	6023      	str	r3, [r4, #0]
 8003bf4:	2778      	movs	r7, #120	@ 0x78
 8003bf6:	4832      	ldr	r0, [pc, #200]	@ (8003cc0 <_printf_i+0x238>)
 8003bf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	6831      	ldr	r1, [r6, #0]
 8003c00:	061f      	lsls	r7, r3, #24
 8003c02:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c06:	d402      	bmi.n	8003c0e <_printf_i+0x186>
 8003c08:	065f      	lsls	r7, r3, #25
 8003c0a:	bf48      	it	mi
 8003c0c:	b2ad      	uxthmi	r5, r5
 8003c0e:	6031      	str	r1, [r6, #0]
 8003c10:	07d9      	lsls	r1, r3, #31
 8003c12:	bf44      	itt	mi
 8003c14:	f043 0320 	orrmi.w	r3, r3, #32
 8003c18:	6023      	strmi	r3, [r4, #0]
 8003c1a:	b11d      	cbz	r5, 8003c24 <_printf_i+0x19c>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	e7ad      	b.n	8003b7c <_printf_i+0xf4>
 8003c20:	4826      	ldr	r0, [pc, #152]	@ (8003cbc <_printf_i+0x234>)
 8003c22:	e7e9      	b.n	8003bf8 <_printf_i+0x170>
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	f023 0320 	bic.w	r3, r3, #32
 8003c2a:	6023      	str	r3, [r4, #0]
 8003c2c:	e7f6      	b.n	8003c1c <_printf_i+0x194>
 8003c2e:	4616      	mov	r6, r2
 8003c30:	e7bd      	b.n	8003bae <_printf_i+0x126>
 8003c32:	6833      	ldr	r3, [r6, #0]
 8003c34:	6825      	ldr	r5, [r4, #0]
 8003c36:	1d18      	adds	r0, r3, #4
 8003c38:	6961      	ldr	r1, [r4, #20]
 8003c3a:	6030      	str	r0, [r6, #0]
 8003c3c:	062e      	lsls	r6, r5, #24
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	d501      	bpl.n	8003c46 <_printf_i+0x1be>
 8003c42:	6019      	str	r1, [r3, #0]
 8003c44:	e002      	b.n	8003c4c <_printf_i+0x1c4>
 8003c46:	0668      	lsls	r0, r5, #25
 8003c48:	d5fb      	bpl.n	8003c42 <_printf_i+0x1ba>
 8003c4a:	8019      	strh	r1, [r3, #0]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	4616      	mov	r6, r2
 8003c50:	6123      	str	r3, [r4, #16]
 8003c52:	e7bc      	b.n	8003bce <_printf_i+0x146>
 8003c54:	6833      	ldr	r3, [r6, #0]
 8003c56:	2100      	movs	r1, #0
 8003c58:	1d1a      	adds	r2, r3, #4
 8003c5a:	6032      	str	r2, [r6, #0]
 8003c5c:	681e      	ldr	r6, [r3, #0]
 8003c5e:	6862      	ldr	r2, [r4, #4]
 8003c60:	4630      	mov	r0, r6
 8003c62:	f000 f96b 	bl	8003f3c <memchr>
 8003c66:	b108      	cbz	r0, 8003c6c <_printf_i+0x1e4>
 8003c68:	1b80      	subs	r0, r0, r6
 8003c6a:	6060      	str	r0, [r4, #4]
 8003c6c:	6863      	ldr	r3, [r4, #4]
 8003c6e:	6123      	str	r3, [r4, #16]
 8003c70:	2300      	movs	r3, #0
 8003c72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c76:	e7aa      	b.n	8003bce <_printf_i+0x146>
 8003c78:	4632      	mov	r2, r6
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	6923      	ldr	r3, [r4, #16]
 8003c80:	47d0      	blx	sl
 8003c82:	3001      	adds	r0, #1
 8003c84:	d0ad      	beq.n	8003be2 <_printf_i+0x15a>
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	079b      	lsls	r3, r3, #30
 8003c8a:	d413      	bmi.n	8003cb4 <_printf_i+0x22c>
 8003c8c:	68e0      	ldr	r0, [r4, #12]
 8003c8e:	9b03      	ldr	r3, [sp, #12]
 8003c90:	4298      	cmp	r0, r3
 8003c92:	bfb8      	it	lt
 8003c94:	4618      	movlt	r0, r3
 8003c96:	e7a6      	b.n	8003be6 <_printf_i+0x15e>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	4632      	mov	r2, r6
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	47d0      	blx	sl
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d09d      	beq.n	8003be2 <_printf_i+0x15a>
 8003ca6:	3501      	adds	r5, #1
 8003ca8:	68e3      	ldr	r3, [r4, #12]
 8003caa:	9903      	ldr	r1, [sp, #12]
 8003cac:	1a5b      	subs	r3, r3, r1
 8003cae:	42ab      	cmp	r3, r5
 8003cb0:	dcf2      	bgt.n	8003c98 <_printf_i+0x210>
 8003cb2:	e7eb      	b.n	8003c8c <_printf_i+0x204>
 8003cb4:	2500      	movs	r5, #0
 8003cb6:	f104 0619 	add.w	r6, r4, #25
 8003cba:	e7f5      	b.n	8003ca8 <_printf_i+0x220>
 8003cbc:	08004047 	.word	0x08004047
 8003cc0:	08004058 	.word	0x08004058

08003cc4 <__sflush_r>:
 8003cc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	0716      	lsls	r6, r2, #28
 8003ccc:	4605      	mov	r5, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	d454      	bmi.n	8003d7c <__sflush_r+0xb8>
 8003cd2:	684b      	ldr	r3, [r1, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	dc02      	bgt.n	8003cde <__sflush_r+0x1a>
 8003cd8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	dd48      	ble.n	8003d70 <__sflush_r+0xac>
 8003cde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ce0:	2e00      	cmp	r6, #0
 8003ce2:	d045      	beq.n	8003d70 <__sflush_r+0xac>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003cea:	682f      	ldr	r7, [r5, #0]
 8003cec:	6a21      	ldr	r1, [r4, #32]
 8003cee:	602b      	str	r3, [r5, #0]
 8003cf0:	d030      	beq.n	8003d54 <__sflush_r+0x90>
 8003cf2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	0759      	lsls	r1, r3, #29
 8003cf8:	d505      	bpl.n	8003d06 <__sflush_r+0x42>
 8003cfa:	6863      	ldr	r3, [r4, #4]
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d00:	b10b      	cbz	r3, 8003d06 <__sflush_r+0x42>
 8003d02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d04:	1ad2      	subs	r2, r2, r3
 8003d06:	2300      	movs	r3, #0
 8003d08:	4628      	mov	r0, r5
 8003d0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d0c:	6a21      	ldr	r1, [r4, #32]
 8003d0e:	47b0      	blx	r6
 8003d10:	1c43      	adds	r3, r0, #1
 8003d12:	89a3      	ldrh	r3, [r4, #12]
 8003d14:	d106      	bne.n	8003d24 <__sflush_r+0x60>
 8003d16:	6829      	ldr	r1, [r5, #0]
 8003d18:	291d      	cmp	r1, #29
 8003d1a:	d82b      	bhi.n	8003d74 <__sflush_r+0xb0>
 8003d1c:	4a28      	ldr	r2, [pc, #160]	@ (8003dc0 <__sflush_r+0xfc>)
 8003d1e:	40ca      	lsrs	r2, r1
 8003d20:	07d6      	lsls	r6, r2, #31
 8003d22:	d527      	bpl.n	8003d74 <__sflush_r+0xb0>
 8003d24:	2200      	movs	r2, #0
 8003d26:	6062      	str	r2, [r4, #4]
 8003d28:	6922      	ldr	r2, [r4, #16]
 8003d2a:	04d9      	lsls	r1, r3, #19
 8003d2c:	6022      	str	r2, [r4, #0]
 8003d2e:	d504      	bpl.n	8003d3a <__sflush_r+0x76>
 8003d30:	1c42      	adds	r2, r0, #1
 8003d32:	d101      	bne.n	8003d38 <__sflush_r+0x74>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	b903      	cbnz	r3, 8003d3a <__sflush_r+0x76>
 8003d38:	6560      	str	r0, [r4, #84]	@ 0x54
 8003d3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d3c:	602f      	str	r7, [r5, #0]
 8003d3e:	b1b9      	cbz	r1, 8003d70 <__sflush_r+0xac>
 8003d40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d44:	4299      	cmp	r1, r3
 8003d46:	d002      	beq.n	8003d4e <__sflush_r+0x8a>
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f7ff fbf5 	bl	8003538 <_free_r>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d52:	e00d      	b.n	8003d70 <__sflush_r+0xac>
 8003d54:	2301      	movs	r3, #1
 8003d56:	4628      	mov	r0, r5
 8003d58:	47b0      	blx	r6
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	1c50      	adds	r0, r2, #1
 8003d5e:	d1c9      	bne.n	8003cf4 <__sflush_r+0x30>
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0c6      	beq.n	8003cf4 <__sflush_r+0x30>
 8003d66:	2b1d      	cmp	r3, #29
 8003d68:	d001      	beq.n	8003d6e <__sflush_r+0xaa>
 8003d6a:	2b16      	cmp	r3, #22
 8003d6c:	d11d      	bne.n	8003daa <__sflush_r+0xe6>
 8003d6e:	602f      	str	r7, [r5, #0]
 8003d70:	2000      	movs	r0, #0
 8003d72:	e021      	b.n	8003db8 <__sflush_r+0xf4>
 8003d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d78:	b21b      	sxth	r3, r3
 8003d7a:	e01a      	b.n	8003db2 <__sflush_r+0xee>
 8003d7c:	690f      	ldr	r7, [r1, #16]
 8003d7e:	2f00      	cmp	r7, #0
 8003d80:	d0f6      	beq.n	8003d70 <__sflush_r+0xac>
 8003d82:	0793      	lsls	r3, r2, #30
 8003d84:	bf18      	it	ne
 8003d86:	2300      	movne	r3, #0
 8003d88:	680e      	ldr	r6, [r1, #0]
 8003d8a:	bf08      	it	eq
 8003d8c:	694b      	ldreq	r3, [r1, #20]
 8003d8e:	1bf6      	subs	r6, r6, r7
 8003d90:	600f      	str	r7, [r1, #0]
 8003d92:	608b      	str	r3, [r1, #8]
 8003d94:	2e00      	cmp	r6, #0
 8003d96:	ddeb      	ble.n	8003d70 <__sflush_r+0xac>
 8003d98:	4633      	mov	r3, r6
 8003d9a:	463a      	mov	r2, r7
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	6a21      	ldr	r1, [r4, #32]
 8003da0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003da4:	47e0      	blx	ip
 8003da6:	2800      	cmp	r0, #0
 8003da8:	dc07      	bgt.n	8003dba <__sflush_r+0xf6>
 8003daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003db2:	f04f 30ff 	mov.w	r0, #4294967295
 8003db6:	81a3      	strh	r3, [r4, #12]
 8003db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dba:	4407      	add	r7, r0
 8003dbc:	1a36      	subs	r6, r6, r0
 8003dbe:	e7e9      	b.n	8003d94 <__sflush_r+0xd0>
 8003dc0:	20400001 	.word	0x20400001

08003dc4 <_fflush_r>:
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	690b      	ldr	r3, [r1, #16]
 8003dc8:	4605      	mov	r5, r0
 8003dca:	460c      	mov	r4, r1
 8003dcc:	b913      	cbnz	r3, 8003dd4 <_fflush_r+0x10>
 8003dce:	2500      	movs	r5, #0
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}
 8003dd4:	b118      	cbz	r0, 8003dde <_fflush_r+0x1a>
 8003dd6:	6a03      	ldr	r3, [r0, #32]
 8003dd8:	b90b      	cbnz	r3, 8003dde <_fflush_r+0x1a>
 8003dda:	f7ff f9b3 	bl	8003144 <__sinit>
 8003dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f3      	beq.n	8003dce <_fflush_r+0xa>
 8003de6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003de8:	07d0      	lsls	r0, r2, #31
 8003dea:	d404      	bmi.n	8003df6 <_fflush_r+0x32>
 8003dec:	0599      	lsls	r1, r3, #22
 8003dee:	d402      	bmi.n	8003df6 <_fflush_r+0x32>
 8003df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003df2:	f7ff fb9e 	bl	8003532 <__retarget_lock_acquire_recursive>
 8003df6:	4628      	mov	r0, r5
 8003df8:	4621      	mov	r1, r4
 8003dfa:	f7ff ff63 	bl	8003cc4 <__sflush_r>
 8003dfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e00:	4605      	mov	r5, r0
 8003e02:	07da      	lsls	r2, r3, #31
 8003e04:	d4e4      	bmi.n	8003dd0 <_fflush_r+0xc>
 8003e06:	89a3      	ldrh	r3, [r4, #12]
 8003e08:	059b      	lsls	r3, r3, #22
 8003e0a:	d4e1      	bmi.n	8003dd0 <_fflush_r+0xc>
 8003e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e0e:	f7ff fb91 	bl	8003534 <__retarget_lock_release_recursive>
 8003e12:	e7dd      	b.n	8003dd0 <_fflush_r+0xc>

08003e14 <__swhatbuf_r>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	460c      	mov	r4, r1
 8003e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1c:	4615      	mov	r5, r2
 8003e1e:	2900      	cmp	r1, #0
 8003e20:	461e      	mov	r6, r3
 8003e22:	b096      	sub	sp, #88	@ 0x58
 8003e24:	da0c      	bge.n	8003e40 <__swhatbuf_r+0x2c>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e2e:	bf14      	ite	ne
 8003e30:	2340      	movne	r3, #64	@ 0x40
 8003e32:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e36:	2000      	movs	r0, #0
 8003e38:	6031      	str	r1, [r6, #0]
 8003e3a:	602b      	str	r3, [r5, #0]
 8003e3c:	b016      	add	sp, #88	@ 0x58
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
 8003e40:	466a      	mov	r2, sp
 8003e42:	f000 f849 	bl	8003ed8 <_fstat_r>
 8003e46:	2800      	cmp	r0, #0
 8003e48:	dbed      	blt.n	8003e26 <__swhatbuf_r+0x12>
 8003e4a:	9901      	ldr	r1, [sp, #4]
 8003e4c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e50:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e54:	4259      	negs	r1, r3
 8003e56:	4159      	adcs	r1, r3
 8003e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e5c:	e7eb      	b.n	8003e36 <__swhatbuf_r+0x22>

08003e5e <__smakebuf_r>:
 8003e5e:	898b      	ldrh	r3, [r1, #12]
 8003e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e62:	079d      	lsls	r5, r3, #30
 8003e64:	4606      	mov	r6, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	d507      	bpl.n	8003e7a <__smakebuf_r+0x1c>
 8003e6a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	6123      	str	r3, [r4, #16]
 8003e72:	2301      	movs	r3, #1
 8003e74:	6163      	str	r3, [r4, #20]
 8003e76:	b003      	add	sp, #12
 8003e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e7a:	466a      	mov	r2, sp
 8003e7c:	ab01      	add	r3, sp, #4
 8003e7e:	f7ff ffc9 	bl	8003e14 <__swhatbuf_r>
 8003e82:	9f00      	ldr	r7, [sp, #0]
 8003e84:	4605      	mov	r5, r0
 8003e86:	4639      	mov	r1, r7
 8003e88:	4630      	mov	r0, r6
 8003e8a:	f7ff fbbf 	bl	800360c <_malloc_r>
 8003e8e:	b948      	cbnz	r0, 8003ea4 <__smakebuf_r+0x46>
 8003e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e94:	059a      	lsls	r2, r3, #22
 8003e96:	d4ee      	bmi.n	8003e76 <__smakebuf_r+0x18>
 8003e98:	f023 0303 	bic.w	r3, r3, #3
 8003e9c:	f043 0302 	orr.w	r3, r3, #2
 8003ea0:	81a3      	strh	r3, [r4, #12]
 8003ea2:	e7e2      	b.n	8003e6a <__smakebuf_r+0xc>
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eae:	81a3      	strh	r3, [r4, #12]
 8003eb0:	9b01      	ldr	r3, [sp, #4]
 8003eb2:	6020      	str	r0, [r4, #0]
 8003eb4:	b15b      	cbz	r3, 8003ece <__smakebuf_r+0x70>
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ebc:	f000 f81e 	bl	8003efc <_isatty_r>
 8003ec0:	b128      	cbz	r0, 8003ece <__smakebuf_r+0x70>
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	f023 0303 	bic.w	r3, r3, #3
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	81a3      	strh	r3, [r4, #12]
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	431d      	orrs	r5, r3
 8003ed2:	81a5      	strh	r5, [r4, #12]
 8003ed4:	e7cf      	b.n	8003e76 <__smakebuf_r+0x18>
	...

08003ed8 <_fstat_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	2300      	movs	r3, #0
 8003edc:	4d06      	ldr	r5, [pc, #24]	@ (8003ef8 <_fstat_r+0x20>)
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	602b      	str	r3, [r5, #0]
 8003ee6:	f7fc febf 	bl	8000c68 <_fstat>
 8003eea:	1c43      	adds	r3, r0, #1
 8003eec:	d102      	bne.n	8003ef4 <_fstat_r+0x1c>
 8003eee:	682b      	ldr	r3, [r5, #0]
 8003ef0:	b103      	cbz	r3, 8003ef4 <_fstat_r+0x1c>
 8003ef2:	6023      	str	r3, [r4, #0]
 8003ef4:	bd38      	pop	{r3, r4, r5, pc}
 8003ef6:	bf00      	nop
 8003ef8:	200002b0 	.word	0x200002b0

08003efc <_isatty_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	2300      	movs	r3, #0
 8003f00:	4d05      	ldr	r5, [pc, #20]	@ (8003f18 <_isatty_r+0x1c>)
 8003f02:	4604      	mov	r4, r0
 8003f04:	4608      	mov	r0, r1
 8003f06:	602b      	str	r3, [r5, #0]
 8003f08:	f7fc febd 	bl	8000c86 <_isatty>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	d102      	bne.n	8003f16 <_isatty_r+0x1a>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	b103      	cbz	r3, 8003f16 <_isatty_r+0x1a>
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	bd38      	pop	{r3, r4, r5, pc}
 8003f18:	200002b0 	.word	0x200002b0

08003f1c <_sbrk_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	2300      	movs	r3, #0
 8003f20:	4d05      	ldr	r5, [pc, #20]	@ (8003f38 <_sbrk_r+0x1c>)
 8003f22:	4604      	mov	r4, r0
 8003f24:	4608      	mov	r0, r1
 8003f26:	602b      	str	r3, [r5, #0]
 8003f28:	f7fc fec4 	bl	8000cb4 <_sbrk>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	d102      	bne.n	8003f36 <_sbrk_r+0x1a>
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	b103      	cbz	r3, 8003f36 <_sbrk_r+0x1a>
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	200002b0 	.word	0x200002b0

08003f3c <memchr>:
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	b510      	push	{r4, lr}
 8003f40:	b2c9      	uxtb	r1, r1
 8003f42:	4402      	add	r2, r0
 8003f44:	4293      	cmp	r3, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	d101      	bne.n	8003f4e <memchr+0x12>
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	e003      	b.n	8003f56 <memchr+0x1a>
 8003f4e:	7804      	ldrb	r4, [r0, #0]
 8003f50:	3301      	adds	r3, #1
 8003f52:	428c      	cmp	r4, r1
 8003f54:	d1f6      	bne.n	8003f44 <memchr+0x8>
 8003f56:	bd10      	pop	{r4, pc}

08003f58 <_init>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr

08003f64 <_fini>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	bf00      	nop
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr
